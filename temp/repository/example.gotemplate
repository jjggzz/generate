package {{.PackageName}}


import (
    {{range .Imports}}"{{.}}"
    {{end}}
)

type {{.EntityName}}Example struct {
	criteria []struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}
}

func (ex *{{$.EntityName}}Example) Clear() *{{$.EntityName}}Example {
	ex.criteria = []struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{}
	return ex
}

{{range .EntityFields}}
func (ex *{{$.EntityName}}Example) And{{.FieldName}}IsNull() *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} is null", noValue:true})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}IsNotNull() *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} is not null", noValue:true})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}EqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} = ?", param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}NotEqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} <> ?", param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}GreaterThan(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} > ?", param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}GreaterThanOrEqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} >= ?", param1: param})
	return ex
}
func (ex *{{$.EntityName}}Example) And{{.FieldName}}LessThan(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} < ?", param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}LessThanOrEqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} <= ?", param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}In(param []{{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} in (?)", param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}NotIn(param []{{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} not in (?)", param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}Between(param1 {{.FieldType}}, param2 {{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} between ? and ?", param1: param1,param2: param2,betweenValue:true})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}NotBetween(param1 {{.FieldType}}, param2 {{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} not between ? and ?", param1: param1,param2: param2,betweenValue:true})
	return ex
}

{{if eq .FieldType "string"}}
func (ex *{{$.EntityName}}Example) And{{.FieldName}}Like(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} like ?", param1: param})
	return ex
}
func (ex *{{$.EntityName}}Example) And{{.FieldName}}NotLike(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.criteria = append(ex.criteria, struct {
		fragment     string
		param1       interface{}
		param2       interface{}
		noValue      bool
		betweenValue bool
	}{fragment: "and {{.ColumnName}} not like ?", param1: param})
	return ex
}
{{end}}

{{end}}
