package {{.PackageName}}


import (
    {{range .Imports}}"{{.}}"
    {{end}}
)

type {{.EntityName}}Example struct {
	Criteria []struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}
}

{{range .EntityFields}}
func (ex *{{$.EntityName}}Example) And{{.FieldName}}IsNull() *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} is null", noValue:true})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}IsNotNull() *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} is not null", noValue:true})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}EqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} = ?", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}NotEqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} <> ?", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}GreaterThan(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} > ?", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}GreaterThanOrEqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} >= ?", Param1: param})
	return ex
}
func (ex *{{$.EntityName}}Example) And{{.FieldName}}LessThan(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} < ?", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}LessThanOrEqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} <= ?", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}In(param []{{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} in (?)", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}NotIn(param []{{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} not in (?)", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}Between(param1 {{.FieldType}}, param2 {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} between ? and ?", Param1: param1,Param2: param2,betweenValue:true})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}NotBetween(param1 {{.FieldType}}, param2 {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} not between ? and ?", Param1: param1,Param2: param2,betweenValue:true})
	return ex
}

{{end}}
