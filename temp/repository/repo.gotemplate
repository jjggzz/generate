package {{.PackageName}}


import (
    "database/sql"
	"github.com/jmoiron/sqlx"
	"strings"

    {{range .Imports}}"{{.}}"
    {{end}}
)

type {{StrFirstLetterToLowercase .EntityName}}Repo struct {
    db *sqlx.DB
}

type {{.EntityName}}Example struct {
	Criteria []struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}
}

// execute fail return -1 and err
// execute success return count rows and nil
func (repo *{{StrFirstLetterToLowercase .EntityName}}Repo) Count() (int64, error) {
   var count int64
   	err := repo.db.Get(&count, "select count(*) from {{.TableName}}")
   	if err != nil {
   		return -1, err
   	}
   	return count,nil
}

// execute fail return -1 and err
// execute success return affected rows and nil
func (repo *{{StrFirstLetterToLowercase .EntityName}}Repo) Insert({{StrFirstLetterToLowercase .EntityName}} *{{.EntityName}}) (int64, error) {
    result, err := repo.db.Exec("insert into {{.TableName}}({{join .ColumnNames ", "}}) value ({{buildValueHold .ColumnNames}})"{{range .ColumnNames}},{{StrFirstLetterToLowercase $.EntityName}}.{{findMap . $.EntityFieldMap}}{{end}})
	if err != nil {
		return -1,err
	}
	return result.RowsAffected()
}

// execute fail return -1 and err
// execute success return affected rows and nil
func (repo *{{StrFirstLetterToLowercase .EntityName}}Repo) UpdateByPrimaryKey(primaryKey {{.PrimaryKeyType}},{{StrFirstLetterToLowercase .EntityName}} *{{.EntityName}}) (int64, error) {
    result, err := repo.db.Exec("update {{.TableName}} set {{join .ColumnNames "=?, "}}=? where {{.PrimaryKeyColumnName}} = ?"{{range .ColumnNames}},{{StrFirstLetterToLowercase $.EntityName}}.{{findMap . $.EntityFieldMap}}{{end}},primaryKey)
    if err != nil {
        return -1,err
    }
    return result.RowsAffected()
}

// execute fail return -1 and err
// execute success return affected rows and nil
func (repo *{{StrFirstLetterToLowercase .EntityName}}Repo) DeleteByPrimaryKey(primaryKey {{.PrimaryKeyType}}) (int64, error) {
    result, err := repo.db.Exec("delete from {{.TableName}} where {{.PrimaryKeyColumnName}} = ?", primaryKey)
    if err != nil {
        return -1, err
    }
    return result.RowsAffected()
}

// execute fail return nil and err
// execute success but no record return nil and nil
// execute success has record return data and nil
func (repo *{{StrFirstLetterToLowercase .EntityName}}Repo) SelectByPrimaryKey(primaryKey {{.PrimaryKeyType}}) (*{{.EntityName}},error) {
	{{StrFirstLetterToLowercase .EntityName}} := new({{.EntityName}})
	err := repo.db.Get({{StrFirstLetterToLowercase .EntityName}}, "select {{join .ColumnNames ", "}} from {{.TableName}} where {{.PrimaryKeyColumnName}} = ?", primaryKey)
	if err == sql.ErrNoRows {
        return nil, nil
    }
    if err != nil {
        return nil, err
    }
    return {{StrFirstLetterToLowercase .EntityName}}, nil
}

// execute fail return empty slice and err
// execute success but no record return empty slice and nil
// execute success has record return data and nil
func (repo *{{StrFirstLetterToLowercase .EntityName}}Repo) SelectByExample(example *{{.EntityName}}Example) ([]*{{.EntityName}}, error) {
    var list []*{{.EntityName}}
    	criteria := example.Criteria
    	var params []interface{}
    	var condition = ""
    	if len(criteria) > 0 {
    		var fragments []string
    		for _, e := range criteria {
    			fragments = append(fragments, e.Fragment)
    			if !e.noValue {
                    params = append(params, e.Param1)
                }
                if e.betweenValue {
                    params = append(params, e.Param2)
                }
            }
    		condition += "where " + strings.TrimLeft(strings.Join(fragments, " "), "and")
    	}
        query, args, err := sqlx.In("select {{join .ColumnNames ", "}} from {{.TableName}} "+condition, params...)
        if err != nil {
            return list,err
        }
    	return list, repo.db.Select(&list, query, args...)
}

{{range .EntityFields}}
func (ex *{{$.EntityName}}Example) And{{.FieldName}}IsNull() *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} is null", noValue:true})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}IsNotNull() *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} is not null", noValue:true})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}EqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} = ?", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}NotEqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} <> ?", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}GreaterThan(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} > ?", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}GreaterThanOrEqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} >= ?", Param1: param})
	return ex
}
func (ex *{{$.EntityName}}Example) And{{.FieldName}}LessThan(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} < ?", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}LessThanOrEqualTo(param {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} <= ?", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}In(param []{{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} in (?)", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}NotIn(param []{{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} not in (?)", Param1: param})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}Between(param1 {{.FieldType}}, param2 {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} between ? and ?", Param1: param1,Param2: param2,betweenValue:true})
	return ex
}

func (ex *{{$.EntityName}}Example) And{{.FieldName}}NotBetween(param1 {{.FieldType}}, param2 {{.FieldType}}) *{{$.EntityName}}Example {
	ex.Criteria = append(ex.Criteria, struct {
		Fragment     string
		Param1       interface{}
		Param2       interface{}
		noValue      bool
		betweenValue bool
	}{Fragment: "and {{.ColumnName}} not between ? and ?", Param1: param1,Param2: param2,betweenValue:true})
	return ex
}

{{end}}


