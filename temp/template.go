// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/model.gotemplate (430B)
// repository/new.gotemplate (1.053kB)
// repository/repo.gotemplate (4.339kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xfc\x40\x10\xc6\xeb\x7f\x20\xef\x30\xa4\xfa\xdb\x64\xfb\x74\x22\x1e\x08\x87\x08\xa6\x93\xc0\xed\x25\xcb\x11\x4d\x76\xc3\xee\x1c\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xae\x51\x10\xb1\xf2\x79\x72\xea\x5b\xc8\xee\x5e\xce\xe3\xba\xd9\xf9\xe6\xf7\xcd\x7e\xd3\xf1\xf2\x8a\x2f\x04\x10\xa5\x67\xa1\x3c\xe5\xad\xb0\x36\x8e\xe2\xa8\x6e\x3b\xa5\x11\xfe\xc7\x11\x00\x00\x91\xe6\x72\x21\x20\x3d\xf1\x6d\x63\x6d\x42\x94\x5a\x9b\x8c\xb2\x90\x95\xe3\x0e\x1c\xba\x1d\x3e\x96\x58\x63\x6f\x9c\xc0\x18\x7c\x3f\xaf\x86\x87\xfb\x8c\x28\xcd\xf9\xbc\xd9\xae\x62\x0c\x4a\xd5\xb6\x42\xa2\x93\x02\x72\x28\xa5\x42\x8e\xb5\x92\x6e\x02\xfb\xce\xfd\x71\xf4\x0b\x20\x18\xd4\xcb\x12\x81\xe2\xe8\xdf\xde\xc2\x49\x2d\x9a\xca\x58\x4b\x94\xfa\x72\x03\x8c\xcf\xbc\xef\xdc\x73\x56\xcd\x33\x17\xe2\x48\x35\xcb\x56\x86\x99\x04\x2e\x8d\x92\xae\x7d\x8e\x7a\x52\x6b\x83\x53\x81\x28\x74\xae\xa6\xea\x5a\xe8\x92\x1b\x01\xbb\x9e\xc9\x0c\x18\x83\xe1\xe5\x71\xfd\xfa\x91\xc1\xc5\x9e\x5b\x01\x5f\x6f\x9f\xc3\xd3\x5d\xf6\x27\x84\xdd\x05\xac\xdf\x57\x3f\x37\xb7\x01\xf1\x7e\xbb\x89\x0b\x1f\x69\x73\x51\xeb\xee\xe9\xeb\xdf\x00\x00\x00\xff\xff\x7b\x11\x98\x32\xae\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 430, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2a, 0x1c, 0xf4, 0x15, 0xa1, 0x64, 0x1, 0x13, 0x93, 0x78, 0x34, 0xb7, 0x33, 0x71, 0x30, 0x32, 0xc3, 0xef, 0x80, 0x3f, 0x36, 0x41, 0x8d, 0xe3, 0xf, 0x5a, 0x74, 0x75, 0x35, 0x8b, 0x89}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x6b\xdc\x30\x10\xc5\xcf\x59\xd8\xef\x30\xf8\x50\xe4\xe0\x78\x2f\xa5\x87\x1c\xd3\xa4\x10\x1a\x42\x68\xd2\x53\x29\x45\xb6\x27\xae\x5a\x5b\xf2\x8e\xc6\x4d\x84\xd0\x77\x2f\x5a\x3b\x59\xd7\xf1\xd2\xbd\x59\xf3\xe7\xf7\xde\x93\x70\x27\xcb\xdf\xb2\x46\xf0\x3e\xbf\x1b\x3e\x6f\x65\x8b\x21\xac\x57\xeb\x95\x6a\x3b\x43\x0c\x62\xbd\x3a\xf9\x01\x49\xad\xf8\x67\x5f\xe4\xa5\x69\x37\xb5\x39\xb3\xdb\xe6\xac\x22\xf5\x07\x69\xd3\x3a\xbb\x6d\x92\xf5\xea\x64\x3a\xf2\xab\x35\x8a\x8c\xde\xd8\x6d\xf3\x9c\x44\x18\x00\x80\xf7\x24\x75\x8d\x90\x5f\xef\xc8\x36\x84\xc4\xfb\x3c\x84\xe4\xa5\x8d\xba\x8a\xd2\x69\x5c\x60\xd7\x21\x7c\xc1\xce\x58\xc5\x86\x1c\x58\xa6\xbe\x64\xf0\x33\xd4\x95\x66\xc5\xce\x86\x10\x23\x0c\x87\x21\x41\x5c\x5d\xaa\x0d\xb8\x99\xe2\x2e\xef\x63\xaf\x4b\xb8\xc5\xa7\x38\x25\xaa\x02\x4e\xa3\xf9\xfc\xf2\x22\x9d\xda\x18\xf5\x09\xb9\x27\x3d\x69\x8c\xf5\xe3\xbd\x9d\x47\xa9\x85\xba\xa8\x8a\x34\x9b\xc2\x46\x8b\xf1\x30\x38\x7d\xcb\xdf\x7b\x5f\x06\x4e\xa2\x1c\xbc\x91\x59\xb2\x77\xde\xdf\x33\x7d\x52\x64\xf9\x06\x99\x91\x1e\xcc\x8d\x79\x42\x2a\xa5\x7d\x55\x9e\x5e\xf4\xde\x71\x55\x9c\x57\x45\xf6\xaf\xe1\x31\xc3\xb2\xf7\xdd\x4b\x1f\xf6\xa5\x34\x23\x3d\xca\x12\x5f\x44\x3e\x9a\x5e\xb3\x48\x41\x28\xcd\x1f\xde\x67\x80\x44\x86\xd2\xa1\x77\xad\x2d\x12\x8b\xd3\x19\x6e\x79\xf8\x6b\x57\x49\xc6\x0b\x77\x47\xaa\x95\xe4\x3e\xa3\x13\xf1\x3f\x78\x3d\x3d\xb8\x0e\x43\xc8\x8e\x83\x5d\x62\x83\xff\x87\x2d\xef\xde\x63\x83\x25\x1f\xb1\x3b\xb7\xb2\x8c\xb9\x7a\x96\x6d\xd7\xe0\x9b\xe9\xb1\x9e\x82\xf8\xf6\xfd\x30\x69\xff\x60\x7f\x03\x00\x00\xff\xff\x46\xb9\x52\x24\x1d\x04\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 1053, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0xd2, 0x44, 0x9b, 0x1d, 0xeb, 0x54, 0x21, 0xba, 0x11, 0xb0, 0xab, 0xf5, 0x91, 0xbd, 0xf0, 0x3d, 0x77, 0xf9, 0x81, 0x8d, 0x68, 0xc6, 0xc7, 0xc5, 0x85, 0x4b, 0x8b, 0x43, 0xd7, 0xf7, 0x1c}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdd\x4f\xdc\x46\x10\x7f\xf6\x49\xf7\x3f\x4c\xad\x28\xb2\xc1\x5d\x5a\xa9\xea\x03\xaa\x83\x12\x02\x6d\x5a\x8a\x50\x42\xfb\x82\x50\xb5\x67\x8f\x61\x53\x7b\xd7\xec\xae\xc3\x9d\x2c\xff\xef\xd5\x7e\xd8\xe7\x3b\x8e\x00\x57\xfa\x11\xdd\x03\x77\xf3\xb9\xf3\x9b\x9f\xc7\xb3\xd4\x34\xfb\x93\x5e\x21\xb4\x2d\x39\x73\x5f\x4f\x69\x85\x5d\x37\x9d\x98\x0f\xab\x6a\x21\x35\x44\xd3\x09\x00\x40\x98\x53\x4d\x67\x54\xe1\x9e\xba\x29\xc3\xe9\x24\x08\xaf\x98\xbe\x6e\x66\x24\x13\xd5\xde\xc7\x4a\x30\x29\xb8\x51\xcd\xad\x4e\x69\xc9\xf8\x95\x0a\x4d\x1c\xe3\xdd\xb6\x92\xf2\x2b\x04\xf2\xce\x06\x55\x5d\x17\xb6\x2d\xe9\xba\xb0\x57\x23\xcf\x4d\xde\xd8\x38\xe8\x45\x6d\xce\xf4\x41\xcb\x63\x26\x95\x3e\x41\xad\x51\x9e\x8b\x13\x71\x8b\x32\xa3\x0a\x81\x1c\x71\xcd\xf4\xc2\x1d\xf6\x3d\xd6\x02\x94\x96\x4d\xa6\xa1\x75\xe1\xf2\x19\xec\x98\xa3\x90\xb7\x6f\xa6\x93\x6e\x14\x72\xc5\xf1\x68\x4e\xab\xba\xc4\x91\x6f\x70\x28\x99\x46\xc9\x28\x5c\x5c\x8e\xa4\xc1\xb1\xa4\x57\x15\x72\x0d\xae\x2c\x23\x3a\xa3\x92\x56\x26\x17\xe3\x1a\x65\x41\x33\x6c\xbb\xe9\x24\xe8\x7c\xbe\xbd\x3d\xc0\x39\x66\x8d\x46\x28\x28\x2b\x41\xa2\x6e\x24\x87\xaf\xbf\x05\xca\x73\x40\x29\x57\x4c\x54\x93\x65\xa8\x54\x6f\x95\x89\x86\x6b\x90\xe2\x56\x59\x6b\xce\xca\xe9\xa4\x68\x78\x06\x91\x34\xb5\xee\x3c\x09\x9a\x18\x0e\x4d\xb8\x28\x86\x88\x71\xfd\xfd\x77\x89\xc9\x2e\x64\xec\xb1\xfa\x44\xa5\xcf\x67\xb5\x56\x16\xa0\x94\xb0\x9f\x82\xc9\x46\xf2\x19\xf9\x11\x75\xf4\xd2\x1a\x25\x10\x2a\x2c\x31\xd3\xce\x27\xda\x89\xa1\x90\xa2\x32\xc8\x9e\xd3\x59\xe9\xe9\x13\xc6\x2e\x0c\x2b\x4c\x2e\xf8\x2a\x35\x25\xf8\x7c\x41\x30\x40\x91\x38\x1c\x8c\xb0\x73\x7f\xc6\xf5\x27\xb6\xec\xbf\x0f\x26\x2d\x0a\xcc\x34\xe6\xcf\x87\xe7\x3b\xae\x50\xea\xe8\xd1\x5e\x26\xc1\x8a\xe0\x9e\x56\x80\x44\xd5\x94\xda\x4a\xc7\xf0\x1f\xcd\x31\x8b\x42\x66\xb3\x9a\x2e\x89\x35\xb8\xa3\xb6\xfd\x28\x18\x07\x72\x28\xca\xa6\xe2\x46\xa8\x20\x4c\x20\x34\x99\x3e\xd1\xb2\x41\x88\xda\x76\xd6\xb0\x32\xff\xdd\xfc\xfa\x49\x94\xf9\x8a\x71\xd7\xc5\xe1\xf0\x80\xae\xc8\x93\xcf\x15\xf9\x62\xa5\x28\xd2\xb6\x05\xe3\xf9\xaf\xb4\x06\x32\xa8\x8e\x19\x96\x46\xd4\x75\xfe\x09\x8f\xa7\x93\xbb\xb4\x18\x73\xc2\x76\xd3\xf0\xa1\x97\x39\x50\xc8\x7b\x71\xab\x5e\xfb\x56\x46\xf1\xff\x93\x18\xbf\xd5\x39\xd5\xf8\x66\x71\x26\x59\x45\xe5\xe2\x17\x5c\x44\xf5\xf0\xd5\x0e\xd9\xe1\xd7\xf9\xa2\xc6\x07\xe0\xfd\x07\x38\xd4\xd8\x03\xae\xd1\x07\x14\x6a\xd8\x48\xa1\xf4\xc0\x92\x28\x3d\x80\xdb\x6b\x94\xb8\x5a\xc1\xd2\xb2\xeb\x20\x85\x83\x7f\x8b\x41\xc9\x12\x52\x37\x66\x60\xd3\x98\x01\x87\xc5\x0a\xab\x8c\xa8\xeb\x51\xfa\xd2\xb8\xf5\x16\x4b\x7c\x12\xb7\xb6\x22\x48\x6e\xb3\x6c\x9a\xe9\x8f\xa2\x40\x02\xdb\x34\x07\x9e\xaf\x3b\x26\xc7\xe7\xda\x33\x6b\x34\x70\x01\x12\x33\x21\xf3\x75\x27\xdb\xa2\x0d\x4e\xd7\x54\xad\x79\x98\x55\xe8\x59\xba\xfa\xc1\xbe\x4c\x9f\xd6\xd5\xf5\x49\x90\x2c\xfb\x1b\x3c\x7e\x9e\xec\xa7\xc0\xf1\x36\x5a\x9f\x2a\xd3\xc9\xa6\x97\xff\xa3\xc3\x2e\xf7\x83\xfb\xdf\x49\xcf\xc5\xae\xfe\x3d\x92\xa6\xa0\x6e\x4a\x72\x24\xe5\xa9\x30\x5c\xd9\x40\x32\xce\xca\xc4\xf5\x6a\xc4\xb2\x87\x98\x69\x9d\xee\xa1\xe6\x13\x00\x79\x70\x8d\xc1\xaa\xd6\x0b\x50\x25\xcb\xf0\xe9\xdc\x5d\x77\xfe\x0f\x39\xec\xd7\xe9\x08\xfd\x5a\xbd\xce\x53\xaf\x8f\x21\xba\xb8\xbc\xc3\xe1\xb5\x21\x65\xb6\xd2\x92\x29\x0d\x77\x4d\x9d\x41\x90\xf5\x9b\xfa\x7e\x0a\x3e\x23\xe9\xb7\x77\x6f\x62\x82\xd4\x66\x4d\x57\x70\x71\xb9\xb2\xa6\x0f\xea\x4c\xf0\x9c\x69\x26\x38\xa4\x10\xfa\xbb\x88\xe1\x55\x89\x3c\xea\x33\xc4\xf0\x0a\xbe\xe9\x0f\x16\x58\xb7\xc2\xdf\x07\x94\xbb\x27\xd8\x2b\x81\xd3\x16\x42\xc2\x1f\x09\xa0\x7d\x82\xec\xeb\x70\x38\xe8\x10\x21\x58\xba\xa7\x40\xeb\x1a\x79\x1e\x0d\xa2\x04\x90\xf4\xd7\x8d\x78\xf0\xf0\x65\x0c\xe6\xee\xb7\xb1\xb5\xf7\x90\xc1\xb0\xaf\x2d\x58\x16\xb6\x9b\x42\xe8\x9e\xae\x10\x76\xfd\x05\x46\x91\x73\xc9\xaa\x13\x2c\x74\xd4\x0b\x7e\x16\x8c\x8f\x4f\x11\x86\x71\x02\x21\xe5\x79\xd8\x07\xef\x63\x7b\xfe\x98\xf6\x24\xc3\x94\x70\x24\x88\x5e\x3a\xe9\x96\x43\x20\xdc\x1d\x8e\x9d\xf8\xce\x11\x42\xfa\x91\x3f\xec\x17\xa3\xc5\x40\x19\x3e\x38\xee\xe2\xdc\x30\xee\xc5\x66\xca\xbd\xe6\x79\xdb\x12\xeb\xe2\x35\x37\x0d\x2d\xcf\x85\x03\x12\x7a\x5d\x3f\x63\xef\x0b\x64\x67\x2c\xce\x07\xa2\x2d\x1b\x32\x12\x26\xb0\xe5\xd5\xb1\xed\x6d\xf7\x2d\xf0\xe6\x54\x1b\x66\xa0\xf5\xde\x77\xf0\xd8\x79\xdd\x4f\x82\xb9\xc7\x69\x1b\x38\x4e\x85\xfe\x12\x11\xf9\xe1\xd5\x63\x20\x19\xfe\xb9\x60\x3e\x7f\x05\x00\x00\xff\xff\x79\x0d\xa1\xb8\xf3\x10\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 4339, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0x65, 0x87, 0xd6, 0x9f, 0x93, 0x0, 0x82, 0x5, 0x64, 0x14, 0xf1, 0x11, 0x15, 0x59, 0xd8, 0xae, 0xb2, 0xe3, 0x97, 0xf0, 0x89, 0xfe, 0x9e, 0x13, 0x65, 0x55, 0x0, 0x67, 0x6e, 0xe8, 0xbe}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model.gotemplate": modelGotemplate,
	"new.gotemplate":   newGotemplate,
	"repo.gotemplate":  repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"model.gotemplate": {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":   {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":  {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
