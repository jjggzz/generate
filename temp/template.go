// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/example.gotemplate (5.657kB)
// repository/model.gotemplate (430B)
// repository/new.gotemplate (1.192kB)
// repository/repo.gotemplate (6.04kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampleGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xcf\x6b\xdb\x30\x14\xc7\xcf\x0d\xe4\x7f\x78\x98\x1d\x9c\x61\x0c\xcd\x31\xa4\x0d\x5b\xc9\x46\xa0\x78\x3b\x84\x5d\x4a\x0f\xaa\xfd\x92\x89\xc8\x92\x2b\x3f\xb3\x04\xa1\xff\x7d\xc8\xb2\xb3\x8c\x65\x23\x0b\x75\x29\x38\xc9\x21\xce\xfb\xea\xd7\xf7\xa3\x67\x59\x56\xc1\xd2\x0d\x5b\x23\x18\x13\x7f\xf5\x97\x09\xcb\xd1\xda\xe1\xc0\x7d\x79\x5e\x28\x4d\x10\x0e\x07\x00\x00\xc6\x68\x26\xd7\x08\xf1\xa2\x0e\x97\xd6\x06\xc6\xc4\xd6\x06\xad\x8c\x32\x73\x35\x47\xae\x2a\xed\x8a\xba\xd5\xb9\x24\x4e\x3b\xdf\xe8\x7c\xcb\xf2\x42\x20\x94\xa4\xab\x94\xc0\x0c\x07\x57\xa9\xe6\x84\x9a\x33\x78\x78\x3c\x88\x5e\xad\x34\x5b\xe7\x28\xc9\xb5\xeb\x8a\x73\xb9\x76\xe1\x82\x69\x96\x5f\x83\xff\x70\x49\xa8\x57\x2c\x45\x63\xf7\xda\xf8\xb8\x26\xd5\x37\x26\x2a\xf4\xda\x93\x52\xc2\x05\x9f\x90\x7e\x20\x4a\xaf\x34\x41\x3b\x1c\xd4\xd6\x57\x95\x4c\x21\xc4\x2d\xbc\x37\xe6\xdd\x31\x0f\x23\xb8\x13\xc8\x74\x38\xfa\x6b\x89\xda\x08\x6e\xe3\xbd\xc3\x9b\xb7\xe2\xb1\x2e\xaf\x91\x2a\x2d\x01\xb7\x8d\xe3\xfd\xe4\x7a\x2b\x9f\x38\x8a\xac\x74\xb3\x79\x02\x8a\x0f\x32\x33\x26\xae\xab\x78\x65\x51\x26\x95\x10\xff\x07\x87\x15\x05\xca\x2c\x3c\x08\x46\xf0\x36\x70\xb5\x3d\x4f\x20\x60\x32\x73\x49\x7d\xa7\x44\x95\x4b\xef\x08\x78\x09\xb2\x12\x22\x88\xa0\x69\x73\x42\xba\x42\x3b\x3a\x02\xf9\x4c\x96\x8a\x7a\x86\x53\x51\xa7\x48\xe7\xcf\x15\x13\x4b\x15\xd6\x86\xa0\xd5\x96\xbb\x02\xad\xed\x07\xe4\x1b\x98\x05\x11\xf8\x71\x4c\xfc\xef\x8b\xd1\x4d\x14\x5d\x00\x4f\x6f\x3b\x24\xfc\x59\x23\x23\xd4\xcb\xef\x4c\xf6\x18\xf1\x2b\x11\xfe\xa2\x2f\xd9\x7c\x7b\xda\x7a\x71\x0e\xe9\x7b\x2c\xcb\x9e\x27\xf2\xb4\xc3\x44\x6e\xf1\x5e\xb2\xd8\xc2\xb4\xcb\xa7\xde\xa2\xcd\xe0\x87\xc7\x3e\xb2\xe5\x12\xc2\xd9\xa8\xcb\x3d\x45\xcf\x01\xbb\x3d\x71\xc7\x90\x3f\xfa\x71\x85\x8d\xd9\xdf\x29\x37\x9d\x8e\x7b\xb9\x72\x34\x95\x60\x06\x4e\xfd\x63\x11\xb9\x8e\xfc\x30\x9a\xbf\xe3\xe8\xb0\x93\x97\x7d\x75\x49\x14\x5d\xa6\xe9\x5f\xf7\x48\x37\x53\x65\x0c\x5f\x01\x3e\xc3\x2f\xa6\x10\x78\xe7\xc1\xb9\x67\x24\xf7\x7c\x83\x3d\x7e\x18\x0b\xbe\xc1\xce\x36\x95\x89\xa2\x9e\xe3\x75\xb7\xc2\xc9\x88\xf7\x27\xb7\x07\x97\x3f\x03\x00\x00\xff\xff\x14\x22\x83\x89\x19\x16\x00\x00")

func exampleGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_exampleGotemplate,
		"example.gotemplate",
	)
}

func exampleGotemplate() (*asset, error) {
	bytes, err := exampleGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example.gotemplate", size: 5657, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaf, 0xa7, 0x24, 0xf8, 0x5a, 0x41, 0x65, 0x2a, 0x9, 0xb5, 0x3b, 0xb, 0x5a, 0xba, 0xca, 0x74, 0x44, 0x50, 0xa1, 0x30, 0xd6, 0xb5, 0xd, 0x14, 0x5a, 0x7b, 0x2c, 0x3, 0x28, 0xd8, 0xda, 0x53}}
	return a, nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xfc\x40\x10\xc6\xeb\x7f\x20\xef\x30\xa4\xfa\xdb\x64\xfb\x74\x22\x1e\x08\x87\x08\xa6\x93\xc0\xed\x25\xcb\x11\x4d\x76\xc3\xee\x1c\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xae\x51\x10\xb1\xf2\x79\x72\xea\x5b\xc8\xee\x5e\xce\xe3\xba\xd9\xf9\xe6\xf7\xcd\x7e\xd3\xf1\xf2\x8a\x2f\x04\x10\xa5\x67\xa1\x3c\xe5\xad\xb0\x36\x8e\xe2\xa8\x6e\x3b\xa5\x11\xfe\xc7\x11\x00\x00\x91\xe6\x72\x21\x20\x3d\xf1\x6d\x63\x6d\x42\x94\x5a\x9b\x8c\xb2\x90\x95\xe3\x0e\x1c\xba\x1d\x3e\x96\x58\x63\x6f\x9c\xc0\x18\x7c\x3f\xaf\x86\x87\xfb\x8c\x28\xcd\xf9\xbc\xd9\xae\x62\x0c\x4a\xd5\xb6\x42\xa2\x93\x02\x72\x28\xa5\x42\x8e\xb5\x92\x6e\x02\xfb\xce\xfd\x71\xf4\x0b\x20\x18\xd4\xcb\x12\x81\xe2\xe8\xdf\xde\xc2\x49\x2d\x9a\xca\x58\x4b\x94\xfa\x72\x03\x8c\xcf\xbc\xef\xdc\x73\x56\xcd\x33\x17\xe2\x48\x35\xcb\x56\x86\x99\x04\x2e\x8d\x92\xae\x7d\x8e\x7a\x52\x6b\x83\x53\x81\x28\x74\xae\xa6\xea\x5a\xe8\x92\x1b\x01\xbb\x9e\xc9\x0c\x18\x83\xe1\xe5\x71\xfd\xfa\x91\xc1\xc5\x9e\x5b\x01\x5f\x6f\x9f\xc3\xd3\x5d\xf6\x27\x84\xdd\x05\xac\xdf\x57\x3f\x37\xb7\x01\xf1\x7e\xbb\x89\x0b\x1f\x69\x73\x51\xeb\xee\xe9\xeb\xdf\x00\x00\x00\xff\xff\x7b\x11\x98\x32\xae\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 430, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2a, 0x1c, 0xf4, 0x15, 0xa1, 0x64, 0x1, 0x13, 0x93, 0x78, 0x34, 0xb7, 0x33, 0x71, 0x30, 0x32, 0xc3, 0xef, 0x80, 0x3f, 0x36, 0x41, 0x8d, 0xe3, 0xf, 0x5a, 0x74, 0x75, 0x35, 0x8b, 0x89}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4f\x6f\x9b\x30\x18\xc6\xcf\x45\xe2\x3b\x58\x1c\x26\xa8\x28\xb9\x4c\x3b\xf4\xd8\xb5\x93\xaa\x55\x55\xb5\x76\xa7\x69\x9a\x0c\xbc\x65\xde\xc0\x26\xaf\x5f\x96\x58\x96\xbf\xfb\xe4\x40\x12\x46\xc8\x92\xde\xf0\xfb\xe7\x79\x7e\x8f\x81\x96\x17\xbf\x79\x05\xcc\xda\xec\xa9\x7f\x7c\xe4\x0d\x38\x17\x06\x61\x20\x9a\x56\x21\xb1\x38\x0c\x2e\x7e\xb0\xa8\x12\xf4\xb3\xcb\xb3\x42\x35\x8b\x4a\x5d\xe9\x65\x7d\x55\xa2\xf8\x03\xb8\x68\x8c\x5e\xd6\x51\x18\x5c\x8c\x47\x7e\x35\x4a\xa0\x92\x0b\xbd\xac\xd7\x91\x17\x63\x8c\x31\x6b\x91\xcb\x0a\x58\x76\xbf\x51\xd6\xce\x45\xd6\x66\xce\x45\xdb\x36\xc8\xd2\x5b\x27\x7e\x81\x4c\x0b\xec\x0b\xb4\x4a\x0b\x52\x68\x98\x26\xec\x0a\x62\x76\x22\x75\x27\x49\x90\xd1\xce\xf9\x08\xfd\xa1\x4f\xe0\x57\xe7\x6a\xbd\xdc\xc4\x71\x93\xf7\xb5\x93\x05\x7b\x84\x95\x9f\x8a\xcb\x9c\x5d\x7a\xf8\xec\xf6\x26\x19\x63\x0c\xfe\x08\xd4\xa1\x1c\x35\x86\xfa\xf9\x6c\xd7\xde\x6a\xa6\x1e\x97\x79\x92\x8e\xc5\x06\x44\x7f\xe8\x49\x0f\xf5\xf7\xec\xf3\x82\xa3\x28\x47\x6f\x64\x92\xec\x9d\xb5\xcf\x84\x9f\x04\x6a\x7a\x00\x22\xc0\x17\xf5\xa0\x56\x80\x05\xd7\x3b\xe7\xf1\x45\xef\x89\xcb\xfc\xba\xcc\xd3\x7f\x81\x87\x0c\xf3\xec\x9b\x37\x7d\x9c\x4b\x48\x02\x7c\xe5\x05\x6c\x4d\x3e\xaa\x4e\x52\x9c\xb0\x58\x48\xfa\xf0\x3e\x65\x80\xa8\x30\xe9\x7b\xf7\x52\x03\x52\x7c\x39\x91\x9b\x1f\xfe\xda\x96\x9c\xe0\xc6\x3c\xa1\x68\x38\x9a\xcf\x60\x62\xff\x1f\xec\x4e\x2f\xa6\x05\xe7\xd2\xf3\xc4\x6e\xa1\x86\xd3\x62\xf3\xbb\xcf\x50\x43\x41\x67\xec\x4e\x51\xe6\xf3\xdc\xad\x79\xd3\xd6\x70\x30\x3d\xd4\xdf\x18\xe8\x84\xda\xff\x13\x9d\x5e\xfe\xf6\xfd\x78\xa8\xfd\xb7\xf3\x37\x00\x00\xff\xff\x85\xf2\xad\x0e\xa8\x04\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 1192, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x3, 0x89, 0xdc, 0x91, 0x1, 0xf1, 0x4a, 0xf9, 0x16, 0xc3, 0xf6, 0x27, 0xe1, 0x4e, 0xcd, 0xf, 0x23, 0xd2, 0xc5, 0x8b, 0x43, 0x80, 0x5b, 0x6f, 0xda, 0xc0, 0xc6, 0x38, 0x5d, 0x53, 0xb7}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x6d\x6f\xdb\xb6\x13\x7f\x4d\x03\xfe\x0e\x57\xe1\x8f\x42\x4a\xf4\x57\xd6\x62\xd8\x8b\x02\x5e\xb0\xb6\xe9\xd6\x2d\x2b\x8a\x36\xdb\x9b\xa2\x18\x68\xe9\xe4\xb0\x93\x48\x85\xa4\xea\x18\x82\xbe\xfb\x40\xea\xc1\xb2\x2d\xf9\x29\xee\xd6\x26\x80\x2d\x1d\x8f\x77\xbc\xbb\xdf\x3d\xd0\x19\x0d\xff\xa6\x33\x84\xa2\x08\xde\x56\x8f\x6f\x68\x8a\x65\x39\x1e\x99\x7f\x96\x66\x42\x6a\x70\xc7\x23\x00\x00\x27\xa2\x9a\x4e\xa9\xc2\x0b\x75\x97\x38\xe3\x11\x71\x66\x4c\xdf\xe6\xd3\x20\x14\xe9\xc5\xa7\x54\x30\x29\xb8\x59\xba\xb7\x6b\x4a\x4b\xc6\x67\xca\x19\x8f\x3c\x23\x4a\x2f\x32\xa3\xe5\xbd\x96\xaf\x98\x54\xfa\x1a\xb5\x46\x79\x23\xae\xc5\x1c\x65\x48\x15\x42\x70\xc5\x35\xd3\x8b\x4a\xfd\x3b\xcc\x04\x28\x2d\xf3\x50\x43\x51\x69\x8f\xa6\x70\x66\x84\x07\x2f\x9f\x8f\x47\xf6\x7c\x17\x17\x80\xf7\x18\xe6\x1a\x21\xa6\x2c\x01\x89\x3a\x97\x1c\xfe\xff\x04\x28\x8f\x00\xa5\x5c\x61\x51\x79\x18\xa2\x52\x0d\x57\x28\x72\xae\x41\x8a\xb9\xb2\xdc\x9c\x25\xe3\x51\x9c\xf3\x10\x5c\x69\x74\x9f\x1d\x74\x54\x0f\x5e\x18\x71\xae\x07\x2e\xe3\xfa\x87\xef\x7d\xa3\x5d\x48\xaf\x3e\xfb\x67\x2a\x6b\x7d\x76\xd5\xd2\x08\x4a\x09\xcf\x26\x60\xb4\x05\xd1\x34\xf8\x19\xb5\xfb\xd8\x32\xf9\xe0\x28\x4c\x30\xd4\xd5\x1e\xf7\xcc\x83\x58\x8a\xd4\x84\xe8\x86\x4e\x93\x3a\x40\x8e\x57\x89\x61\xb1\xd1\x05\x8f\x26\xc6\x84\x5a\x1f\x21\xad\x2b\xfc\xca\x0f\x86\x58\x56\x5f\x5d\xfb\x7d\x6b\xf6\xc3\x9d\x49\xe3\x18\x43\x8d\xd1\xe9\xfc\xf9\x9a\x2b\x94\xda\xdd\x7b\x97\x51\xb0\x42\x18\x08\x05\x48\x54\x79\xa2\x2d\xb5\xeb\xfe\xab\x7b\x0c\x5d\x87\x59\xad\x26\x4a\x62\xcd\xdd\x6e\x51\x7c\x12\x8c\x43\xf0\x42\x24\x79\xca\x0d\x51\x81\xe3\x83\x63\x34\x7d\xa6\x49\x8e\xe0\x16\xc5\x34\x67\x49\xf4\xa7\x79\xfb\x45\x24\xd1\x0a\x73\x59\x7a\x4e\x51\x48\xca\x67\xb8\x46\xf7\xb7\x19\xf9\xbf\x15\xa3\x82\xa2\x88\x19\x8f\x7e\xa7\x19\x04\xed\xd2\x2b\x86\x89\x21\x95\x65\x51\x20\x8f\xca\xd2\x1b\x8f\x36\x61\xd1\xc5\x84\x8d\xa6\xc1\x43\x43\xab\x9c\x12\xbc\x13\x73\xf5\x53\x1d\x4a\xd7\xfb\x3a\x81\xf1\x47\x16\x51\x8d\xcf\x17\x6f\x25\x4b\xa9\x5c\xfc\x86\x0b\x37\x6b\x1f\x6d\x19\x6b\xdf\x6e\x16\x19\xee\x70\xef\x17\xc0\x50\x6e\x0f\xb8\x06\x1f\x50\xa8\xa1\x17\x42\x93\x4b\x0b\xa2\xc9\x25\xcc\x6f\x51\xe2\xaa\x05\x4b\xce\xb2\x84\x09\x5c\xfe\x5b\x08\xf2\x97\x2e\xad\xca\x0c\xf4\x95\x19\xa8\x7c\xb1\x82\x2a\x43\x2a\x1b\x2f\x7d\x6b\xd8\x7a\x89\x09\x1e\x84\xad\xa3\x00\x12\x59\x2d\x7d\x35\x7d\x2f\x08\xf8\x70\x4c\x70\xe0\x74\xd1\x31\x3a\xb6\x85\x67\x9a\x6b\xe0\x02\x24\x86\x42\x46\xeb\x9b\x6c\x88\x7a\x36\xdd\x52\xb5\xb6\xc3\x0c\x1b\x27\x89\xea\x7b\xdb\x4c\x0f\x8b\xea\x7a\x25\xf0\x97\xf1\x25\xfb\xd7\x93\x67\x13\xe0\x38\x77\xd7\xab\xca\x78\xd4\xd7\xfc\xf7\x16\xbb\x9c\x0f\x86\x7b\xd2\xa9\xd0\xd5\xf4\x91\xc9\x04\xd4\x5d\x12\x5c\x49\xf9\x46\x18\xac\xf4\x80\x8c\xb3\xc4\xaf\x62\xd5\x41\xd9\x2e\x64\xda\x4d\x03\xd0\x3c\xc0\x21\x5f\xed\x18\xd3\x74\xab\xab\x7b\x9a\x66\x09\xba\x58\x7d\x6f\x74\x9a\x7a\xfd\x0b\xf4\xaa\x50\x32\x8d\x92\x51\x03\xb7\x5a\x7b\xd0\xd0\x2a\x0e\x33\x9d\x66\x54\xd2\x54\xc1\x87\x8f\x8c\x6b\x94\x31\x0d\xb1\xb0\xee\x34\xeb\xfd\x3d\xa7\xde\x31\x01\x9a\x65\xc8\x23\xb7\x7a\x3f\x5d\x27\xf2\x1a\xe5\xb6\x21\x2d\x4f\x1a\x0a\x1e\x31\xcd\x04\x87\x09\x38\x4e\x8b\xb2\x04\xb9\xdb\x98\xe5\xc1\x8f\xf0\x5d\x17\x6c\x66\x5f\x2c\xe9\x2c\x45\xae\x8d\x91\xd5\xd5\x64\xb9\x1e\x0b\x09\x7f\xf9\x80\x36\x25\xad\xad\xad\xd7\x3a\x52\x2c\x67\x2b\xa5\x35\xbc\x25\xf9\x80\x41\xf3\xe2\xad\x6e\x63\x31\x3c\xc2\x80\x0b\x3b\x1a\xae\xcb\x34\x7f\x03\xde\x04\x0c\xec\xd3\x93\x35\x79\xe5\x86\x78\x0c\xa6\xa8\xe7\x88\xfc\x58\x15\x4f\x87\x55\x74\x1e\x97\xde\x3f\x9f\x80\x53\x15\x14\x07\xce\xa1\xbe\xec\x05\x37\x92\xa5\xd7\x18\x6b\xb7\x21\xfc\x2a\x18\xef\xba\xc8\x01\xc7\xf3\xc1\xa1\x3c\xaa\x2f\x30\x8d\xf4\xbb\x1c\xe5\xc2\x07\x2a\x67\xaa\xed\x9b\xf6\xba\xf7\x9a\x3f\x60\xa6\x72\xce\xdb\x13\xfb\xb5\x07\x82\x20\x78\x50\xdb\x1c\xee\xec\x1d\x13\x1e\xaa\xe4\x5b\x9d\x9c\xf6\xac\x73\x7d\xc5\x8a\x6c\xaf\x54\x64\xb8\x4c\x91\xbe\xba\x40\x86\x8a\x02\x21\x43\xe5\x80\x90\xed\x85\x80\x10\x72\x40\xfe\x13\x42\x36\xd2\x9e\x10\x42\xf6\x48\x75\x42\xec\xe5\xcc\x0a\xd8\x4c\xec\x3d\x84\x3c\xed\x08\xb1\x1f\x27\xce\x5b\x2b\x74\x6b\xc6\x6e\x19\x72\x07\x73\x72\xfb\xa5\x15\xba\xb7\xd6\x03\x92\xf0\x00\xa9\x3b\xb3\x6e\x30\xef\x30\xcd\xf4\x02\x54\xc2\x42\x3c\x7c\x36\x5e\xdf\xfc\x1f\xce\xc8\xfb\xe7\xef\x87\x8f\x1b\x33\xf2\xda\xe4\x61\xd2\x2c\x61\x4a\xc3\x26\x6b\xc5\xb0\x23\xe3\x2d\xcb\x70\xd6\xb7\xcb\x7d\x13\xc1\x60\xf6\xdb\xc5\xc1\x0a\x50\xad\xee\x1e\x07\x0e\xab\x04\xf5\x8e\x9d\x43\xc0\x11\x83\x40\xcf\x30\xb0\xf7\x40\x70\xc4\x50\xd0\xa3\xae\x89\xc4\xa9\x4b\x0c\x2c\x7f\xb2\x84\x9d\xf3\xc1\x71\xf7\xa1\xad\xc3\xc1\xd6\xde\xdd\x69\xd2\x06\xe1\xcb\x9f\x3e\xba\x1e\xe9\x32\xb4\x35\xaa\x4a\x34\xf7\x71\x45\xdd\x28\x56\x75\x95\x19\x8f\xfe\x09\x00\x00\xff\xff\x77\x43\x5b\x05\x98\x17\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 6040, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x8, 0xc0, 0x42, 0x7, 0x4d, 0x19, 0x5e, 0x1c, 0xea, 0xfe, 0xf1, 0xdd, 0x33, 0x92, 0x30, 0x16, 0x56, 0xc5, 0xbd, 0x6e, 0xc6, 0xfa, 0x9, 0x16, 0xba, 0x67, 0x12, 0xe6, 0x53, 0xb7, 0xb3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"example.gotemplate": exampleGotemplate,
	"model.gotemplate":   modelGotemplate,
	"new.gotemplate":     newGotemplate,
	"repo.gotemplate":    repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"example.gotemplate": {exampleGotemplate, map[string]*bintree{}},
	"model.gotemplate":   {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":     {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":    {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
