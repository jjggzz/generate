// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/model.gotemplate (430B)
// repository/new.gotemplate (1.053kB)
// repository/repo.gotemplate (6.857kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xfc\x40\x10\xc6\xeb\x7f\x20\xef\x30\xa4\xfa\xdb\x64\xfb\x74\x22\x1e\x08\x87\x08\xa6\x93\xc0\xed\x25\xcb\x11\x4d\x76\xc3\xee\x1c\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xae\x51\x10\xb1\xf2\x79\x72\xea\x5b\xc8\xee\x5e\xce\xe3\xba\xd9\xf9\xe6\xf7\xcd\x7e\xd3\xf1\xf2\x8a\x2f\x04\x10\xa5\x67\xa1\x3c\xe5\xad\xb0\x36\x8e\xe2\xa8\x6e\x3b\xa5\x11\xfe\xc7\x11\x00\x00\x91\xe6\x72\x21\x20\x3d\xf1\x6d\x63\x6d\x42\x94\x5a\x9b\x8c\xb2\x90\x95\xe3\x0e\x1c\xba\x1d\x3e\x96\x58\x63\x6f\x9c\xc0\x18\x7c\x3f\xaf\x86\x87\xfb\x8c\x28\xcd\xf9\xbc\xd9\xae\x62\x0c\x4a\xd5\xb6\x42\xa2\x93\x02\x72\x28\xa5\x42\x8e\xb5\x92\x6e\x02\xfb\xce\xfd\x71\xf4\x0b\x20\x18\xd4\xcb\x12\x81\xe2\xe8\xdf\xde\xc2\x49\x2d\x9a\xca\x58\x4b\x94\xfa\x72\x03\x8c\xcf\xbc\xef\xdc\x73\x56\xcd\x33\x17\xe2\x48\x35\xcb\x56\x86\x99\x04\x2e\x8d\x92\xae\x7d\x8e\x7a\x52\x6b\x83\x53\x81\x28\x74\xae\xa6\xea\x5a\xe8\x92\x1b\x01\xbb\x9e\xc9\x0c\x18\x83\xe1\xe5\x71\xfd\xfa\x91\xc1\xc5\x9e\x5b\x01\x5f\x6f\x9f\xc3\xd3\x5d\xf6\x27\x84\xdd\x05\xac\xdf\x57\x3f\x37\xb7\x01\xf1\x7e\xbb\x89\x0b\x1f\x69\x73\x51\xeb\xee\xe9\xeb\xdf\x00\x00\x00\xff\xff\x7b\x11\x98\x32\xae\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 430, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2a, 0x1c, 0xf4, 0x15, 0xa1, 0x64, 0x1, 0x13, 0x93, 0x78, 0x34, 0xb7, 0x33, 0x71, 0x30, 0x32, 0xc3, 0xef, 0x80, 0x3f, 0x36, 0x41, 0x8d, 0xe3, 0xf, 0x5a, 0x74, 0x75, 0x35, 0x8b, 0x89}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x6b\xdc\x30\x10\xc5\xcf\x59\xd8\xef\x30\xf8\x50\xe4\xe0\x78\x2f\xa5\x87\x1c\xd3\xa4\x10\x1a\x42\x68\xd2\x53\x29\x45\xb6\x27\xae\x5a\x5b\xf2\x8e\xc6\x4d\x84\xd0\x77\x2f\x5a\x3b\x59\xd7\xf1\xd2\xbd\x59\xf3\xe7\xf7\xde\x93\x70\x27\xcb\xdf\xb2\x46\xf0\x3e\xbf\x1b\x3e\x6f\x65\x8b\x21\xac\x57\xeb\x95\x6a\x3b\x43\x0c\x62\xbd\x3a\xf9\x01\x49\xad\xf8\x67\x5f\xe4\xa5\x69\x37\xb5\x39\xb3\xdb\xe6\xac\x22\xf5\x07\x69\xd3\x3a\xbb\x6d\x92\xf5\xea\x64\x3a\xf2\xab\x35\x8a\x8c\xde\xd8\x6d\xf3\x9c\x44\x18\x00\x80\xf7\x24\x75\x8d\x90\x5f\xef\xc8\x36\x84\xc4\xfb\x3c\x84\xe4\xa5\x8d\xba\x8a\xd2\x69\x5c\x60\xd7\x21\x7c\xc1\xce\x58\xc5\x86\x1c\x58\xa6\xbe\x64\xf0\x33\xd4\x95\x66\xc5\xce\x86\x10\x23\x0c\x87\x21\x41\x5c\x5d\xaa\x0d\xb8\x99\xe2\x2e\xef\x63\xaf\x4b\xb8\xc5\xa7\x38\x25\xaa\x02\x4e\xa3\xf9\xfc\xf2\x22\x9d\xda\x18\xf5\x09\xb9\x27\x3d\x69\x8c\xf5\xe3\xbd\x9d\x47\xa9\x85\xba\xa8\x8a\x34\x9b\xc2\x46\x8b\xf1\x30\x38\x7d\xcb\xdf\x7b\x5f\x06\x4e\xa2\x1c\xbc\x91\x59\xb2\x77\xde\xdf\x33\x7d\x52\x64\xf9\x06\x99\x91\x1e\xcc\x8d\x79\x42\x2a\xa5\x7d\x55\x9e\x5e\xf4\xde\x71\x55\x9c\x57\x45\xf6\xaf\xe1\x31\xc3\xb2\xf7\xdd\x4b\x1f\xf6\xa5\x34\x23\x3d\xca\x12\x5f\x44\x3e\x9a\x5e\xb3\x48\x41\x28\xcd\x1f\xde\x67\x80\x44\x86\xd2\xa1\x77\xad\x2d\x12\x8b\xd3\x19\x6e\x79\xf8\x6b\x57\x49\xc6\x0b\x77\x47\xaa\x95\xe4\x3e\xa3\x13\xf1\x3f\x78\x3d\x3d\xb8\x0e\x43\xc8\x8e\x83\x5d\x62\x83\xff\x87\x2d\xef\xde\x63\x83\x25\x1f\xb1\x3b\xb7\xb2\x8c\xb9\x7a\x96\x6d\xd7\xe0\x9b\xe9\xb1\x9e\x82\xf8\xf6\xfd\x30\x69\xff\x60\x7f\x03\x00\x00\xff\xff\x46\xb9\x52\x24\x1d\x04\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 1053, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0xd2, 0x44, 0x9b, 0x1d, 0xeb, 0x54, 0x21, 0xba, 0x11, 0xb0, 0xab, 0xf5, 0x91, 0xbd, 0xf0, 0x3d, 0x77, 0xf9, 0x81, 0x8d, 0x68, 0xc6, 0xc7, 0xc5, 0x85, 0x4b, 0x8b, 0x43, 0xd7, 0xf7, 0x1c}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x5f\x6f\xdb\x36\x10\x7f\x96\x01\x7f\x87\xab\x50\x14\x52\xab\x29\x1b\x30\xec\x21\xa8\x1a\xf4\x4f\xda\x65\xcb\xb2\xa2\xcd\xf6\x12\x04\x03\x2d\x9d\x12\x76\x14\xa9\x90\x54\x63\x43\xd0\x77\x1f\x48\xea\x9f\x5d\xa7\x4d\x32\xbb\x9b\x8b\x3c\xd8\x3e\xf2\xee\x78\xbf\xfb\xdd\xf1\x88\x94\x24\xfd\x9b\x5c\x20\xd4\x75\xfc\xd6\x7d\x3d\x21\x05\x36\xcd\x74\x62\xfe\x68\x51\x0a\xa9\x21\x98\x4e\x00\x00\xfc\x8c\x68\x32\x23\x0a\xf7\xd4\x15\xf3\xa7\x13\xcf\xbf\xa0\xfa\xb2\x9a\xc5\xa9\x28\xf6\x3e\x14\x82\x4a\xc1\xcd\xd2\xdc\xae\x29\x2d\x29\xbf\x50\xbe\xb1\x63\xb4\xeb\x5a\x12\x7e\x81\x10\x1f\x59\xa3\xaa\x69\xfc\xba\x8e\x9b\xc6\xef\x96\x91\x67\xc6\x6f\x68\x14\xf4\xa2\x34\x67\x7a\xaf\xe5\x6b\x2a\x95\x3e\x46\xad\x51\x9e\x8a\x63\x71\x8d\x32\x25\x0a\x21\x3e\xe4\x9a\xea\x85\x3b\xec\x3b\x2c\x05\x28\x2d\xab\x54\x43\xed\xcc\x65\x33\x78\x6c\x8e\x12\xbf\x7a\x31\x9d\x34\x23\x93\x4b\x8a\x87\x73\x52\x94\x0c\x47\xba\xde\x4b\x49\x35\x4a\x4a\xe0\xec\x7c\x24\xf5\x5e\x4b\x72\x51\x20\xd7\xe0\xc2\x32\xa2\xb7\x44\x92\xc2\xf8\xa2\x5c\xa3\xcc\x49\x8a\x75\x63\xe4\x5c\xfc\x49\x58\x85\x00\x33\x21\xd8\x74\xe2\x35\xed\x01\xf6\xf6\x00\xe7\x98\x56\x1a\x21\x27\x94\x81\x44\x5d\x49\x0e\xdf\xfd\x00\x84\x67\x80\x52\x2e\x6d\x51\x55\x9a\xa2\x52\xdd\xae\x54\x54\x5c\x83\x14\xd7\xca\xee\xe6\x94\x4d\x27\x79\xc5\x53\x08\xa4\x09\xfe\xf1\x9d\xb0\x0a\xe1\xa5\x31\x17\x84\x10\x50\xae\x7f\xfa\x31\x32\xde\x85\x0c\x5b\xf0\x3e\x12\xd9\xfa\xb3\xab\x56\xe6\xa1\x94\xb0\x9f\x80\xf1\x16\x67\xb3\xf8\x0d\xea\xe0\x91\xdd\x14\x81\xaf\x90\x61\xaa\x9d\x4e\xf0\x38\x84\x5c\x8a\xc2\x40\x7d\x4a\x66\xac\xe5\x93\x1f\x3a\x33\x34\x37\xbe\xe0\x41\x62\x42\x68\xfd\x79\x5e\x0f\x45\xe4\x70\x30\xc2\xc6\x7d\x8c\xe3\x8f\x6c\xd8\xff\x1e\x4c\x92\xe7\x98\x6a\xcc\x36\x87\xe7\x11\x57\x28\x75\x70\x6b\x2d\xe3\x60\x49\x70\x43\x2a\x40\xa2\xaa\x98\xb6\xd2\x31\xfc\x87\x73\x4c\x03\x9f\x5a\xaf\x26\x4b\x62\x05\xee\xa0\xae\x3f\x08\xca\x21\x7e\x29\x58\x55\x70\x23\x54\xe0\x47\xe0\x1b\x4f\x1f\x2d\x3d\x83\xba\x9e\x55\x94\x65\x96\xac\x3f\x0b\x96\x2d\x6d\x6e\x9a\xd0\xef\x2b\x76\x49\x1e\x7d\x2e\xc8\x87\x4b\x41\xc5\x75\x9d\x53\x9e\xfd\x46\x4a\x88\xfb\xa5\xd7\x14\x99\x11\x35\x4d\x5b\xf2\xe1\x74\xf2\x29\x2d\xc6\x9c\xb0\xd9\x34\x7c\xe8\x64\x0e\x94\xf8\x9d\xb8\x56\xcf\xdb\x54\x06\xe1\xff\x93\x18\x7f\x94\x19\xd1\xf8\x62\xf1\x56\xd2\x82\xc8\xc5\xaf\xb8\x08\xca\xfe\xab\xed\xba\xfd\xaf\xd3\x45\x89\x5f\x80\x77\x0b\x1c\xaa\xec\x01\x57\xe8\x03\x0a\x35\xac\xa5\x50\x72\x60\x49\x94\x1c\xc0\xf5\x25\x4a\x5c\x8e\x60\xd8\xd9\x34\x90\xc0\xc1\xd7\x62\x50\x34\x40\xea\xda\x0c\xac\x6b\x33\xe0\xb0\x58\x62\x95\x11\x35\x1d\x4a\xbb\xc6\xad\x57\xc8\xf0\x4e\xdc\xba\x17\x41\x32\xeb\x65\x5d\x4f\xbf\x15\x05\x22\xb8\x4f\x72\x60\x73\xd9\x31\x3e\x3e\x97\x9e\x59\xa5\x81\x0b\x90\x98\x0a\x99\xad\x2a\xd9\x14\xad\x51\xba\x24\x6a\x45\xc3\xcc\x46\x1b\xc9\xea\x7b\x7b\x99\xde\x2d\xab\xab\x9d\x20\x1a\xf2\xeb\xdd\xbe\x9f\xec\x27\xc0\xf1\x3a\x58\xed\x2a\xd3\xc9\xba\xcb\xff\xd6\x66\x87\xf9\xe0\xe6\x3b\x69\x53\xec\xea\xee\x91\x24\x01\x75\xc5\xe2\x43\x29\x4f\x84\xe1\xca\x1a\x92\x71\xca\x22\x97\xab\x11\xcb\xbe\xc4\x4c\xab\x74\x03\x35\xef\x00\xc8\x17\xc7\x18\x2c\x4a\xbd\x00\xc5\x68\x8a\x77\xe7\xee\xaa\xf2\x7f\xc8\xe1\x76\xbe\x0e\xb0\x9d\xb3\x57\x79\xda\xae\x87\x10\x9c\x9d\x7f\xc2\xe1\x95\x26\x65\xa6\x52\x46\x95\x86\x4f\xb7\xba\x0d\x5e\xda\x8d\xee\xfb\x09\xb4\x1e\xe3\x6e\x9c\x6f\xb7\x18\x23\xa5\x99\xdb\x15\x9c\x9d\x2f\xcd\xed\xfd\x72\x2a\x78\x46\x35\x15\x1c\x12\xf0\xdb\xc7\x89\xe1\x15\x43\x1e\x74\x1e\x42\x78\x06\xdf\x77\x07\xf3\xac\x5a\xde\x3e\x10\x94\x7b\x38\xd8\x37\x82\x5b\xcd\x85\x84\xbf\x22\x40\x5b\x41\xf6\x3a\xec\x0f\xda\x5b\xf0\x06\xf5\x04\x48\x59\x22\xcf\x82\x5e\x14\x01\xc6\xdd\xfb\x23\xec\x35\x68\x0e\x0f\x30\xee\x1e\x1b\x83\x25\xf3\xd1\x86\xd8\x9b\x72\xbf\x8d\x1d\xfb\x68\x19\x8c\x74\x81\x0f\x5f\x86\xf0\x9f\x24\xe0\xbb\x1a\xf4\xe1\x49\xfb\xee\x51\xf1\xa9\xa4\xc5\x31\xe6\x3a\xe8\x04\xbf\x08\xca\xc7\x67\xf5\xc1\x0f\x23\xf0\x09\xcf\xfc\xce\x4f\x33\x14\xd2\x55\x85\x72\x11\x01\x91\x17\xaa\xbf\x6f\xec\x3b\xed\x88\x07\xf7\xec\x13\xfe\x93\xfe\xcc\x51\x1b\x79\x1c\xc7\xe1\xe0\xf3\xc6\xaa\x1e\x55\xaf\x61\xd6\x30\x12\x8c\xaa\xdb\x1b\x6f\xe8\x3b\xa0\x23\x78\xf0\xc8\x49\x47\x41\x39\xcf\xb6\xb6\xfb\xe1\x67\x34\xb5\x28\x43\x56\x57\x58\x38\x37\xe5\xf0\x70\x7d\x3d\x3c\xe7\x59\x5d\xc7\x56\xc5\xad\x1c\xa9\x93\x8a\xb1\x20\xbc\x51\xc7\xf6\x7a\x9c\xf7\x84\x1f\x92\x3f\x12\x46\xb0\xa9\x37\x6d\xdd\x29\xef\xdb\x54\x9b\x9c\x2c\x35\x67\xaa\x80\x57\x8c\xf9\x11\xb4\xaa\xfb\x5a\x56\x68\x2f\x93\xae\x4d\xcd\x5b\x9c\xee\x09\x87\xd0\xbb\x87\x88\xd0\x5b\x45\xe5\xf0\xaa\x22\xec\x54\xb8\x72\x87\x6e\xad\x9b\x12\x76\x04\x27\x77\xad\x5b\x73\xfb\xae\x9c\x37\x86\xcf\x89\xd0\xdf\x04\x44\x4f\x9f\x6d\x0f\xa3\x37\x12\x89\xb9\xe0\x2f\x09\xdf\x6d\x90\xbe\x0e\x46\xbf\xcb\x6f\x82\x51\xcf\x6e\x55\x75\xf7\xc1\xea\x18\x95\xda\x7d\x32\x3d\xdd\x1e\x99\x3a\x80\xbe\x11\x26\x3d\xdd\x62\xff\x3e\xea\x58\x74\x76\xbe\xa3\xe8\x50\x0e\xc1\x41\xb8\x9d\x4a\x3b\x11\x7a\xf7\x01\x32\x23\xd2\x6d\x41\xea\xff\x65\x64\xfe\xfe\x09\x00\x00\xff\xff\xf7\x5c\x07\xdd\xc9\x1a\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 6857, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0x38, 0x5e, 0xf5, 0x3f, 0x6b, 0xee, 0x83, 0x6a, 0x77, 0xd2, 0xda, 0x6d, 0x97, 0x40, 0xba, 0x73, 0x98, 0xc8, 0x62, 0x5f, 0xda, 0x5f, 0x1d, 0x5f, 0xfe, 0x2e, 0x2f, 0x14, 0x5a, 0x21, 0xbc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model.gotemplate": modelGotemplate,
	"new.gotemplate":   newGotemplate,
	"repo.gotemplate":  repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"model.gotemplate": {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":   {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":  {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
