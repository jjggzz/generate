// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/model.gotemplate (495B)
// repository/new.gotemplate (997B)
// repository/repo.gotemplate (881B)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\x03\x41\x10\x86\x6b\x0f\xee\x1d\x86\xc3\x22\x69\x76\xfb\xeb\x44\x0c\x68\xa1\x16\xe9\x24\x90\xf5\xb2\x1e\x67\xb2\xb3\xc7\xde\x1e\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xd2\x28\x88\x58\xf9\x3c\x89\xfa\x16\xb2\xbb\x49\xd4\xeb\x66\xe6\x9f\x6f\x66\xfe\xa9\x45\x31\x15\xa5\x04\x22\x76\x1a\xc3\x63\xa1\xa4\x73\x69\x92\x26\x95\xaa\xb5\xb1\xd0\x4b\x13\x00\x00\x22\x23\xb0\x94\xc0\x0e\xd0\x56\x76\x7e\x18\x44\xe7\x32\x22\xe6\x5c\xb6\xe9\x91\x38\xf1\x70\xdf\xf3\x1d\xa2\xf1\x02\xe7\xf0\xf5\xb4\x58\xde\xdf\xe5\x44\x6c\x28\xce\x67\xdb\x7d\x9c\x43\xa1\x95\x92\x68\xbd\x14\x91\x3d\x44\x6d\x85\xad\x34\xfa\x0e\x3b\xaf\xfd\xa1\x9b\x79\x11\x84\xc6\x9a\xb6\xb0\x40\x69\xb2\xd3\x59\x38\xa8\xe4\x6c\xd2\x38\x47\xc4\x42\xb8\x06\x36\xe9\x70\x5e\xfb\x74\x4c\xb4\xcb\x06\x46\x28\x79\xa5\xcd\x34\xf6\xe4\xde\xd5\x89\x51\x43\x51\x3a\x97\xc1\x65\xa3\x31\x94\x8e\x1a\x8d\xb1\x36\x06\xce\x61\xf9\xfc\xb0\x7a\x79\xcf\xe1\x8c\x88\xed\xeb\x59\xab\x30\xe2\x23\xf8\x7c\xfd\x58\x3e\xde\xe6\xbf\x42\x5c\x36\x82\xd5\xdb\xe2\xfb\xfa\x26\x22\xe1\x8a\xbf\x16\x47\xc1\xc3\xfa\x85\x2e\x4d\x2e\x5a\x2c\xa0\xd7\x75\xdc\x87\xed\xdf\x7a\x7d\x6f\xbf\xc2\x32\xd8\x37\xd2\xb6\x06\x21\xfb\xff\xd9\x2c\x8c\x5a\x8f\xfd\x09\x00\x00\xff\xff\x9b\xbe\xd9\x88\xef\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 495, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0xf5, 0x63, 0xcc, 0xa2, 0x75, 0x10, 0x44, 0xf7, 0x24, 0xe8, 0x1a, 0xb9, 0x94, 0x7b, 0x23, 0x35, 0xb8, 0x50, 0x4d, 0xc5, 0x29, 0x5d, 0xcc, 0xbf, 0xfc, 0xa2, 0x2f, 0x5a, 0xcc, 0x43, 0x9d}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x41\xaf\x9b\x30\x0c\xbe\x3f\xe9\xfd\x07\xab\x87\x09\x9e\x9e\xe0\xde\x63\xd5\x55\x9a\x56\x55\xd5\xda\x9d\xa7\x00\x2e\xcd\x5a\x12\xea\x18\x55\x59\xc4\x7f\x9f\x52\x58\xc9\x18\x68\x5b\x2e\xd8\xf8\xfb\x6c\x7f\x5f\x94\x5a\xe4\x17\x51\x22\x38\x97\xec\xbb\x70\x27\x2a\x6c\xdb\xd7\x97\xd7\x17\xe7\xe4\x09\xf0\x06\xc9\x86\x44\x85\x77\x4d\x17\x5f\x83\x45\xa9\xa9\x5a\x80\xc7\x00\x00\xc8\xaa\xd6\xc4\x10\x75\x99\x3f\x8b\x52\xf2\xb9\xc9\x92\x5c\x57\xe9\x77\xa9\x7e\x9c\x9b\xf4\x41\x19\x10\xdf\xe6\x30\x69\x21\xc5\x15\x73\x36\x69\x65\xcd\xed\xda\x53\x62\xbf\x8d\x0f\x4e\x8d\xca\x61\x87\xf7\x2f\x58\xeb\xa8\xc8\xe0\xcd\x73\x92\xf5\x2a\x06\xff\xc7\x48\xd6\x64\xc1\x0d\x73\x08\xb9\x21\x15\x14\x83\x9a\x3f\xce\x91\x50\x25\x42\xf2\x51\xb1\x64\x6b\xda\xd6\x1b\xd1\x25\x9d\x0f\x9e\xba\xf4\x23\x27\xfe\x47\x45\x16\xbf\x8f\x1b\xa2\x2a\x7e\x39\xe3\x4f\x1f\xf6\x9f\x3f\xe7\xfd\xae\x6b\x7a\x48\x20\x73\x02\x30\xab\xfa\x83\x73\x07\xa6\x8d\x24\xc3\x5b\x64\x46\x3a\xea\xad\xbe\x23\xe5\xc2\x3c\x37\x18\xda\xc0\xc8\x9a\x22\x5b\x16\xd9\xfb\xbc\x90\x5e\x67\x97\xb2\xad\x31\xbc\x02\xc3\xd4\xe4\x1c\xb6\xfc\x37\xa7\xe7\xf5\x85\x9d\x02\x8b\x9f\x1b\xcc\x39\xfb\xd8\x6c\xde\x35\xa9\x18\xe9\x24\x72\x0c\x77\xfd\xa4\x0c\x12\x47\x6f\x23\x5a\x0c\x48\xa4\x69\xc0\x7d\xad\x0b\xc1\xf8\x77\xdc\x1a\xaf\xc8\xb8\xb2\x7b\x92\x95\x20\xfb\x19\x6d\xe4\x9f\xdb\x33\x3b\xda\x7a\x8a\x76\x40\xff\x12\xfe\x8b\x36\xbe\x9d\x3e\xf8\x19\x00\x00\xff\xff\x6f\x13\x8e\x56\xe5\x03\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 997, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0x32, 0xd8, 0xc4, 0xa, 0x42, 0x10, 0xa, 0xe1, 0x24, 0xd9, 0xa0, 0xdf, 0x27, 0xfd, 0xce, 0xef, 0x3e, 0x5, 0xc1, 0x6e, 0x43, 0x46, 0xb2, 0xa0, 0x4, 0xda, 0xb3, 0xb9, 0x3a, 0x65, 0xf4}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\xdb\x6a\x02\x31\x10\x86\xef\x05\xdf\x61\xf0\x6a\x77\x2f\xd6\x77\x10\x2b\x94\x4a\x91\x6a\x1f\x20\x66\xc7\x35\x75\x73\xe8\xec\x04\x49\xc3\xbe\x7b\x49\x53\xb5\x87\x8b\x52\x5a\xf0\xbf\xc9\x0c\xff\x1c\xbe\xc0\x38\x21\x0f\xa2\x45\x88\xb1\x5e\xe5\xf0\x5e\x68\x1c\x86\xf1\x68\x3c\x8a\x51\xed\x00\x9f\xa1\x5e\x90\xd0\x78\xb4\x74\x48\x1e\x4c\x5a\x4b\x7a\x02\xa9\x06\x00\x40\x69\x67\x89\xa1\xc8\x59\xd2\xa4\x55\xbc\xf7\xdb\x5a\x5a\x3d\x7d\x52\xe6\x65\xef\xa7\x6f\x2d\xb9\xa2\xcc\x4f\x8c\x24\x4c\x8b\x50\xdf\x18\x56\x1c\xfa\xd3\xb8\x24\x0e\x2e\x11\xad\x99\x16\x8a\x7a\x5e\x22\x33\xd2\xc6\x2e\xed\x11\x49\x8a\xfe\xdc\x94\x51\x1f\xd0\x59\xe8\x99\xbc\x64\x88\x97\x21\x49\xcd\x16\xaa\xb4\xba\x9e\xcf\x2e\xc6\x70\x02\x40\xd3\xe4\x8f\xfe\xc4\xb3\xf3\x46\x42\x41\x69\x4f\xf5\x2b\xac\x12\x6e\x4d\x8f\xc4\x45\x15\xe3\x27\xb3\x04\x24\xb2\xf4\x95\x97\x90\x3d\x19\x30\xaa\xfb\x86\xfb\x47\x8e\x47\xd7\x08\xc6\xeb\x73\xcc\xb1\x43\xc6\x59\x58\x91\xd2\x82\xc2\x1d\x86\x22\x9d\xde\x39\xdb\x04\x77\x0d\xac\x35\x76\x28\xf9\xff\xb1\x3e\x1c\xd9\x7b\xf8\x1a\x00\x00\xff\xff\x27\x06\xbe\x3f\x71\x03\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 881, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0x77, 0x31, 0x25, 0xcf, 0x4b, 0xaa, 0x6c, 0x7e, 0xac, 0x30, 0xd8, 0xb4, 0x1, 0x2a, 0xd0, 0xc, 0x3e, 0xb3, 0xb3, 0x89, 0xc4, 0x3b, 0xba, 0x48, 0x6d, 0xfd, 0xfd, 0x57, 0x37, 0x8, 0x2f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model.gotemplate": modelGotemplate,
	"new.gotemplate":   newGotemplate,
	"repo.gotemplate":  repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"model.gotemplate": {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":   {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":  {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
