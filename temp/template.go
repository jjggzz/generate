// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/model.gotemplate (407B)
// repository/new.gotemplate (845B)
// repository/repo.gotemplate (972B)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xc4\x40\x10\x86\x6b\x03\x79\x87\x21\x95\x36\xd9\x3e\x9d\x88\x82\x16\x62\x91\x4e\x02\xb7\x97\x2c\x21\x9a\xcc\x86\x64\xaf\x08\xc3\xd4\x82\x22\xd8\xd9\x09\x76\xd7\x28\x88\x58\xf9\x3c\x39\xf5\x2d\x64\x77\x2f\x7a\xa4\x9b\xdd\xff\xff\xe6\x9f\x99\x56\xe6\xd7\xb2\x54\x40\x14\x5f\xf8\xf2\x5c\x36\x8a\x39\x0c\xc2\xa0\x6a\x5a\xdd\x19\xd8\x0f\x03\x00\x00\xa2\x4e\x62\xa9\x20\x3e\x46\x53\x99\xe1\xd4\x89\xcc\x11\x51\xcc\x1c\x4d\x1e\x85\x85\x85\x0f\x2c\x3f\x23\x7a\x2b\x08\x01\xdf\xcf\xeb\xf1\xe1\x3e\x21\x8a\x53\xb9\xac\xff\xf2\x84\x80\x5c\x37\x8d\x42\x63\x25\x8f\x1c\x22\x6a\x23\x4d\xa5\xd1\x3a\xcc\xd0\xda\x41\xa7\x7e\x1e\x84\xde\x74\xab\xdc\x00\x85\xc1\xde\x2c\xf0\xa4\x52\x75\xd1\x33\x13\xc5\xae\xdc\x02\xd3\x33\x1d\x5a\xfb\x5c\x14\xcb\xc4\x2e\x71\xa4\xeb\x55\x83\xde\x13\xc1\x55\xaf\xd1\x7d\x9f\xf5\x1a\x53\x59\x32\x47\x0b\x10\x02\xc6\x97\xc7\xcd\xeb\x47\x02\x97\x33\x22\x83\xaf\xb7\xcf\xf1\xe9\x2e\xf9\x17\x7c\xff\x0c\x36\xef\xeb\x9f\x9b\x5b\x8f\xb8\xe0\xdd\xad\x32\x37\xf6\xf6\x6a\x6c\x6f\xe6\xea\xdf\x00\x00\x00\xff\xff\xff\x2d\x91\x7b\x97\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 407, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0xf4, 0xaf, 0x96, 0xdb, 0x87, 0xeb, 0x34, 0x27, 0x29, 0x73, 0x6a, 0x21, 0x26, 0x45, 0xdd, 0x43, 0xec, 0x42, 0xf7, 0x71, 0xe8, 0x2b, 0xa0, 0x41, 0xbb, 0x3c, 0x13, 0xf2, 0xf5, 0xa2, 0xb0}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x6f\xaa\x40\x10\xc6\xcf\x92\xf0\x3f\x6c\x3c\xbc\x80\x51\xbc\x7b\x34\xbe\x97\xbc\xd4\x18\x53\xed\xb9\x59\x60\xa4\xdb\xc2\x2e\xce\x0e\xb5\x1b\xc2\xff\xde\xac\xa0\x6e\x15\xdb\xde\x98\x61\xe6\xfb\x7e\xdf\x40\xc9\x93\x37\x9e\x01\xab\xeb\x68\xdd\x3e\xae\x78\x01\x4d\xe3\x7b\xbe\x27\x8a\x52\x21\xb1\xc0\xf7\x06\xcf\x6c\x98\x09\x7a\xa9\xe2\x28\x51\xc5\x34\x53\x13\xbd\xcf\x27\x29\x8a\x77\xc0\x69\x61\xf4\x3e\x1f\xfa\xde\xc0\x1d\x79\x2d\x94\x40\x25\xa7\x7a\x9f\x7f\x0c\x7d\x2f\xb4\x7a\x64\x4a\x60\x8f\x50\x2a\x2d\x48\xa1\x61\x9a\xb0\x4a\x88\xd5\xbe\xc7\x18\x63\x75\x8d\x5c\x66\xc0\xa2\xbf\x92\x04\x19\xdd\x34\x16\xaa\x2d\x5a\x26\xbb\xda\xd7\x6b\xe5\x4e\x2a\x20\x53\x8b\x7f\x4c\xb0\xab\x64\xc2\x56\x70\xb0\x53\x41\x1a\xb3\x91\xc5\x89\x16\xf3\xd0\xc5\xe8\xfc\x11\xa8\x42\xe9\xbc\xe8\xfa\xbf\x67\x9b\x59\xab\x9e\x7e\x90\xc6\xe1\xd8\x15\xeb\x10\x6d\xd1\x92\xde\xea\x5f\xd8\xfb\x05\x9d\x28\x77\x2f\x72\x95\xec\x4f\x5d\x6f\x08\xff\x09\xd4\xb4\x04\x22\xc0\xad\x5a\xaa\x03\x60\xc2\xf5\xd9\xd9\x3d\xf4\x85\x38\x8d\x67\x69\x3c\xfe\x0a\xdc\x65\xe8\x67\x3f\x7e\xe9\xfb\x5c\x42\x12\xe0\x8e\x27\x70\x32\xf9\x2f\x35\x20\x05\xa3\xab\x95\x90\x01\xa2\xc2\x76\xe6\xa9\x4c\x39\xc1\xf7\x33\x0b\xc8\x81\x60\x6e\xd6\x28\x0a\x8e\xe6\x01\x4c\x60\x7f\xec\x73\xb5\x35\xe5\xf5\xca\x06\x72\x48\xe8\xe7\x95\x1b\xe3\xf1\x51\x24\x74\xcf\xf1\x19\x00\x00\xff\xff\x67\xa0\xef\x53\x4d\x03\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 845, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x38, 0x20, 0x67, 0xd5, 0xc6, 0xe2, 0x97, 0x8f, 0x3b, 0x0, 0xe3, 0x3f, 0xd7, 0x51, 0xaa, 0x62, 0x19, 0x22, 0xfd, 0x66, 0xd8, 0x44, 0x6b, 0xf8, 0x4a, 0x34, 0xe7, 0x86, 0x2f, 0xc7, 0xc3}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\xd1\x4a\xc3\x30\x14\x86\xaf\x2d\xf4\x1d\x0e\xbd\x6a\xc7\xe8\x9e\xc0\x9b\x39\x05\x71\xc8\x70\xf3\x01\xb2\xec\x38\x33\xd3\x24\x3b\x39\x45\x4b\xe8\xbb\x4b\x16\x28\x53\x14\x2c\x82\xd8\xde\x9c\x1c\x72\xfe\xff\xcb\x4f\xe2\x84\x7c\x11\x7b\x84\x10\xea\x55\x2a\xef\x45\x83\x7d\x9f\x67\xf1\x57\x8d\xb3\xc4\x50\xe6\xd9\x45\xb1\x57\xfc\xdc\x6e\x6b\x69\x9b\xd9\xa1\xb1\x8a\xac\x99\xf9\xa3\x7e\x2b\xf2\xac\xca\xb3\x10\x48\x98\x3d\x42\x7d\x6d\x58\x71\xe7\xa3\x00\x00\x00\x77\x2e\x6a\xaf\x99\x6e\x14\x79\x5e\x22\x33\xd2\xc6\x2e\xed\x2b\x92\x14\x7e\x18\x48\xa6\x0f\xe8\x2c\x78\xa6\x56\x32\x84\x24\x10\xbf\xdd\x16\x26\xd1\xaa\x5e\xcc\x53\xb3\x8f\x86\x68\x76\x09\xf3\x3b\x6f\x69\x8d\xe7\x31\xe6\xbe\xd5\xbc\x3e\x6a\xb8\x84\x22\x84\x83\x55\x06\xea\x2b\xab\xdb\xc6\xc4\x0d\x1e\x8a\x29\x14\x7d\x5f\x24\xf1\xa7\xd6\x48\x28\x29\x02\x4f\x46\x9d\xaf\x82\x5b\xe3\x91\xb8\xfc\xf1\x54\x34\xf8\xd0\xa8\x00\x89\x2c\x9d\x47\x44\xc8\x2d\x19\x30\x4a\x0f\x09\xfd\x92\xf2\xd1\xed\x04\xe3\x7f\xa7\x5c\xa0\x46\xc6\x79\xb7\x22\xd5\x08\xea\xee\xb0\x2b\xdd\x50\x9e\x2e\xf5\xb0\xda\x74\xee\xaf\xa8\xd6\xa8\x51\xf2\x28\xaa\xf2\x73\x7c\xd3\x13\x67\xf5\x35\xe8\xf4\x1c\x76\x78\x0a\xef\x01\x00\x00\xff\xff\xa3\x26\xa1\xe1\xcc\x03\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 972, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xb2, 0xb0, 0xe5, 0x40, 0xd0, 0x6a, 0x57, 0xd5, 0x94, 0x17, 0x1d, 0x6e, 0xa1, 0x9b, 0x80, 0xda, 0x7d, 0x6b, 0xfa, 0xd4, 0x16, 0x32, 0xd2, 0x3a, 0x60, 0xea, 0xc7, 0x27, 0x2e, 0x7d, 0xcd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model.gotemplate": modelGotemplate,
	"new.gotemplate":   newGotemplate,
	"repo.gotemplate":  repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"model.gotemplate": {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":   {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":  {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
