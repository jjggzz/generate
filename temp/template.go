// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/repository.gotemplate (19.531kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _repositoryGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xcd\x6f\xe3\xc6\x15\x3f\xd3\x80\xff\x87\x17\x22\x58\x50\xbb\x2c\xdd\x35\x8a\x1e\x84\xd5\x1a\xfb\xe1\xa4\x6e\x1d\x6f\x90\xa8\xbd\x2c\x8c\x86\x12\x9f\xbc\xcc\x52\x33\xf2\x70\x18\x53\x20\x74\x2e\xd0\xa2\x40\x6f\xbd\x15\xe8\x2d\x97\x16\x28\x8a\x9e\xfa\xf7\x6c\xda\xfe\x17\xc5\x7c\x90\x22\x29\x52\x26\x65\xc9\x71\x22\xfa\xb0\x2b\xce\xc7\x9b\x99\xdf\xfb\xbd\x8f\x79\x12\x8f\x8e\xe0\x15\xf5\x10\xae\x90\x20\x73\x39\x7a\x30\x9a\x43\x78\x1d\xc4\x57\x48\x1c\x78\xfd\x06\x2e\xde\x0c\xe1\xf4\xf5\xd9\xd0\x39\x3c\x98\xb9\xe3\xf7\xee\x15\x42\x92\x38\x9f\xab\x8f\x17\xee\x14\x17\x8b\xc3\x83\xc3\x03\x7f\x3a\xa3\x8c\x83\x75\x78\x00\x00\x90\x24\xcc\x25\x57\x08\xce\x99\x6c\x0e\x17\x8b\x24\x71\xc4\x40\xd5\x89\xc4\x13\x0f\x3d\x31\xf1\xe8\x08\xfe\xfb\xd7\x6f\x3f\xfc\xe9\x8f\xfd\x24\x71\x86\xee\x28\xc8\x84\x1e\x1d\xc1\x98\x4e\xa7\x48\xb8\xe8\x3a\x25\xdc\xe7\xf3\x17\x84\x50\xee\x72\x9f\x12\x31\x82\xcf\x67\x62\x37\xa0\x3b\xd5\x44\x08\x39\x8b\xc6\x1c\x92\xc3\x03\x23\xdb\x87\x1a\xf0\x89\x8f\x81\xa7\x36\x23\x3f\xea\x09\xe9\xe3\x70\x3e\x13\x8f\x5f\x79\xa3\xbe\x99\x24\xce\x2b\x1a\x44\x53\xa2\xc6\x98\xf0\x75\x48\x89\x68\xfe\x92\xb3\x4f\x7c\x16\xf2\x73\xe4\x1c\xd9\x90\x9e\xd3\x1b\x64\x63\x37\x44\xc8\xcb\xb4\xe9\xd4\xe7\x38\x9d\xf1\xb9\xf9\x15\x1c\x1d\xc1\x87\xbf\xfd\xf9\xbb\xbf\xff\xab\x0f\x6f\x4b\x72\x2f\xe1\x3f\xff\xf8\xf7\x87\xbf\xfc\xa1\xbf\xec\x50\xbb\xb8\x84\xef\xfe\xf9\xed\xff\x7e\xf7\x7b\x35\x45\x4a\xce\x9f\xfd\x52\x1e\x4e\xe3\x28\x15\x30\x89\xc8\x18\x2e\xf0\x26\x83\x4a\x2d\xf0\x05\xce\xa8\xd5\x83\x8a\xd6\xd0\xe7\x94\xcd\x05\x4c\x42\x29\x0c\x79\xc4\x08\x3c\x5a\x7b\xc0\xb2\x08\x48\xd2\xd5\xb5\x26\xea\x16\xf1\x09\x47\x36\x71\xc7\x98\x2e\xf7\x8a\x46\x84\x5b\x8f\x05\xd1\x9c\xd7\x2f\x7b\x60\xf9\x84\xff\xfc\x67\x36\x20\x63\x94\xf5\xd4\x98\x33\x12\x22\x5b\x0e\xb2\xe1\x71\x69\x81\xea\x69\xbf\x9e\x79\x2e\xc7\x97\xf3\xd3\xd8\x9d\xce\x02\x5c\x33\x5f\x8f\xb0\x9b\xc9\x7d\x8d\x01\xb6\x92\x5b\x2d\xe6\x4b\x0c\x70\xcc\xdb\x89\x79\x7b\x59\xee\x4b\x65\x26\x89\x3f\x01\x97\x78\x60\x11\x04\xe7\x73\xe6\x4f\x5d\x36\xff\x15\xce\x05\x89\xc0\x34\x7b\xe5\x76\x31\x5b\xb6\x0b\xde\x18\x29\x54\xcb\xfe\xdc\x76\x84\x95\x17\xe4\x89\x55\xdb\x41\xd5\x54\xee\x7a\xa4\x5a\x48\xa9\x83\x29\x6f\x2d\xc6\x30\xce\xb3\x6f\x18\x57\xaf\x3e\x8c\x0b\xfc\x1b\xc6\x4d\x0f\x3f\x8c\xab\x19\x58\x25\xa1\x1d\x03\x87\x71\x35\x07\xd7\x48\xae\x13\x54\xcd\xc2\xf5\x82\x76\xc5\xc2\x25\x60\x2b\x9a\x16\x1b\xba\x03\x0f\x97\x80\x35\x95\x7c\x1b\x5e\x2d\xe4\x34\xe1\x62\xde\x77\xb6\xf1\xbb\x69\x88\x5b\xe8\x08\x8a\x31\x8e\x23\x8e\x30\x71\xfd\x20\x75\xe5\x3f\x79\x2a\x55\x82\x8c\x15\x86\x84\xd1\x78\x8c\x61\x98\x8e\x1a\x0b\x53\x00\x46\x6f\x42\x39\x9a\xf8\x81\x0e\x25\x16\x13\x0b\x3d\x6e\xb5\xaf\x9e\xf6\xeb\xde\x08\xea\x5c\xbb\x0e\x00\xdf\xb8\x4c\x2f\x2d\x7b\x65\x9b\x81\x8c\x41\x7f\x00\xde\xc8\xf9\x14\xb9\xf5\x48\xf6\xdb\x60\x86\x12\x7b\x35\xdc\x7a\xdc\x83\x09\xa3\x53\x28\x26\x0b\xa6\x52\x94\xe1\x4f\xc4\x32\xf0\xd1\x40\x1c\x44\x2f\x65\x18\x19\x20\xb6\x42\x43\x34\xaa\x5c\xc4\xc8\xa3\x60\xcb\xc3\xdf\x1d\x52\x77\x32\xc1\xb1\xc8\xa4\xb6\x86\xaa\xf6\x44\x39\x58\xed\xe6\x84\xb9\xd5\x56\x96\x29\x40\x18\x05\x5c\xb6\x6a\x35\x9c\xc6\x38\xb6\x4c\x5f\xae\x2e\x14\x45\x4b\xb0\x5b\x49\xf2\x35\xf5\x09\xe4\x52\x9a\x10\x4c\x1b\x4c\xb1\xc8\x37\x6e\x10\x21\x58\x49\x32\x8a\xfc\xc0\xfb\x8d\x78\xfa\x05\x0d\xbc\xc2\xe0\xc5\xa2\x67\x66\x39\x5a\xa1\xdd\x5e\x77\xbe\x8f\x0b\xe7\x71\x92\x64\xe2\x13\xef\x33\x77\x06\x4e\xd6\x25\x33\xa6\xcf\xdc\x99\x48\xf6\xa4\xb1\x09\xbb\x5b\xa1\x47\x9e\x1b\x52\xab\x82\x17\x69\x9b\xc2\xc3\xf9\x82\xde\x84\x2f\xb4\x4a\xad\x9e\x26\xc8\x9d\x3c\xde\x03\x63\x57\x85\xf7\x2d\x30\x6d\x96\xb5\x57\xfa\xe2\xfb\x23\x62\x24\x37\x5a\xe2\x20\x84\xc8\xa1\x92\x87\x83\x13\xc9\xc4\xc1\x09\xdc\xbc\x43\x86\xc5\xcd\xe7\x93\x70\x18\xc0\xc9\x7d\xd1\xd0\x5e\xa2\xa9\x83\x4b\x95\xcf\x82\x5c\x4a\x9e\x52\x53\x34\x2d\x0a\xc9\xfa\x3a\x82\x3e\x30\x8e\x55\xc4\xe1\x16\x1c\x6b\x4b\x14\x4f\xae\x56\x15\x28\x1a\x51\x21\xbf\x9d\xe6\x4a\x82\xed\x69\x49\xac\xb1\x4e\x4d\xa3\x88\x03\xa1\xc0\x70\x4c\x99\x57\x9e\x24\x55\x55\x31\xe9\x9d\x1b\x96\x66\x78\x2e\x77\xb7\xa2\xdd\x8a\xec\xa8\x9d\x76\x57\x72\xa5\xa5\x9e\x8d\xe6\xfe\xa5\x3f\x00\x82\x37\x56\xd9\xcb\x1c\x1e\x94\x32\x8b\xc6\x12\x97\xc9\x47\x7d\xa0\xdb\x16\xcb\xd2\xe0\x34\x18\x40\x78\x1d\x38\xa7\x8c\x5d\x50\xc1\x99\x0a\xb2\x11\x3f\xb0\x95\xce\x72\x6c\xbb\x8d\xa1\x72\x52\x0d\x45\x5b\x00\x92\xe6\x48\x59\x0a\xfb\xe0\x5c\x4d\xf9\xf6\x55\x60\x22\xaa\xc6\xda\x8b\xd8\xf6\x83\xd9\x98\xf9\x1c\x99\xef\x0a\xfe\xe9\xd5\x9d\xb4\x4d\x8d\x10\xb9\xf0\xcc\x65\xee\x34\x84\xb7\x97\x59\xa5\x44\xe5\xf6\x85\x62\x5a\x21\x32\xe9\x19\x03\x70\x67\x33\x24\x9e\xa5\x9e\xb7\x17\xaf\x7a\xa5\x62\x1d\x64\x59\x3b\xf1\x7c\xee\x53\x02\x03\x30\xcd\x8c\x7b\x01\x12\x2b\x3d\x56\x0f\x9e\xc3\x4f\xf3\x14\x14\xf3\x26\xcc\xbd\x9a\x22\xe1\xe2\x90\x21\x67\x3e\xb9\x5a\xf6\x4f\x28\x83\xdf\xda\x80\x02\x23\x75\xd6\x0c\xb5\x9c\x14\x39\x32\x93\x92\x1d\x3c\x6b\xb2\x01\x9d\xf4\xa1\x57\x9c\xe6\x4f\xe0\x23\x74\x08\x95\x59\x68\x59\xa6\xf8\xab\x41\x13\xd0\x91\x9f\x9e\x96\xe4\x2d\x56\xc4\xa3\x33\x42\x7e\x83\x48\x36\x5d\xe2\xb8\x7e\x89\xdc\xc7\x25\xfa\x4f\x06\x60\x2a\x37\x63\xc2\x13\x50\x88\x86\xce\x90\xf9\xd3\x73\x9c\x70\x2b\x6d\xf8\x25\xf5\x49\x1e\x22\x13\xcc\x9e\x0d\xa6\x4b\x3c\x7d\x67\x4a\xa5\x5f\x47\xc8\xe6\x36\xb8\xec\x2a\xcc\x02\xaa\x34\x9b\x33\x72\x87\xcc\xcb\x7c\x92\xed\xd8\xd6\x08\x38\x8e\x73\xa7\xa0\x5a\x19\xf2\x73\xbb\xbf\xab\xfc\x1f\x6a\x6a\xb5\x89\xbf\xab\x72\x5a\xc6\x7a\x8f\x65\xd4\xbb\x2b\xa3\xca\x3f\x18\x75\xce\xc1\x30\xea\xdc\x82\x61\xac\x77\x08\x86\x61\xb4\xf0\x03\x86\x61\xac\x98\xbf\x61\x18\x46\x03\x93\x37\x0c\x79\x1f\x94\x02\x56\x0d\xbc\x81\x90\xe3\x9c\x10\xf9\xcf\x96\xed\x57\x0a\x5d\x6b\xb9\x6b\x52\xe1\x5a\xdb\x5c\x7f\x4f\x86\xfc\x45\xb9\x99\x31\xb6\x10\x78\xab\xf5\xd5\xda\x9f\xfc\xb6\x05\xc2\xc0\x1f\x63\xfb\xe4\xb9\x3c\xf9\x7b\x4c\xa2\x37\xb4\xe3\xfa\xea\x6c\xea\xf9\x84\xb9\x05\x7e\xc8\x61\x75\xa8\x1a\x70\x8b\xe5\xcb\x21\xf5\xd6\x9f\x75\x57\x65\x08\xb5\x5e\x40\x76\xd6\x7a\x02\xd5\x7b\x7b\x7a\xd0\xce\x23\xe8\x19\xb7\x26\x05\x1b\x24\x06\x15\xc9\x41\xe3\x04\x61\x83\x24\xa1\x62\xb9\x54\x13\xdb\x76\x35\xb0\xac\x9a\xc2\xad\xf9\xc2\x66\xb7\xa6\xb5\xc9\xc2\xda\x80\x9e\x8b\xdc\x82\xe1\xcb\x82\x49\x1e\x91\xfc\x00\xe1\xab\x94\xc1\x59\x8f\x54\xc3\x8a\xd3\x7a\x70\xb5\xf5\xf4\x7b\x2b\x1e\x43\xdd\x57\x57\x0d\xaa\xeb\x3c\xee\xaa\xeb\x65\x5c\x75\x7d\x3d\x07\xec\x3d\xd4\xd7\x79\xdc\xd5\xd7\xf7\xa2\xbe\x5e\xf9\xfd\x66\x81\x6b\xdf\x77\x85\x3d\xa3\x62\x57\x61\xff\xc1\x5e\x03\x2b\xbf\xeb\x6e\xc1\xb2\xb6\x54\xe9\x6a\xec\xf7\x7b\x3d\xa8\xfc\x0d\x42\x3b\xfd\xde\x53\x95\x5d\x67\x18\x5d\x95\xfd\xc7\x5c\x65\x5f\xfd\x95\x53\x81\x8b\x5d\x9d\xbd\xab\xb3\x77\x75\xf6\x1f\x4f\x9d\x3d\x0d\xfb\x7b\x5c\x67\x5f\xfd\xf5\x65\x1b\x8f\xd7\x55\xda\xbb\x4a\xfb\xf6\x2a\xed\xb5\xe6\xd8\x55\xda\x5b\xa5\xd2\x1b\x5a\x72\x57\x6b\xef\x6a\xed\xd0\xd5\xda\x9b\xd6\xda\x79\xdc\xa8\xd6\x5e\xfd\x16\x91\xb6\xba\xfc\x5b\x5d\x19\x23\x25\x79\xd3\xd6\x8c\x95\x72\x23\xcb\x08\xa7\xb8\x93\x9e\xaa\x10\x45\x55\xdf\x71\x75\x5f\x4a\x56\xf9\x37\xa2\x34\x10\x8d\x05\x5e\xe9\xc6\xc2\x1b\x58\x16\xc6\xc2\x71\x7c\x5c\xed\x39\x5e\x05\xe8\x32\xab\x57\x3b\x42\x1e\x04\xe3\xcc\x11\xc0\xe0\xa1\x9c\x31\xc9\x05\x0d\x8c\xb3\x2a\x6d\xe5\xeb\x75\x8d\xa0\x78\x41\xbc\xe2\x6b\x78\x67\xe1\x45\x14\x04\xed\xc0\xd1\x96\x9b\x6b\xb4\xe1\x61\xc0\x95\xae\xdc\x97\x46\x0d\xa5\xd7\xfe\xc0\x0f\x81\x44\x41\x60\xda\xa0\x65\xf6\x39\x8b\x50\x56\x51\xca\x20\x6f\x88\x25\xe5\x7b\x06\x27\xe5\x3b\x85\xf4\xf4\x3a\x72\x83\x21\x55\x51\xa2\xf4\xca\xe8\x7e\x80\xac\xcb\x69\x72\x1f\x7d\xf5\xff\xd6\xd0\xbd\xa0\xbc\x03\xf8\xd9\xf3\x1d\x22\xfc\x29\x43\x57\xa4\xc6\xef\x5c\xb2\xc7\x10\xdf\x13\xc2\x6f\x58\xc7\xe6\xe7\xcd\xfc\xc5\x26\x48\x9f\x63\x18\xee\x39\x91\x9f\xed\x90\xc8\x29\xbc\x1d\x8b\x17\xf0\x6c\x97\x51\xef\x2c\x65\xf0\xdb\xcb\x7d\xc4\xd6\x27\x60\x9d\xf4\x76\x99\x53\xec\x39\xc0\x22\x27\xde\x31\xc8\x2f\xd5\xbe\x2c\x7d\xd8\x22\xca\x7a\xd1\xe3\xbd\xf4\x1c\x7a\x12\x9c\xc8\x9a\xe5\x8a\x13\x79\x6a\xab\x6d\xe8\xc7\x63\x3b\xbf\xc8\x76\xaf\x2e\x17\x94\x77\x6a\x5a\x67\x23\xbb\x51\x95\xfc\x0d\x1b\x5e\xc3\x12\x53\x30\xd5\xc9\xcd\x4d\x6b\x24\xe7\xfe\x7b\xdc\xe3\x60\x1c\xf8\xef\x71\x67\x49\xe5\x05\xe5\x7b\x0e\xaf\x30\x85\xc6\x10\xe7\x7e\x9a\xa2\x3f\xfe\x3f\x00\x00\xff\xff\x51\xdf\x69\x78\x4b\x4c\x00\x00")

func repositoryGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repositoryGotemplate,
		"repository.gotemplate",
	)
}

func repositoryGotemplate() (*asset, error) {
	bytes, err := repositoryGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repository.gotemplate", size: 19531, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0xd1, 0xce, 0x4b, 0x7e, 0xb6, 0xfe, 0x13, 0x11, 0xf4, 0xf5, 0x8f, 0xa1, 0xa6, 0x3f, 0x34, 0xc1, 0x11, 0x80, 0x6, 0x1a, 0xd9, 0x8c, 0xb0, 0xee, 0x23, 0xc7, 0x85, 0x6e, 0xaa, 0xdf, 0xad}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"repository.gotemplate": repositoryGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"repository.gotemplate": {repositoryGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
