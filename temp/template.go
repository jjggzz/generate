// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/model.gotemplate (430B)
// repository/new.gotemplate (1.053kB)
// repository/repo.gotemplate (4.974kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xfc\x40\x10\xc6\xeb\x7f\x20\xef\x30\xa4\xfa\xdb\x64\xfb\x74\x22\x1e\x08\x87\x08\xa6\x93\xc0\xed\x25\xcb\x11\x4d\x76\xc3\xee\x1c\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xae\x51\x10\xb1\xf2\x79\x72\xea\x5b\xc8\xee\x5e\xce\xe3\xba\xd9\xf9\xe6\xf7\xcd\x7e\xd3\xf1\xf2\x8a\x2f\x04\x10\xa5\x67\xa1\x3c\xe5\xad\xb0\x36\x8e\xe2\xa8\x6e\x3b\xa5\x11\xfe\xc7\x11\x00\x00\x91\xe6\x72\x21\x20\x3d\xf1\x6d\x63\x6d\x42\x94\x5a\x9b\x8c\xb2\x90\x95\xe3\x0e\x1c\xba\x1d\x3e\x96\x58\x63\x6f\x9c\xc0\x18\x7c\x3f\xaf\x86\x87\xfb\x8c\x28\xcd\xf9\xbc\xd9\xae\x62\x0c\x4a\xd5\xb6\x42\xa2\x93\x02\x72\x28\xa5\x42\x8e\xb5\x92\x6e\x02\xfb\xce\xfd\x71\xf4\x0b\x20\x18\xd4\xcb\x12\x81\xe2\xe8\xdf\xde\xc2\x49\x2d\x9a\xca\x58\x4b\x94\xfa\x72\x03\x8c\xcf\xbc\xef\xdc\x73\x56\xcd\x33\x17\xe2\x48\x35\xcb\x56\x86\x99\x04\x2e\x8d\x92\xae\x7d\x8e\x7a\x52\x6b\x83\x53\x81\x28\x74\xae\xa6\xea\x5a\xe8\x92\x1b\x01\xbb\x9e\xc9\x0c\x18\x83\xe1\xe5\x71\xfd\xfa\x91\xc1\xc5\x9e\x5b\x01\x5f\x6f\x9f\xc3\xd3\x5d\xf6\x27\x84\xdd\x05\xac\xdf\x57\x3f\x37\xb7\x01\xf1\x7e\xbb\x89\x0b\x1f\x69\x73\x51\xeb\xee\xe9\xeb\xdf\x00\x00\x00\xff\xff\x7b\x11\x98\x32\xae\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 430, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2a, 0x1c, 0xf4, 0x15, 0xa1, 0x64, 0x1, 0x13, 0x93, 0x78, 0x34, 0xb7, 0x33, 0x71, 0x30, 0x32, 0xc3, 0xef, 0x80, 0x3f, 0x36, 0x41, 0x8d, 0xe3, 0xf, 0x5a, 0x74, 0x75, 0x35, 0x8b, 0x89}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x6b\xdc\x30\x10\xc5\xcf\x59\xd8\xef\x30\xf8\x50\xe4\xe0\x78\x2f\xa5\x87\x1c\xd3\xa4\x10\x1a\x42\x68\xd2\x53\x29\x45\xb6\x27\xae\x5a\x5b\xf2\x8e\xc6\x4d\x84\xd0\x77\x2f\x5a\x3b\x59\xd7\xf1\xd2\xbd\x59\xf3\xe7\xf7\xde\x93\x70\x27\xcb\xdf\xb2\x46\xf0\x3e\xbf\x1b\x3e\x6f\x65\x8b\x21\xac\x57\xeb\x95\x6a\x3b\x43\x0c\x62\xbd\x3a\xf9\x01\x49\xad\xf8\x67\x5f\xe4\xa5\x69\x37\xb5\x39\xb3\xdb\xe6\xac\x22\xf5\x07\x69\xd3\x3a\xbb\x6d\x92\xf5\xea\x64\x3a\xf2\xab\x35\x8a\x8c\xde\xd8\x6d\xf3\x9c\x44\x18\x00\x80\xf7\x24\x75\x8d\x90\x5f\xef\xc8\x36\x84\xc4\xfb\x3c\x84\xe4\xa5\x8d\xba\x8a\xd2\x69\x5c\x60\xd7\x21\x7c\xc1\xce\x58\xc5\x86\x1c\x58\xa6\xbe\x64\xf0\x33\xd4\x95\x66\xc5\xce\x86\x10\x23\x0c\x87\x21\x41\x5c\x5d\xaa\x0d\xb8\x99\xe2\x2e\xef\x63\xaf\x4b\xb8\xc5\xa7\x38\x25\xaa\x02\x4e\xa3\xf9\xfc\xf2\x22\x9d\xda\x18\xf5\x09\xb9\x27\x3d\x69\x8c\xf5\xe3\xbd\x9d\x47\xa9\x85\xba\xa8\x8a\x34\x9b\xc2\x46\x8b\xf1\x30\x38\x7d\xcb\xdf\x7b\x5f\x06\x4e\xa2\x1c\xbc\x91\x59\xb2\x77\xde\xdf\x33\x7d\x52\x64\xf9\x06\x99\x91\x1e\xcc\x8d\x79\x42\x2a\xa5\x7d\x55\x9e\x5e\xf4\xde\x71\x55\x9c\x57\x45\xf6\xaf\xe1\x31\xc3\xb2\xf7\xdd\x4b\x1f\xf6\xa5\x34\x23\x3d\xca\x12\x5f\x44\x3e\x9a\x5e\xb3\x48\x41\x28\xcd\x1f\xde\x67\x80\x44\x86\xd2\xa1\x77\xad\x2d\x12\x8b\xd3\x19\x6e\x79\xf8\x6b\x57\x49\xc6\x0b\x77\x47\xaa\x95\xe4\x3e\xa3\x13\xf1\x3f\x78\x3d\x3d\xb8\x0e\x43\xc8\x8e\x83\x5d\x62\x83\xff\x87\x2d\xef\xde\x63\x83\x25\x1f\xb1\x3b\xb7\xb2\x8c\xb9\x7a\x96\x6d\xd7\xe0\x9b\xe9\xb1\x9e\x82\xf8\xf6\xfd\x30\x69\xff\x60\x7f\x03\x00\x00\xff\xff\x46\xb9\x52\x24\x1d\x04\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 1053, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0xd2, 0x44, 0x9b, 0x1d, 0xeb, 0x54, 0x21, 0xba, 0x11, 0xb0, 0xab, 0xf5, 0x91, 0xbd, 0xf0, 0x3d, 0x77, 0xf9, 0x81, 0x8d, 0x68, 0xc6, 0xc7, 0xc5, 0x85, 0x4b, 0x8b, 0x43, 0xd7, 0xf7, 0x1c}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5b\x6f\xdb\x36\x14\x7e\x96\x01\xff\x87\x53\xa1\x28\xa4\x56\x53\x36\x60\xd8\x83\x31\xb5\x68\xd3\x64\xcb\x96\x05\x41\x9b\xed\x25\x08\x06\x5a\x3a\x4a\xd8\x51\xa4\x42\x52\x8d\x0d\x41\xff\x7d\xe0\x45\xf2\x25\x4e\xe3\x64\xde\x25\x83\x1f\x2c\x1f\xf2\xdc\xbe\xf3\xe9\xf0\xd0\x35\xc9\xff\x20\x97\x08\x6d\x9b\x9e\xba\xc7\x13\x52\x61\xd7\x8d\x47\xe6\x43\xab\x5a\x48\x0d\xd1\x78\x04\x00\x10\x16\x44\x93\x29\x51\xb8\xa7\xae\x59\x38\x1e\x05\xe1\x25\xd5\x57\xcd\x34\xcd\x45\xb5\xf7\xa9\x12\x54\x0a\x6e\x96\x66\x76\x4d\x69\x49\xf9\xa5\x0a\x8d\x1d\xa3\xdd\xb6\x92\xf0\x4b\x84\xf4\xc8\x1a\x55\x5d\x17\xb6\x6d\xda\x75\x61\xbf\x8c\xbc\x30\x7e\x63\xa3\xa0\xe7\xb5\x89\xe9\xa3\x96\x87\x54\x2a\x7d\x8c\x5a\xa3\x3c\x13\xc7\xe2\x06\x65\x4e\x14\x42\x7a\xc0\x35\xd5\x73\x17\xec\x07\xac\x05\x28\x2d\x9b\x5c\x43\xeb\xcc\x15\x53\x78\x69\x42\x49\xdf\xbf\x1b\x8f\xba\x25\x93\x2b\x8a\x07\x33\x52\xd5\x0c\x97\x74\x83\x7d\x49\x35\x4a\x4a\xe0\xfc\x62\x49\x1a\x1c\x4a\x72\x59\x21\xd7\xe0\xd2\x32\xa2\x53\x22\x49\x65\x7c\x51\xae\x51\x96\x24\xc7\xb6\x33\x72\x2e\x7e\x23\xac\x41\x80\xa9\x10\x6c\x3c\x0a\x3a\x1f\xc0\xde\x1e\xe0\x0c\xf3\x46\x23\x94\x84\x32\x90\xa8\x1b\xc9\xe1\xab\x6f\x80\xf0\x02\x50\xca\x95\x2d\xaa\xc9\x73\x54\xaa\xdf\x95\x8b\x86\x6b\x90\xe2\x46\xd9\xdd\x9c\xb2\xf1\xa8\x6c\x78\x0e\x91\x34\xc9\xbf\x7c\x10\x56\x31\xec\x1b\x73\x51\x0c\x11\xe5\xfa\xbb\x6f\x13\xe3\x5d\xc8\xd8\x83\xf7\x99\x48\xef\xcf\xae\x5a\x59\x80\x52\xc2\x24\x03\xe3\x2d\x2d\xa6\xe9\x0f\xa8\xa3\x17\x76\x53\x02\xa1\x42\x86\xb9\x76\x3a\xd1\xcb\x18\x4a\x29\x2a\x03\xf5\x19\x99\x32\xcf\xa7\x30\x76\x66\x68\x69\x7c\xc1\xb3\xcc\xa4\xe0\xfd\x05\xc1\x00\x45\xe2\x70\x30\xc2\xce\x7d\x2d\xe7\x9f\xd8\xb4\xff\x3a\x98\xa4\x2c\x31\xd7\x58\xec\x0e\xcf\x23\xae\x50\xea\x68\x6b\x2d\xe3\x60\x45\x70\x47\x29\x40\xa2\x6a\x98\xb6\xd2\x65\xf8\x0f\x66\x98\x47\x21\xb5\x5e\x4d\x95\xc4\x1a\xdc\x51\xdb\x7e\x12\x94\x43\xba\x2f\x58\x53\x71\x23\x54\x10\x26\x10\x1a\x4f\x9f\x2d\x3d\xa3\xb6\x9d\x36\x94\x15\x96\xac\x3f\x0a\x56\xac\x6c\xee\xba\x38\x1c\xde\xd8\x15\x79\xf2\xa5\x24\x9f\xaf\x24\x95\xb6\x6d\x49\x79\xf1\x0b\xa9\x21\x1d\x96\x0e\x29\x32\x23\xea\x3a\xff\xca\xc7\xe3\xd1\x6d\x5a\x2c\x73\xc2\x56\xd3\xf0\xa1\x97\x39\x50\xd2\x0f\xe2\x46\xbd\xf5\xa5\x8c\xe2\xff\x26\x31\x7e\xad\x0b\xa2\xf1\xdd\xfc\x54\xd2\x8a\xc8\xf9\xcf\x38\x8f\xea\xe1\xd1\x76\xdd\xe1\xd7\xd9\xbc\xc6\x7b\xe0\xfd\x1b\x38\xd4\xd8\x00\xd7\xe8\x03\x0a\x35\x6c\xa4\x50\xf6\xc6\x92\x28\x7b\x03\x37\x57\x28\x71\x35\x83\xc5\xce\xae\x83\x0c\xde\xfc\x53\x0c\x4a\x16\x90\xba\x36\x03\x9b\xda\x0c\x38\x2c\x56\x58\x65\x44\x5d\x8f\xd2\x53\xe3\xd6\x7b\x64\xf8\x20\x6e\x3d\x8a\x20\x85\xf5\xb2\xa9\xa7\x6f\x45\x81\x04\x1e\x53\x1c\xd8\x5d\x75\x8c\x8f\x2f\x95\x67\xda\x68\xe0\x02\x24\xe6\x42\x16\xeb\x4a\xb6\x44\x1b\x94\xae\x88\x5a\xd3\x30\xb3\xd1\x4e\xaa\xfa\xd1\x1e\xa6\x0f\xab\xea\x7a\x27\x48\x16\xf5\x0d\xb6\xef\x27\x93\x0c\x38\xde\x44\xeb\x5d\x65\x3c\xda\x74\xf8\x6f\x6d\x76\x31\x1f\xdc\x7d\x26\xed\x8a\x5d\xfd\x39\x92\x65\xa0\xae\x59\x7a\x20\xe5\x89\x30\x5c\xd9\x40\x32\x4e\x59\xe2\x6a\xb5\xc4\xb2\xfb\x98\x69\x95\xee\xa0\xe6\x03\x00\xb9\x77\x8c\xc1\xaa\xd6\x73\x50\x8c\xe6\xf8\x70\xee\xae\x2b\xff\x8b\x1c\xf6\xf3\x75\x84\x7e\xce\x5e\xe7\xa9\x5f\x8f\x21\x3a\xbf\xb8\xc5\xe1\xb5\x26\x65\xa6\x52\x46\x95\x86\xdb\x5b\xdd\x86\x20\xef\x47\xf7\x49\x06\xde\x63\xda\x8f\xf3\x7e\x8b\x31\x52\x9b\xb9\x5d\xc1\xf9\xc5\xca\xdc\x3e\x2c\xe7\x82\x17\x54\x53\xc1\x21\x83\xd0\x5f\x4e\x0c\xaf\x18\xf2\xa8\xf7\x10\xc3\x6b\xf8\xba\x0f\x2c\xb0\x6a\xa5\xbf\x20\x28\x77\x71\xb0\x77\x04\xb7\x5a\x0a\x09\xbf\x27\x80\xf6\x0d\xb2\xc7\xe1\x10\xe8\x60\x21\x58\xa8\x67\x40\xea\x1a\x79\x11\x0d\xa2\x04\x30\xed\xef\x1f\xf1\xa0\x41\x4b\x78\x86\x69\x7f\xd9\x58\x58\x32\x5f\x3e\xc5\xc1\x94\xfb\x6d\xec\xd8\x4b\xcb\xc2\x48\x9f\xf8\xe2\x61\x91\xfe\xab\x0c\x42\xf7\x0e\x86\xf0\xca\xdf\x7b\x54\x7a\x26\x69\x75\x8c\xa5\x8e\x7a\xc1\x4f\x82\xf2\xe5\x58\x43\x08\xe3\x04\x42\xc2\x8b\xb0\xf7\xd3\x1b\xf7\x34\x33\x55\x4c\x86\x66\xe2\xb8\x12\xbd\x70\xd2\x47\xf6\x8a\xf0\xd5\x10\x77\xe2\xb3\x4f\xd3\xb4\x3f\x19\x86\x31\x64\x69\x7e\x50\x86\x36\x8e\xe2\x38\x33\xc4\x7c\xbe\x99\x99\x6f\x79\xd1\xb6\xa9\x55\xf1\x2b\xd7\x0d\x61\x67\xc2\x61\x0a\xfd\x5a\xdf\x8a\xef\x32\x64\x5b\x31\xce\x06\x3e\x2e\x6a\xb3\x24\x4c\x60\x57\x57\xce\xb6\x57\x9e\xd8\x4a\x98\x30\x37\xf4\x4e\x6b\x6e\xe2\xf0\xb2\x7d\xbe\xef\x20\x33\x0f\xdc\x63\xf0\x39\x11\xfa\x7f\x01\xd1\xf7\xaf\xb7\xc1\xe8\x31\x08\x1d\xa9\x93\x86\xb1\xe8\xc9\x20\x41\x15\xf0\x86\xb1\x30\x01\xaf\x3a\xd1\xb2\xc1\xdd\x81\x21\xf4\xd3\xc3\x43\xe8\x2d\x31\x19\xfe\xd7\x32\x9f\x3f\x03\x00\x00\xff\xff\x0b\xda\xc2\x7d\x6e\x13\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 4974, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x88, 0x3, 0x38, 0x8c, 0x83, 0xcb, 0xe5, 0xd9, 0xaf, 0x62, 0x4a, 0xca, 0xe4, 0xdb, 0x33, 0x80, 0x10, 0x63, 0xac, 0xdf, 0xee, 0xbc, 0xfd, 0x53, 0xa5, 0xd0, 0x6a, 0xf5, 0x63, 0x7d, 0x19}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model.gotemplate": modelGotemplate,
	"new.gotemplate":   newGotemplate,
	"repo.gotemplate":  repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"model.gotemplate": {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":   {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":  {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
