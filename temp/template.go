// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/example.gotemplate (4.67kB)
// repository/model.gotemplate (430B)
// repository/new.gotemplate (1.053kB)
// repository/repo.gotemplate (3.942kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampleGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x51\x6b\xdb\x30\x10\xc7\x9f\x63\xf0\x77\x38\xcc\x1e\xec\x61\x0c\xc9\x63\x48\x1b\xb6\x92\x8e\xc0\xc8\xfa\x10\xf6\x52\xfa\xa0\xc6\xd7\x4c\x4c\x96\x3c\xf9\xc4\x12\x84\xbe\xfb\x90\x65\x87\xb0\x75\x63\x94\x7a\x0c\x9c\xe4\x25\xb9\x7f\xee\x74\xf7\xd3\xe5\x2c\xbb\x66\xbb\xaf\x6c\x8f\x60\x6d\x71\x17\x3e\x6e\x58\x85\xce\xc5\x91\x7f\xf3\xaa\x56\x9a\x20\x8d\x23\x00\x00\x6b\x35\x93\x7b\x84\x62\xdd\x9a\x1b\xe7\x12\x6b\x0b\xe7\x92\x5e\x46\x59\x7a\xcf\xcc\xbb\xd2\xb1\x6e\xa3\xae\x24\x71\x3a\x86\xa0\xab\x03\xab\x6a\x81\xd0\x90\x36\x3b\x02\x1b\x47\x93\x1b\xcd\x09\x35\x67\x70\xff\x70\x66\x9d\xdc\x6a\xb6\xaf\x50\x92\x8f\xeb\x7f\xce\xe5\xde\x9b\xef\x98\x66\xd5\x14\xc2\x8b\x4b\x42\xfd\xc4\x76\x68\xdd\x49\x9b\x3d\xaf\x49\xf5\x99\x09\x83\x41\x7b\x54\x4a\x78\xe3\x23\xd2\x77\x44\x19\x94\xce\xe8\xe2\xa8\x2d\xfd\x54\x6a\x48\xff\x96\xa3\x28\x1b\x5f\xdb\x93\x91\x3b\x48\xf1\x00\x6f\xad\x7d\xf3\x5c\x71\x19\xbc\x93\xa5\xb5\x45\xeb\x12\x94\x75\xb3\x31\x42\xa4\xd9\x6f\x7d\xda\x9a\xf1\x50\x9c\x60\x5c\x01\xab\x6b\x94\x65\x7a\x66\xcc\xe1\xbf\x00\x64\xfb\x95\xe7\x90\x30\x59\xfa\x2d\xbe\x51\xc2\x54\x32\x54\x04\xbc\x01\x69\x84\x48\x72\xe8\x62\xce\x49\x1b\x74\x59\x1c\x4d\x34\x92\xd1\x12\xf0\xd0\x41\x7e\x21\x4b\x45\x23\xc3\xa9\x68\x50\xa4\xab\x6f\x86\x89\xad\x4a\x6b\x5f\x10\xf4\xda\xf6\x58\xa3\x73\xe3\x80\x7c\x05\xcb\x24\x87\x90\xc7\x1c\x5a\x0e\xaf\x46\x77\xa3\xe8\x02\x78\x71\x3d\x20\xe1\x0f\x1a\x19\xa1\xde\x7e\x61\x72\xc4\x88\xff\x11\xe1\x4f\xfa\xd2\xcd\xd7\x7f\x37\x2f\x5e\x42\xfa\x23\x36\xcd\xc8\x1b\x79\x31\x60\x23\xf7\x78\x2f\x5d\xec\x60\x31\xe4\x55\x6f\xdd\x77\xf0\xfd\xc3\x18\xd9\x72\x09\xe9\x32\x1b\xf2\x4c\x31\x72\xc0\xfe\x4c\x3c\x30\xe4\xf7\x21\xaf\x80\x79\xfa\xd3\x88\xc8\xc3\x62\xb3\x51\x4e\x8e\xce\x09\x96\xe0\xd5\x5f\x86\xc8\x34\x0f\x69\x74\x5f\x67\xf9\xf9\x22\xaf\x7b\xeb\xb2\x51\x74\xd9\xa6\x3f\xfd\x47\x86\xd9\xaa\xd3\x93\x9e\x1f\x01\x00\x00\xff\xff\x4c\x05\xd9\x3d\x3e\x12\x00\x00")

func exampleGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_exampleGotemplate,
		"example.gotemplate",
	)
}

func exampleGotemplate() (*asset, error) {
	bytes, err := exampleGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example.gotemplate", size: 4670, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0x43, 0x8f, 0x9f, 0x2f, 0xf8, 0x0, 0x2c, 0x89, 0x4f, 0x3f, 0x6e, 0x9d, 0x2d, 0x71, 0x3b, 0xb4, 0xc7, 0x89, 0xc3, 0x4e, 0xb7, 0xdd, 0xe2, 0xe2, 0xba, 0x3c, 0xf7, 0xf, 0x2f, 0xfc, 0x4e}}
	return a, nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xfc\x40\x10\xc6\xeb\x7f\x20\xef\x30\xa4\xfa\xdb\x64\xfb\x74\x22\x1e\x08\x87\x08\xa6\x93\xc0\xed\x25\xcb\x11\x4d\x76\xc3\xee\x1c\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xae\x51\x10\xb1\xf2\x79\x72\xea\x5b\xc8\xee\x5e\xce\xe3\xba\xd9\xf9\xe6\xf7\xcd\x7e\xd3\xf1\xf2\x8a\x2f\x04\x10\xa5\x67\xa1\x3c\xe5\xad\xb0\x36\x8e\xe2\xa8\x6e\x3b\xa5\x11\xfe\xc7\x11\x00\x00\x91\xe6\x72\x21\x20\x3d\xf1\x6d\x63\x6d\x42\x94\x5a\x9b\x8c\xb2\x90\x95\xe3\x0e\x1c\xba\x1d\x3e\x96\x58\x63\x6f\x9c\xc0\x18\x7c\x3f\xaf\x86\x87\xfb\x8c\x28\xcd\xf9\xbc\xd9\xae\x62\x0c\x4a\xd5\xb6\x42\xa2\x93\x02\x72\x28\xa5\x42\x8e\xb5\x92\x6e\x02\xfb\xce\xfd\x71\xf4\x0b\x20\x18\xd4\xcb\x12\x81\xe2\xe8\xdf\xde\xc2\x49\x2d\x9a\xca\x58\x4b\x94\xfa\x72\x03\x8c\xcf\xbc\xef\xdc\x73\x56\xcd\x33\x17\xe2\x48\x35\xcb\x56\x86\x99\x04\x2e\x8d\x92\xae\x7d\x8e\x7a\x52\x6b\x83\x53\x81\x28\x74\xae\xa6\xea\x5a\xe8\x92\x1b\x01\xbb\x9e\xc9\x0c\x18\x83\xe1\xe5\x71\xfd\xfa\x91\xc1\xc5\x9e\x5b\x01\x5f\x6f\x9f\xc3\xd3\x5d\xf6\x27\x84\xdd\x05\xac\xdf\x57\x3f\x37\xb7\x01\xf1\x7e\xbb\x89\x0b\x1f\x69\x73\x51\xeb\xee\xe9\xeb\xdf\x00\x00\x00\xff\xff\x7b\x11\x98\x32\xae\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 430, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2a, 0x1c, 0xf4, 0x15, 0xa1, 0x64, 0x1, 0x13, 0x93, 0x78, 0x34, 0xb7, 0x33, 0x71, 0x30, 0x32, 0xc3, 0xef, 0x80, 0x3f, 0x36, 0x41, 0x8d, 0xe3, 0xf, 0x5a, 0x74, 0x75, 0x35, 0x8b, 0x89}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x6b\xdc\x30\x10\xc5\xcf\x59\xd8\xef\x30\xf8\x50\xe4\xe0\x78\x2f\xa5\x87\x1c\xd3\xa4\x10\x1a\x42\x68\xd2\x53\x29\x45\xb6\x27\xae\x5a\x5b\xf2\x8e\xc6\x4d\x84\xd0\x77\x2f\x5a\x3b\x59\xd7\xf1\xd2\xbd\x59\xf3\xe7\xf7\xde\x93\x70\x27\xcb\xdf\xb2\x46\xf0\x3e\xbf\x1b\x3e\x6f\x65\x8b\x21\xac\x57\xeb\x95\x6a\x3b\x43\x0c\x62\xbd\x3a\xf9\x01\x49\xad\xf8\x67\x5f\xe4\xa5\x69\x37\xb5\x39\xb3\xdb\xe6\xac\x22\xf5\x07\x69\xd3\x3a\xbb\x6d\x92\xf5\xea\x64\x3a\xf2\xab\x35\x8a\x8c\xde\xd8\x6d\xf3\x9c\x44\x18\x00\x80\xf7\x24\x75\x8d\x90\x5f\xef\xc8\x36\x84\xc4\xfb\x3c\x84\xe4\xa5\x8d\xba\x8a\xd2\x69\x5c\x60\xd7\x21\x7c\xc1\xce\x58\xc5\x86\x1c\x58\xa6\xbe\x64\xf0\x33\xd4\x95\x66\xc5\xce\x86\x10\x23\x0c\x87\x21\x41\x5c\x5d\xaa\x0d\xb8\x99\xe2\x2e\xef\x63\xaf\x4b\xb8\xc5\xa7\x38\x25\xaa\x02\x4e\xa3\xf9\xfc\xf2\x22\x9d\xda\x18\xf5\x09\xb9\x27\x3d\x69\x8c\xf5\xe3\xbd\x9d\x47\xa9\x85\xba\xa8\x8a\x34\x9b\xc2\x46\x8b\xf1\x30\x38\x7d\xcb\xdf\x7b\x5f\x06\x4e\xa2\x1c\xbc\x91\x59\xb2\x77\xde\xdf\x33\x7d\x52\x64\xf9\x06\x99\x91\x1e\xcc\x8d\x79\x42\x2a\xa5\x7d\x55\x9e\x5e\xf4\xde\x71\x55\x9c\x57\x45\xf6\xaf\xe1\x31\xc3\xb2\xf7\xdd\x4b\x1f\xf6\xa5\x34\x23\x3d\xca\x12\x5f\x44\x3e\x9a\x5e\xb3\x48\x41\x28\xcd\x1f\xde\x67\x80\x44\x86\xd2\xa1\x77\xad\x2d\x12\x8b\xd3\x19\x6e\x79\xf8\x6b\x57\x49\xc6\x0b\x77\x47\xaa\x95\xe4\x3e\xa3\x13\xf1\x3f\x78\x3d\x3d\xb8\x0e\x43\xc8\x8e\x83\x5d\x62\x83\xff\x87\x2d\xef\xde\x63\x83\x25\x1f\xb1\x3b\xb7\xb2\x8c\xb9\x7a\x96\x6d\xd7\xe0\x9b\xe9\xb1\x9e\x82\xf8\xf6\xfd\x30\x69\xff\x60\x7f\x03\x00\x00\xff\xff\x46\xb9\x52\x24\x1d\x04\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 1053, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0xd2, 0x44, 0x9b, 0x1d, 0xeb, 0x54, 0x21, 0xba, 0x11, 0xb0, 0xab, 0xf5, 0x91, 0xbd, 0xf0, 0x3d, 0x77, 0xf9, 0x81, 0x8d, 0x68, 0xc6, 0xc7, 0xc5, 0x85, 0x4b, 0x8b, 0x43, 0xd7, 0xf7, 0x1c}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\xdb\x6e\xdc\x36\x13\xbe\xd6\x02\xfb\x0e\x13\xe2\x47\x40\xd9\xfa\xe9\xa6\x28\x7a\x11\x40\x35\x1a\xc7\x6e\xdd\xba\x81\x91\xb8\xbd\x09\x82\x82\x2b\x8d\xd6\x4c\x25\x52\x26\xa9\xac\x17\x82\xde\xbd\x20\x75\x58\xed\xc1\xb1\xd7\x71\x4f\xf6\xc5\x4a\xc3\x99\xf9\xe6\xf0\x69\x48\x96\x3c\xf9\x83\xcf\x11\xea\x9a\x5d\xb6\x8f\x6f\x78\x81\x4d\x33\x9d\xb8\x7f\x51\x94\x4a\x5b\xa0\xd3\x09\x00\x00\x49\xb9\xe5\x33\x6e\xf0\xc8\xdc\xe4\x64\x3a\x09\xc8\x5c\xd8\xeb\x6a\xc6\x12\x55\x1c\x7d\x2c\x94\xd0\x4a\xba\xa5\x5b\xbf\x66\xac\x16\x72\x6e\x88\xf3\xe3\xac\xeb\x5a\x73\x39\x47\x60\xe7\xde\xa9\x69\x1a\x52\xd7\xac\x69\x48\xbf\x8c\x32\x75\xb8\xa1\x33\xb0\xcb\xd2\xc5\xf4\xce\xea\x33\xa1\x8d\xbd\x40\x6b\x51\x5f\xa9\x0b\xb5\x40\x9d\x70\x83\xc0\x4e\xa5\x15\x76\xd9\x06\xfb\x16\x4b\x05\xc6\xea\x2a\xb1\x50\xb7\xee\xd2\x19\x1c\xb8\x50\xd8\xeb\x57\xd3\x89\xcf\xe6\xe8\x08\xf0\x16\x93\xca\x22\x64\x5c\xe4\xa0\xd1\x56\x5a\xc2\xff\x5f\x00\x97\x29\xa0\xd6\x6b\x2a\xa6\x4a\x12\x34\xa6\xd7\x4a\x54\x25\x2d\x68\xb5\x30\x5e\x5b\x8a\x7c\x3a\xc9\x2a\x99\x00\xd5\x0e\xfb\x60\xaf\x50\x43\x38\x71\xee\x68\x08\x54\x48\xfb\xed\x37\x91\x43\x57\x3a\xec\x62\xff\xc4\x75\x87\xe7\x57\xbd\x2c\x40\xad\xe1\x65\x0c\x0e\x8d\xa5\x33\xf6\x03\x5a\xfa\xdc\x2b\x45\x40\x0c\xe6\x98\xd8\xd6\x86\x1e\x84\x90\x69\x55\xb8\x86\x5e\xf1\x59\xde\xb5\x93\x84\xad\x1b\x91\x39\x2c\x78\x16\xbb\x14\x3a\xbc\x20\x18\x4a\x11\xb5\x75\x70\xc2\xa6\xfd\x19\xe7\x1f\xf9\xb4\xbf\xbc\x98\x3c\xcb\x30\xb1\x98\x3e\x5d\x3d\xcf\xa5\x41\x6d\xe9\x83\xad\x1c\xc0\x9a\xe0\x8e\x56\x80\x46\x53\xe5\xd6\x4b\xc7\xe5\x3f\xbd\xc5\x84\x12\xe1\x51\x5d\x97\xd4\x46\xb9\x69\x5d\x7f\x54\x42\x02\x3b\x51\x79\x55\x48\x27\x34\x40\x22\x20\x0e\xe9\x13\xcf\x2b\x04\x5a\xd7\xb3\x4a\xe4\xe9\x6f\xee\xed\x47\x95\xa7\x6b\xca\x4d\x13\x92\xe1\x83\x59\x93\x47\x9f\x4b\xf2\x7f\x6b\x49\xb1\xba\xce\x84\x4c\x7f\xe1\x25\xb0\x61\xe9\x4c\x60\xee\x44\x4d\xd3\x7d\x71\xe1\x74\xb2\x4d\x8b\x31\x27\x7c\x37\x1d\x1f\x7a\x59\x5b\x14\xf6\x56\x2d\xcc\xf7\x5d\x2b\x69\xf8\xef\x24\xc6\xaf\x65\xca\x2d\xbe\x5a\x5e\x6a\x51\x70\xbd\xfc\x19\x97\xb4\x1c\x1e\xfd\xd0\x1b\xde\xae\x96\x25\xde\x53\xde\xbf\x80\x43\x95\x0f\x70\x83\x3e\x60\xd0\xc2\x4e\x0a\xc5\xc7\x9e\x44\xf1\x31\x2c\xae\x51\xe3\x7a\x06\x2b\xcd\xa6\x81\x18\x8e\xff\x2e\x06\x45\xab\x92\xb6\x63\x06\x76\x8d\x19\x68\x6b\xb1\xc6\x2a\x27\x6a\xfa\x2a\xfd\xd7\xb8\xf5\x1a\x73\xdc\x8b\x5b\x8f\x22\x48\xea\x51\x76\xcd\xf4\x07\x51\x20\x82\xc7\x34\x07\x9e\xae\x3b\x0e\xe3\x73\xed\x99\x55\x16\xa4\x02\x8d\x89\xd2\xe9\xa6\x91\x6f\xd1\x0e\xa3\x6b\x6e\x36\x2c\xdc\xd1\xe4\x49\xba\xfa\xce\x6f\xa6\xfb\x75\x75\x73\x12\x44\xab\xfe\x06\x0f\x9f\x27\x2f\x63\x90\xb8\xa0\x9b\x53\x65\x3a\xd9\xb5\xf9\x3f\xd8\xed\xea\x7c\x70\xf7\x9e\xf4\x54\xec\xea\xf7\x91\x38\x06\x73\x93\xb3\x53\xad\xdf\x28\xc7\x95\x1d\x24\x93\x22\x8f\xda\x5e\x8d\x58\x76\x1f\x33\xbd\xd1\x1d\xd4\xdc\xa3\x20\xf7\x1e\x63\xb0\x28\xed\x12\x4c\x2e\x12\xdc\x9f\xbb\x9b\xc6\xff\x20\x87\x4f\x6f\x79\x51\xe6\x48\xb1\xfd\xdd\xda\xb1\xba\xf5\x10\xe8\xfb\x0f\x5b\x1c\xde\x18\x52\xee\x54\x9a\x0b\x63\x61\x5b\xb5\x55\x08\x12\x2d\x2c\x6a\xc1\x1d\x55\x3b\x44\x76\xd2\xc9\x3a\x15\xe7\xa4\xe4\x9a\x17\x06\xde\x7f\x10\xd2\xa2\xce\x78\x82\x75\x33\x5a\x4e\x94\x4c\x85\x15\x4a\x42\x0c\xa4\xbb\x1b\x38\x5e\xe5\x28\x69\x8f\x10\xc2\x77\xf0\x55\x1f\x58\xe0\xcd\x32\xcd\xe7\x05\x4a\xeb\x1c\xb7\x37\x8f\x7e\x35\x53\x1a\x7e\x8f\x00\xfd\x17\xe4\xb7\xc3\x21\xd0\xc1\x43\xb0\x32\x8f\x81\x97\x25\xca\x94\x0e\xa2\x08\x90\x9d\x75\x2f\xe1\x60\x21\x32\x78\x86\x4c\x2a\x7f\x7e\x1b\x73\x75\xfc\xd7\xe5\x3a\xf8\x6c\xdf\x9d\xc3\x4b\xf7\xf4\x22\xdc\x36\x6b\xb6\x45\xee\xb3\x60\x33\xb4\x0b\x44\xf9\x25\x70\x5f\xdf\x0f\xd7\x77\x22\x58\xb5\xe1\x30\x06\xd2\xce\x02\x02\x87\xd0\xdd\xea\xd8\x95\x16\xc5\x05\x66\x96\xf6\x82\x9f\x94\x90\xe3\x9a\x11\x20\x61\x04\x84\xcb\x94\xf4\x45\x1b\x61\xdd\x54\xa8\x97\x11\x70\x3d\x37\xc3\xbe\xe7\xaf\x6b\xe7\x92\x3e\x72\x5e\x91\xc3\x21\xe6\xa8\xab\x04\x63\x6c\x94\xf2\x9d\xd3\x65\x34\x45\x1c\xc3\x57\x47\x93\x71\x45\xc6\x0a\xc3\x24\x6e\x3f\x34\xfa\xbc\x95\x8e\x92\x6a\x91\xbb\x5b\xf4\x74\xf2\x67\x00\x00\x00\xff\xff\x7e\x97\x19\x7c\x66\x0f\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 3942, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0xec, 0xc5, 0xd8, 0xb, 0xb7, 0x20, 0xb5, 0xb6, 0x2c, 0x97, 0xb1, 0x14, 0x2a, 0xb, 0x84, 0xc8, 0x5, 0x69, 0x5b, 0x8d, 0x85, 0x53, 0x11, 0x0, 0x5f, 0xed, 0xc, 0x14, 0xa7, 0x5d, 0xc9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"example.gotemplate": exampleGotemplate,
	"model.gotemplate":   modelGotemplate,
	"new.gotemplate":     newGotemplate,
	"repo.gotemplate":    repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"example.gotemplate": {exampleGotemplate, map[string]*bintree{}},
	"model.gotemplate":   {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":     {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":    {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
