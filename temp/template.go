// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/example.gotemplate (5.657kB)
// repository/model.gotemplate (430B)
// repository/new.gotemplate (1.122kB)
// repository/repo.gotemplate (4.784kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampleGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xcf\x6b\xdb\x30\x14\xc7\xcf\x0d\xe4\x7f\x78\x98\x1d\x9c\x61\x0c\xcd\x31\xa4\x0d\x5b\xc9\x46\xa0\x78\x3b\x84\x5d\x4a\x0f\xaa\xfd\x92\x89\xc8\x92\x2b\x3f\xb3\x04\xa1\xff\x7d\xc8\xb2\xb3\x8c\x65\x23\x0b\x75\x29\x38\xc9\x21\xce\xfb\xea\xd7\xf7\xa3\x67\x59\x56\xc1\xd2\x0d\x5b\x23\x18\x13\x7f\xf5\x97\x09\xcb\xd1\xda\xe1\xc0\x7d\x79\x5e\x28\x4d\x10\x0e\x07\x00\x00\xc6\x68\x26\xd7\x08\xf1\xa2\x0e\x97\xd6\x06\xc6\xc4\xd6\x06\xad\x8c\x32\x73\x35\x47\xae\x2a\xed\x8a\xba\xd5\xb9\x24\x4e\x3b\xdf\xe8\x7c\xcb\xf2\x42\x20\x94\xa4\xab\x94\xc0\x0c\x07\x57\xa9\xe6\x84\x9a\x33\x78\x78\x3c\x88\x5e\xad\x34\x5b\xe7\x28\xc9\xb5\xeb\x8a\x73\xb9\x76\xe1\x82\x69\x96\x5f\x83\xff\x70\x49\xa8\x57\x2c\x45\x63\xf7\xda\xf8\xb8\x26\xd5\x37\x26\x2a\xf4\xda\x93\x52\xc2\x05\x9f\x90\x7e\x20\x4a\xaf\x34\x41\x3b\x1c\xd4\xd6\x57\x95\x4c\x21\xc4\x2d\xbc\x37\xe6\xdd\x31\x0f\x23\xb8\x13\xc8\x74\x38\xfa\x6b\x89\xda\x08\x6e\xe3\xbd\xc3\x9b\xb7\xe2\xb1\x2e\xaf\x91\x2a\x2d\x01\xb7\x8d\xe3\xfd\xe4\x7a\x2b\x9f\x38\x8a\xac\x74\xb3\x79\x02\x8a\x0f\x32\x33\x26\xae\xab\x78\x65\x51\x26\x95\x10\xff\x07\x87\x15\x05\xca\x2c\x3c\x08\x46\xf0\x36\x70\xb5\x3d\x4f\x20\x60\x32\x73\x49\x7d\xa7\x44\x95\x4b\xef\x08\x78\x09\xb2\x12\x22\x88\xa0\x69\x73\x42\xba\x42\x3b\x3a\x02\xf9\x4c\x96\x8a\x7a\x86\x53\x51\xa7\x48\xe7\xcf\x15\x13\x4b\x15\xd6\x86\xa0\xd5\x96\xbb\x02\xad\xed\x07\xe4\x1b\x98\x05\x11\xf8\x71\x4c\xfc\xef\x8b\xd1\x4d\x14\x5d\x00\x4f\x6f\x3b\x24\xfc\x59\x23\x23\xd4\xcb\xef\x4c\xf6\x18\xf1\x2b\x11\xfe\xa2\x2f\xd9\x7c\x7b\xda\x7a\x71\x0e\xe9\x7b\x2c\xcb\x9e\x27\xf2\xb4\xc3\x44\x6e\xf1\x5e\xb2\xd8\xc2\xb4\xcb\xa7\xde\xa2\xcd\xe0\x87\xc7\x3e\xb2\xe5\x12\xc2\xd9\xa8\xcb\x3d\x45\xcf\x01\xbb\x3d\x71\xc7\x90\x3f\xfa\x71\x85\x8d\xd9\xdf\x29\x37\x9d\x8e\x7b\xb9\x72\x34\x95\x60\x06\x4e\xfd\x63\x11\xb9\x8e\xfc\x30\x9a\xbf\xe3\xe8\xb0\x93\x97\x7d\x75\x49\x14\x5d\xa6\xe9\x5f\xf7\x48\x37\x53\x65\x0c\x5f\x01\x3e\xc3\x2f\xa6\x10\x78\xe7\xc1\xb9\x67\x24\xf7\x7c\x83\x3d\x7e\x18\x0b\xbe\xc1\xce\x36\x95\x89\xa2\x9e\xe3\x75\xb7\xc2\xc9\x88\xf7\x27\xb7\x07\x97\x3f\x03\x00\x00\xff\xff\x14\x22\x83\x89\x19\x16\x00\x00")

func exampleGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_exampleGotemplate,
		"example.gotemplate",
	)
}

func exampleGotemplate() (*asset, error) {
	bytes, err := exampleGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example.gotemplate", size: 5657, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaf, 0xa7, 0x24, 0xf8, 0x5a, 0x41, 0x65, 0x2a, 0x9, 0xb5, 0x3b, 0xb, 0x5a, 0xba, 0xca, 0x74, 0x44, 0x50, 0xa1, 0x30, 0xd6, 0xb5, 0xd, 0x14, 0x5a, 0x7b, 0x2c, 0x3, 0x28, 0xd8, 0xda, 0x53}}
	return a, nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xfc\x40\x10\xc6\xeb\x7f\x20\xef\x30\xa4\xfa\xdb\x64\xfb\x74\x22\x1e\x08\x87\x08\xa6\x93\xc0\xed\x25\xcb\x11\x4d\x76\xc3\xee\x1c\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xae\x51\x10\xb1\xf2\x79\x72\xea\x5b\xc8\xee\x5e\xce\xe3\xba\xd9\xf9\xe6\xf7\xcd\x7e\xd3\xf1\xf2\x8a\x2f\x04\x10\xa5\x67\xa1\x3c\xe5\xad\xb0\x36\x8e\xe2\xa8\x6e\x3b\xa5\x11\xfe\xc7\x11\x00\x00\x91\xe6\x72\x21\x20\x3d\xf1\x6d\x63\x6d\x42\x94\x5a\x9b\x8c\xb2\x90\x95\xe3\x0e\x1c\xba\x1d\x3e\x96\x58\x63\x6f\x9c\xc0\x18\x7c\x3f\xaf\x86\x87\xfb\x8c\x28\xcd\xf9\xbc\xd9\xae\x62\x0c\x4a\xd5\xb6\x42\xa2\x93\x02\x72\x28\xa5\x42\x8e\xb5\x92\x6e\x02\xfb\xce\xfd\x71\xf4\x0b\x20\x18\xd4\xcb\x12\x81\xe2\xe8\xdf\xde\xc2\x49\x2d\x9a\xca\x58\x4b\x94\xfa\x72\x03\x8c\xcf\xbc\xef\xdc\x73\x56\xcd\x33\x17\xe2\x48\x35\xcb\x56\x86\x99\x04\x2e\x8d\x92\xae\x7d\x8e\x7a\x52\x6b\x83\x53\x81\x28\x74\xae\xa6\xea\x5a\xe8\x92\x1b\x01\xbb\x9e\xc9\x0c\x18\x83\xe1\xe5\x71\xfd\xfa\x91\xc1\xc5\x9e\x5b\x01\x5f\x6f\x9f\xc3\xd3\x5d\xf6\x27\x84\xdd\x05\xac\xdf\x57\x3f\x37\xb7\x01\xf1\x7e\xbb\x89\x0b\x1f\x69\x73\x51\xeb\xee\xe9\xeb\xdf\x00\x00\x00\xff\xff\x7b\x11\x98\x32\xae\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 430, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2a, 0x1c, 0xf4, 0x15, 0xa1, 0x64, 0x1, 0x13, 0x93, 0x78, 0x34, 0xb7, 0x33, 0x71, 0x30, 0x32, 0xc3, 0xef, 0x80, 0x3f, 0x36, 0x41, 0x8d, 0xe3, 0xf, 0x5a, 0x74, 0x75, 0x35, 0x8b, 0x89}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xc1\x6f\xd3\x30\x14\xc6\xcf\xab\xd4\xff\xe1\x29\x07\xe4\x4c\x5d\x7a\x41\x1c\x76\x1c\x1b\xd2\xc4\x34\x4d\x6c\x9c\x10\x42\x4e\xf2\x56\x0c\x89\x9d\x3e\xbf\xb0\x59\x96\xff\x77\xe4\x26\x6d\x43\x48\xa0\xa7\xd6\x7e\xfe\xbe\xef\xf7\xd9\x4a\x23\x8b\x9f\x72\x83\xe0\x7d\xf6\xd0\xfd\xbd\x97\x35\x86\xb0\x5c\x2c\x17\xaa\x6e\x0c\x31\x88\xe5\xe2\xec\x1b\x24\x1b\xc5\xdf\xdb\x3c\x2b\x4c\xbd\xde\x98\x0b\xbb\xad\x2e\x4a\x52\xbf\x90\xd6\xb5\xb3\xdb\x2a\x59\x2e\xce\x86\x47\x7e\xd4\x46\x91\xd1\x6b\xbb\xad\x5e\x93\x68\x06\x00\xe0\x3d\x49\xbd\x41\xc8\x6e\x77\xce\x36\x84\xc4\xfb\x2c\x84\x64\x3f\x46\x5d\xc6\xe8\x34\x0a\xd8\x35\x08\x9f\xb0\x31\x56\xb1\x21\x07\x96\xa9\x2d\x18\xfc\xc8\xea\x46\xb3\x62\x67\x43\x88\x15\xba\x45\xd7\x20\x4a\xa7\xf6\x3a\xbb\x51\xe2\xae\xef\x73\xab\x0b\xb8\xc7\x97\x78\x4a\x94\x39\x9c\x47\xf8\xec\xfa\x2a\x1d\x62\xf4\xf9\x84\xdc\x92\x1e\x0c\xfa\xfd\xd3\xd9\x2e\x63\xd4\xc4\xbe\x28\xf3\x74\x35\x34\xeb\x11\xe3\xa2\x23\xfd\xdb\xff\xc8\x3e\x6d\x38\xa8\x32\x7b\x23\xa3\x66\x6f\xbc\x7f\x64\xfa\xa0\xc8\xf2\x1d\x32\x23\x3d\x99\x3b\xf3\x82\x54\x48\x7b\x48\x1e\x5e\xf4\x91\xb8\xcc\x2f\xcb\x7c\xf5\x27\x70\xdf\x61\x9a\x7d\xf7\xd2\xf3\x5c\x4a\x33\xd2\xb3\x2c\x70\x1f\xf2\xde\xb4\x9a\x45\x0a\x42\x69\x7e\xf7\x76\x05\x48\x64\x28\xed\x66\xb7\xda\x22\xb1\x38\x1f\xd9\x4d\x1f\xfe\xdc\x94\x92\xf1\xca\x3d\x90\xaa\x25\xb9\x8f\xe8\x44\xfc\x0e\x0e\xab\x27\xd7\x60\x08\xab\xd3\xcc\xae\xb1\xc2\xff\x9b\x4d\x6b\x1f\xb1\xc2\x82\x4f\xd0\x8e\x51\xa6\x11\x6e\x5e\x65\xdd\x54\x28\xb0\xfb\x85\xb1\xaa\x9f\xff\x9b\x65\x6f\x32\x2f\xfe\xf2\x75\x1e\xe7\xf8\xea\xbf\x03\x00\x00\xff\xff\xeb\x45\x28\xab\x62\x04\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 1122, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0x14, 0x54, 0xbc, 0xe2, 0x32, 0xb3, 0xe7, 0x45, 0xc6, 0xc1, 0xe7, 0x55, 0x8b, 0xe1, 0xa, 0x5, 0x34, 0xc0, 0xd1, 0x8a, 0xd6, 0x99, 0xcc, 0xfa, 0xa, 0x9c, 0x55, 0x4d, 0x8d, 0xd7, 0x11}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5f\x6f\xdb\x36\x10\x7f\xb6\x00\x7d\x87\xab\x30\x14\x52\xa2\x29\x6b\x31\xec\xa1\x80\x16\xac\x6d\xba\x75\xcb\x8a\xa2\xcd\xf6\x52\x14\x03\x2d\x9d\x1c\x76\x12\xa9\x90\x54\x1d\x43\xd0\x77\x1f\x48\x4a\xb2\x2c\xcb\xb1\x9d\x65\x5b\xe7\x00\xb1\x75\xbc\x3f\xe4\xdd\x8f\xbf\x3b\x95\x24\xf9\x93\x2c\x10\xea\x3a\x7a\x6b\x7f\xbe\x21\x05\x36\x8d\xeb\xe8\x3f\x5a\x94\x5c\x28\xf0\x5d\x07\x00\xc0\x4b\x89\x22\x73\x22\xf1\x4c\xde\xe4\x9e\xeb\xcc\xbc\x05\x55\xd7\xd5\x3c\x4a\x78\x71\xf6\xa9\xe0\x54\x70\xa6\x97\x6e\xcd\x9a\x54\x82\xb2\x85\xf4\x5c\x27\xd0\xae\xd4\xaa\xd4\x51\xde\x2b\xf1\x8a\x0a\xa9\x2e\x51\x29\x14\x57\xfc\x92\x2f\x51\x24\x44\x22\x44\x17\x4c\x51\xb5\xb2\xe1\xdf\x61\xc9\x41\x2a\x51\x25\x0a\x6a\x1b\x3d\x9d\xc3\x89\x76\x1e\xbd\x7c\xee\x3a\x66\x7f\x67\x67\x80\xb7\x98\x54\x0a\x21\x23\x34\x07\x81\xaa\x12\x0c\xbe\x7e\x02\x84\xa5\x80\x42\x6c\xa8\xc8\x2a\x49\x50\xca\x4e\x2b\xe1\x15\x53\x20\xf8\x52\x1a\x6d\x46\x73\xd7\xc9\x2a\x96\x80\x2f\x74\xec\x93\xa3\xb6\x1a\xc0\x0b\xed\xce\x0f\xc0\xa7\x4c\x7d\xf7\x6d\xa8\xa3\x73\x11\xb4\x7b\xff\x4c\x44\x1b\xcf\xac\x1a\xd9\x0c\x85\x80\x67\x31\xe8\x68\x51\x3a\x8f\x7e\x44\xe5\x3f\x36\x4a\x21\x78\x12\x73\x4c\x94\xb5\xf1\x4f\x02\xc8\x04\x2f\x74\x89\xae\xc8\x3c\x6f\x0b\xe4\x05\xd6\x0d\xcd\x74\x2c\x78\x14\xeb\x23\xb4\xf1\x66\xb3\x3e\x15\xa1\xcd\x83\x16\x36\xf6\x6b\x78\xfe\xd0\x1c\xfb\xef\x27\x93\x64\x19\x26\x0a\xd3\x87\xcb\xe7\x6b\x26\x51\x28\xff\x60\x2b\x1d\x60\x43\xb0\xa3\x14\x20\x50\x56\xb9\x32\xd2\x61\xfa\x2f\x6e\x31\xf1\x3d\x6a\xa2\xea\x2a\xf1\x51\xba\xfd\xba\xfe\xc4\x29\x83\xe8\x05\xcf\xab\x82\x69\xa1\x04\x2f\x04\x4f\x47\xfa\x4c\xf2\x0a\xc1\xaf\xeb\x79\x45\xf3\xf4\x77\xfd\xf4\x13\xcf\xd3\x0d\xe5\xa6\x09\xbc\xba\x16\x84\x2d\x70\x24\x0f\xef\x3a\xe4\x57\x1b\x87\x8a\xea\x3a\xa3\x2c\xfd\x95\x94\x10\xf5\x4b\xaf\x28\xe6\x5a\xd4\x34\x75\x8d\x2c\x6d\x9a\xc0\x75\xb6\x61\x31\xc4\x84\xa9\xa6\xc6\x43\x27\xb3\x49\x89\xde\xf1\xa5\xfc\xa1\x2d\xa5\x1f\x7c\x99\xc0\xf8\xad\x4c\x89\xc2\xe7\xab\xb7\x82\x16\x44\xac\x7e\xc1\x95\x5f\xf6\x3f\x0d\x8d\xf5\x4f\x57\xab\x12\xf7\xa4\xf7\x1f\xc0\x50\x65\x36\x38\x82\x0f\x48\x54\x30\x09\xa1\xf8\xdc\x80\x28\x3e\x87\xe5\x35\x0a\xdc\x3c\xc1\x5a\xb3\x69\x20\x86\xf3\x7f\x0b\x41\xe1\x3a\xa5\x96\x66\x60\x8a\x66\xc0\xe6\x62\x03\x55\x5a\xd4\x74\x59\xfa\xbf\x61\xeb\x25\xe6\x78\x14\xb6\xee\x05\x90\xd4\x44\x99\xe2\xf4\x83\x20\x10\xc2\x7d\x8a\x03\x0f\x57\x1d\x1d\xe3\xae\xf2\xcc\x2b\x05\x8c\x83\xc0\x84\x8b\x74\x6c\x64\x4a\x34\x61\x74\x4d\xe4\xc8\x42\x0f\x1b\x0f\x52\xd5\xf7\xa6\x99\x1e\x57\xd5\x31\x13\x84\xeb\xfa\xce\x0e\xe7\x93\x67\x31\x30\x5c\xfa\x63\x56\x71\x9d\xa9\xe6\x7f\xb0\xdb\xf5\x7c\xb0\xbb\x27\x3d\x14\xba\xba\x3e\x12\xc7\x20\x6f\xf2\xe8\x42\x88\x37\x5c\x63\x65\x02\x64\x8c\xe6\xa1\xad\xd5\x00\x65\xfb\x90\x69\x8c\x76\x40\xf3\x88\x84\x7c\xb1\x63\x4c\xc7\x28\x17\xb7\xa4\x28\x73\xf4\xd1\x7e\x6f\x75\x9a\x76\x7d\x8a\x4f\x66\x89\xa0\x0a\x05\x25\x1a\x30\xad\x7d\xd4\xc9\x5c\x67\xa6\x87\xcb\x92\x08\x52\x48\xf8\xf0\x91\x32\x85\x22\x23\x09\xd6\x4d\xbb\x94\x70\x96\x52\x45\x39\x83\x18\x3c\xcf\x56\x34\x47\xe6\x77\x1e\x02\xf8\x1e\xbe\xb1\x03\x82\x56\xcf\x04\x59\x14\xc8\x94\x76\x66\x27\x78\xbd\x92\x71\x01\x7f\x84\x80\x06\xb3\xa6\x01\xf5\x9b\x32\x96\xb3\xb5\x59\x0c\xa4\x2c\x91\xa5\x7e\x2f\x0a\x01\xa3\xee\x21\x30\xda\x34\x83\x47\x18\x31\x6e\x26\xa5\xd6\xc3\xac\x3d\x43\x6f\x6f\x9f\xb5\xb1\xf9\xf5\xc4\x9a\x36\x9d\x03\x8c\xe6\xa8\x96\x88\xec\x18\x27\x4f\x07\x4e\xcc\xbf\x75\x76\x4e\x63\xf0\xec\x05\xf1\xe0\x14\xda\x97\x97\xe8\x4a\xd0\xe2\x12\x33\xe5\x77\x82\x9f\x39\x65\xc3\xa3\x79\xe0\x05\x21\x78\x84\xa5\x7a\x20\x37\x4e\x6f\x2a\x14\xab\x10\x88\x58\xc8\xbe\x03\x98\x17\x97\xd7\xec\x4e\xf2\xf7\x4e\xfb\xdd\x84\x6d\x45\xa3\x28\xda\x3b\xcc\xc1\x70\x9a\xdb\xdd\x76\x06\xbb\x3a\xda\xeb\xde\x4e\xb1\xf3\xde\x61\x51\xaa\x15\xc8\x9c\x26\x78\x7c\xcf\x18\x1b\xff\x87\xbd\xe3\xf0\xfb\xfb\xe1\xe3\x56\xef\x18\x0d\x07\xfa\x9a\xe5\x54\x2a\xd8\x56\xb5\x0a\x7b\x6e\xbc\x51\xd9\x7d\xeb\xfb\xe5\xf1\xcd\x87\xf6\x75\x71\xf2\xf6\x9b\xc5\x9d\x0c\x60\x57\xef\x66\x01\xab\x73\x0c\x13\xb4\x16\x5b\x6c\x00\x13\x9f\x03\xd8\x61\x6c\xd2\x6c\x8b\x26\x79\xe3\x1e\xe1\x9e\xee\x0f\xd7\x55\xe2\xa1\x29\x06\xd6\xaf\xf2\xe6\x73\x27\xdb\xdc\x6f\x4e\xd8\x49\x44\xc3\x34\x4e\x76\xf5\x41\xf7\xd6\x08\x5f\xbf\x12\x0c\x33\x32\x54\xe8\x39\xca\x5e\x34\xff\xb1\x95\x6e\x91\x55\xcb\x32\xae\xf3\x57\x00\x00\x00\xff\xff\x0d\x10\xaf\xf5\xb0\x12\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 4784, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0xcd, 0xac, 0x5a, 0x18, 0xc4, 0x8f, 0x42, 0x69, 0x5, 0x1d, 0x26, 0xa8, 0xbc, 0x5c, 0xe3, 0x54, 0x2d, 0xff, 0x41, 0xea, 0x6f, 0x7e, 0x40, 0xaa, 0xff, 0xd5, 0x7, 0x74, 0x0, 0x3, 0x92}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"example.gotemplate": exampleGotemplate,
	"model.gotemplate":   modelGotemplate,
	"new.gotemplate":     newGotemplate,
	"repo.gotemplate":    repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"example.gotemplate": {exampleGotemplate, map[string]*bintree{}},
	"model.gotemplate":   {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":     {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":    {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
