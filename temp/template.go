// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/repository.gotemplate (12.794kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _repositoryGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x6f\xdb\xc8\x15\x3f\xd3\x80\xbf\xc3\x5b\x62\x11\x50\x09\x4b\x35\x46\xd1\x83\x10\xc5\x48\x62\xef\xd6\xad\x57\x59\xec\xba\xbd\x18\x46\x77\x44\x3e\x39\xb3\xa1\x66\xe4\xe1\x70\x6d\x81\xd0\xb9\x40\x8b\x02\xbd\xf5\x56\xa0\xb7\xbd\xb4\x40\x51\xf4\xd4\xcf\x93\x6d\xfb\x2d\x8a\xf9\x43\x8a\xa2\x48\xfd\xb3\x94\xba\x90\x75\x48\xc8\x99\x79\x6f\x66\x7e\xef\xf7\xfe\xcc\xd0\xed\x36\xbc\xe1\x11\xc2\x35\x32\x14\x44\x62\x04\xfd\x31\x24\x37\xf1\xdd\x35\xb2\x00\x4e\xde\x42\xef\xed\x05\x9c\x9e\x9c\x5d\x04\x87\x07\x23\x12\xbe\x27\xd7\x08\x59\x16\x7c\x69\x1e\x7b\x64\x88\x93\xc9\xe1\xc1\xe1\x01\x1d\x8e\xb8\x90\xe0\x1d\x1e\x00\x00\x64\x99\x20\xec\x1a\x21\x38\xd3\xcd\xc9\x64\x92\x65\x81\x1a\x68\x3a\x91\x45\xea\xa5\xa5\x04\xdb\x6d\xf8\xf7\x9f\xbf\xff\xf0\x87\xdf\x77\xb2\x2c\xb8\x20\xfd\xb8\x50\xda\x6e\x43\xc8\x87\x43\x64\x52\x75\x9d\x32\x49\xe5\xf8\x15\x63\x5c\x12\x49\x39\x53\x23\xe4\x78\xa4\x56\x03\xb6\xd3\x08\x42\x22\x45\x1a\x4a\xc8\x0e\x0f\x9c\x62\x1d\x66\xc0\x67\x14\xe3\xc8\x2c\x46\x3f\x5a\x81\xfc\xf5\x62\x3c\x52\xaf\xdf\x44\xfd\x8e\x9b\x65\xc1\x1b\x1e\xa7\x43\x66\xc6\xb8\xf0\x6d\xc2\x99\x6a\xfe\x5a\x8a\xcf\xa8\x48\xe4\x39\x4a\x89\xe2\x82\x9f\xf3\x5b\x14\x21\x49\x10\xca\x3a\x7d\x3e\xa4\x12\x87\x23\x39\x76\xbf\x81\x76\x1b\x3e\xfc\xe5\x8f\x3f\xfc\xf5\x1f\x1d\xb8\xac\xe8\xbd\x82\x7f\xfd\xed\x9f\x1f\xfe\xf4\xbb\xce\xb4\xc3\xac\xe2\x0a\x7e\xf8\xfb\xf7\xff\xf9\xcd\x6f\x8d\x88\xd6\x5c\xde\xfb\x95\xde\x9c\xc5\x51\x1b\x60\x90\xb2\x10\x7a\x78\x5b\x40\x65\x26\xf8\x0a\x47\xdc\x8b\xfa\xf0\x54\xd9\x34\x38\x79\xdd\x82\x9a\x01\x09\x95\x5c\x8c\x15\x62\xca\x3e\x02\x65\x2a\x18\x3c\x59\xb8\xd7\xaa\x8a\x5c\x58\xfd\xa2\x7e\x27\xea\xfb\xe6\x3d\x5f\x9e\x35\x55\xd3\xd4\x94\x49\x14\x03\x12\x62\xae\xe7\x0d\x4f\x99\xf4\x5a\xe0\x51\x26\x7f\xfa\x13\x1f\x50\x08\x2e\x5a\xa6\xef\x8c\x25\x28\xa4\xf7\xb4\xa2\xae\x7e\xf0\x2f\x47\x11\x91\xf8\x7a\x7c\x7a\x47\x86\xa3\x18\xe7\xa4\x6c\xbb\xbf\x9a\xb6\x13\x8c\x71\x05\x6d\xf5\xc2\x5f\x63\x8c\xa1\x5c\x45\xf8\xf2\xaa\xda\x97\x6b\xca\x32\x3a\x00\xc2\x22\xf0\x18\x42\xf0\xa5\xa0\x43\x22\xc6\xbf\xc0\xb1\x62\x0d\xb8\x6e\xab\xda\xae\xa4\x75\xbb\x22\x8a\x93\x83\x31\xed\xf7\x94\x33\xcf\x68\x99\x4c\xd6\xc4\x62\xb1\xb2\xc5\x50\x2c\x95\x6d\xc2\x61\x8e\xff\x96\x60\xeb\x50\x76\x1a\x28\x0c\x6b\x0b\x27\xb1\x2a\xdb\x6d\xc0\x3b\x0c\x53\x89\x30\x20\x34\xce\x1d\xe3\x47\xcf\xb5\x01\x50\x88\x99\x21\x49\x1a\x86\x98\x24\xf9\xa8\x50\x11\x18\x04\xbf\x4d\xf4\x68\x46\x63\xeb\xa3\x9e\x50\x73\x3f\x5d\x6b\xa9\xad\x06\x7f\xb0\x6b\xff\x8e\x08\x3b\x9f\xee\xd5\x6d\x0e\x0a\x01\x9d\x2e\xa8\xd9\x82\xa8\x1f\x7c\x8e\xd2\x7b\xa2\x07\xf9\xe0\x26\x1a\x7e\x23\xe3\x3d\x6d\xc1\x40\xf0\x21\xcc\xc6\x5f\xd7\x58\xca\xa1\x03\x35\x17\x7c\xd2\x55\x5b\xb0\xf3\x39\x4e\x01\x85\x6f\x70\x50\x8d\x26\xbc\x3b\xe5\xfd\xfb\x7a\xdb\xf7\x07\x93\x0c\x06\x18\xaa\xe4\xb4\x35\x3c\x6d\x0c\x59\x59\x0a\x96\xf9\xc4\x34\x7a\x26\x69\x2c\x75\x6b\x19\xfe\xd3\x3b\x0c\x3d\x97\xea\x59\x95\x95\x78\x05\x6e\x2f\xcb\xbe\xe5\x94\x41\x29\x3b\x24\xe0\xfa\xe0\xaa\x99\xbe\x23\x71\x8a\xe0\x65\x59\x3f\xa5\x71\xf4\x2b\xf5\xf6\x33\x1e\x47\x33\x83\x27\x93\x96\x5b\xa4\xbb\x99\x76\x7f\xd1\x26\x3f\x9d\xd9\x54\x90\x65\x03\xca\xa2\x2f\xc8\x08\x82\xa2\x4b\x27\x9f\x2f\xc8\x48\xe5\x4d\xed\x71\xca\xf9\xe6\x68\x51\xe6\x84\xb6\xa6\xe2\x43\xde\x66\x40\x09\xbe\xe2\xb7\xc9\x2b\x6b\x4a\xaf\x65\x89\x71\xaf\x88\xf6\xc0\x58\x55\x13\x5f\x47\xc5\x23\xd4\x85\xda\x8f\x4c\xc0\x54\x2f\xb0\xc2\x3d\x48\x50\x42\x2d\xff\xba\xc7\x9a\x81\xdd\x63\xb8\x7d\x87\x02\x67\x77\x50\xae\x63\xa0\x0b\xc7\x1f\x8b\x7e\xfe\x14\x52\x9b\x4d\xea\x62\x14\x94\x4a\x99\x9c\x92\xb6\x20\x29\xf5\x2c\x22\xe6\x03\xe3\x56\x4d\xba\x5d\xcc\xad\x8d\x08\x12\xe9\x59\xea\x12\xc2\x4a\x14\xf0\x61\x13\xe3\xc0\xf6\xac\xa3\xe6\x58\x64\x9e\x7e\x2a\x81\x71\x10\x18\x72\x11\x55\x85\xb4\x89\x6a\x84\xde\x91\xa4\x22\x11\x11\x49\xb6\x62\xd5\x9a\x42\x68\xa9\x55\xe7\x6a\xa2\xa9\x7d\x9d\xd5\xe3\x49\xa7\x0b\x0c\x6f\xbd\x6a\x54\x39\x3c\xa8\xab\x1c\x56\x56\x3b\x2d\x2e\x9a\x13\xda\xb6\xd8\x95\x27\xa1\x6e\x57\x9d\x58\x83\x53\x21\x7a\x5c\x71\xa5\x86\x64\x8c\xc6\xbe\xb1\x55\x89\x65\xcb\x98\xa9\x85\x1a\xa8\xb9\x06\x20\x79\x0d\x54\xd4\xab\x0f\x2e\xb4\x54\xcf\x48\x68\xfe\x9f\x4b\x39\xf9\x59\x69\xfb\x49\x2b\x14\x54\xa2\xa0\x44\xf1\xce\xce\x1e\xe4\x6d\x66\x84\xaa\x71\x47\x44\x90\x61\x02\x97\x57\xc5\x71\x31\xd3\x70\xce\x5c\x39\xcc\x24\x1f\x2b\xd1\x05\x32\x1a\x21\x8b\x3c\xf3\xbe\xbd\x94\xd4\xaa\x5c\x69\x40\x51\x8d\xb3\x88\xaa\xa3\x3a\x74\xc1\x75\x0b\xba\xc5\xc8\xbc\x7c\x5b\x2d\x78\x09\x3f\x2e\xb3\x4e\xc9\x0d\x04\xb9\x1e\x22\x93\x6a\x93\x89\x14\x94\x5d\x4f\xfb\x07\x5c\xc0\xaf\x7d\x40\xed\x9b\x7a\xaf\x05\x6a\x25\x2d\x7a\x64\xa1\xa5\xd8\x78\xd1\xe4\x03\x06\xf9\x4b\x6b\x56\x8c\x0e\xe0\x13\x0c\x18\xd7\x05\x66\x55\xa7\xfa\x35\xa0\x09\x18\xe8\xa7\xe7\x15\x7d\x93\x39\xf5\x18\xf4\x51\xde\x22\xb2\x4d\xa7\x38\x6a\x9e\xa2\xf4\x38\x45\xff\x59\x17\x5c\x13\x59\x5c\x78\x06\x06\xd1\x24\xb8\x10\x74\x78\x8e\x03\xe9\xe5\x0d\x3f\xe7\x94\x95\x21\x72\xc1\x6d\xf9\xe0\x12\x16\xd9\x63\x50\xae\xfd\x26\x45\x31\xf6\x81\x88\xeb\xa4\x48\xa0\xfa\xd0\x78\xc6\xee\x51\x5c\xb9\xcf\x8a\x15\xfb\x16\x81\x20\x08\xee\x95\x3f\x9b\x53\x7c\x69\x0b\xf7\x9d\xe4\xff\xb5\x84\x5a\x31\xce\xd5\x05\x2b\x67\x71\xa4\x72\x9a\xc3\x94\x53\x17\x17\x9c\xa6\xa0\xe0\x38\x4d\xe1\xc0\x71\x16\x07\x02\xc7\x71\xd6\xf0\x7f\xc7\x71\xe6\xdc\xde\x71\x1c\x67\x05\x57\x77\x1c\x7d\xc4\xd3\x0a\xe6\x1d\x7b\x05\x25\x47\x25\x25\xfa\x9f\x2d\xfb\xad\x56\xba\xd0\x63\x17\x54\xbb\x8d\x3e\xb9\xf8\xe8\x0b\xe5\xb3\xef\x1a\x4e\xb8\x86\xd6\xa5\x5e\xd7\xe8\x77\xfa\x42\x1a\x92\x98\x86\xb8\x7e\x91\x5c\x15\xfe\x1f\x16\xcb\xab\xfb\x6f\xf3\x45\x6a\x1e\xe4\x94\x9b\xc5\x34\x91\x30\x3f\xd4\x0c\x58\xe2\xf1\x7a\x48\xb3\xd7\x17\xdd\x75\x15\x41\xa3\xf7\xeb\xce\xc6\x08\x60\x7a\x97\x97\x03\xeb\x45\x02\x2b\xb1\xb4\x08\xd8\xa0\x10\xa8\x29\x06\x56\x2e\x08\x36\x28\x0a\x6a\xa6\xcb\x2d\xb1\xed\x10\x03\xd3\x8b\x4f\x58\x5a\x1f\x6c\x76\x30\x5a\x58\x1c\x2c\xcc\xdd\xa5\x24\xad\x18\x3e\xbd\x03\x29\x23\x52\x1e\x50\xc4\x28\xe3\x68\xde\x13\xd3\x3a\x17\xac\x6c\x94\xa9\xfb\xa6\x63\x5d\xaf\xfc\x11\xae\xa0\xa5\x66\x70\xde\x5a\x50\x53\xaf\x66\x9a\xdc\x0c\x81\xf2\xad\xcd\x24\x50\xd3\x77\x54\xdf\x97\x33\x56\xff\xfa\x9c\xc7\xaa\x71\x86\x5c\xb6\x71\xe6\x83\x99\x87\x77\x2a\x7a\x7c\x5a\x1f\x3e\xde\xc4\x48\x84\xd7\x6a\x1c\xa1\x37\x82\x77\x45\x34\x80\xee\x43\xd9\x63\x56\x4a\x15\x78\x57\xdc\xb4\xd6\x7e\x0d\x5d\x09\x8a\x57\x2c\x9a\xfd\x6a\x7a\x96\xf4\xd2\x38\x5e\x0f\x1c\xeb\xbe\xa5\x46\x1f\x1e\x06\x5c\xf9\xcc\x1d\xed\xd9\x50\xf9\x4a\x0b\x34\x01\x96\xc6\xb1\xeb\x83\xd5\xd9\x91\x22\x45\x7d\x59\x52\x05\x79\x43\x2c\xb9\xdc\x33\x38\xb9\xdc\x29\xa4\xa7\x37\x29\x89\x2f\xb8\x49\x15\x95\x2f\xfc\xfb\x01\xb2\xbd\x30\xd3\xeb\xe8\x98\xff\xb7\x86\x6e\x8f\xcb\x47\x80\x5f\xbc\xdc\x21\xc2\x9f\x0b\x24\xaa\x20\x7e\x47\xd8\x1e\x43\xfc\x91\x10\x7e\x2b\x1e\xd9\xfc\x72\xb5\x78\xb1\x09\xd2\xe7\x98\x24\x7b\x4e\xe4\x17\x3b\x24\x72\x0e\xef\x23\x8b\x27\xf0\x62\x97\x59\xef\x2c\x67\xf0\xe5\xd5\x3e\x62\x4b\x19\x78\xc7\xad\x5d\xd6\x14\x7b\x0e\xb0\xaa\x89\x77\x0c\xf2\x6b\xb3\x2e\xcf\x6e\x76\x16\x65\x3b\xe9\xd1\x5e\x46\x0e\x2b\x04\xc7\xfa\xa6\x72\x2e\x88\x3c\xf7\xcd\x32\xec\xeb\x91\x5f\x9e\x64\xbb\x47\x97\x1e\x97\x8f\x66\x5a\xe4\x23\xbb\x31\x95\xfe\x3b\x34\xbc\x81\x29\xa6\xe0\x9a\x9d\xbb\x9b\xde\x91\x9c\xd3\xf7\xb8\xc7\xc9\x38\xa6\xef\x71\x67\x45\x65\x8f\xcb\x3d\x87\x57\xb9\xc2\xca\x10\x97\xfe\xf8\xc4\x3e\xfe\x37\x00\x00\xff\xff\x4a\x6f\xb1\x7f\xfa\x31\x00\x00")

func repositoryGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repositoryGotemplate,
		"repository.gotemplate",
	)
}

func repositoryGotemplate() (*asset, error) {
	bytes, err := repositoryGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repository.gotemplate", size: 12794, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0x54, 0x36, 0x15, 0x41, 0x1d, 0xa7, 0x82, 0xc9, 0x76, 0x6d, 0xf0, 0xcc, 0xe5, 0x46, 0x9, 0x46, 0x7d, 0xa0, 0x3b, 0x5d, 0x30, 0x57, 0x94, 0x6e, 0x58, 0x3f, 0x4d, 0x86, 0x34, 0x21, 0x85}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"repository.gotemplate": repositoryGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"repository.gotemplate": {repositoryGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
