// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/model.gotemplate (430B)
// repository/new.gotemplate (1.053kB)
// repository/repo.gotemplate (8.523kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xfc\x40\x10\xc6\xeb\x7f\x20\xef\x30\xa4\xfa\xdb\x64\xfb\x74\x22\x1e\x08\x87\x08\xa6\x93\xc0\xed\x25\xcb\x11\x4d\x76\xc3\xee\x1c\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xae\x51\x10\xb1\xf2\x79\x72\xea\x5b\xc8\xee\x5e\xce\xe3\xba\xd9\xf9\xe6\xf7\xcd\x7e\xd3\xf1\xf2\x8a\x2f\x04\x10\xa5\x67\xa1\x3c\xe5\xad\xb0\x36\x8e\xe2\xa8\x6e\x3b\xa5\x11\xfe\xc7\x11\x00\x00\x91\xe6\x72\x21\x20\x3d\xf1\x6d\x63\x6d\x42\x94\x5a\x9b\x8c\xb2\x90\x95\xe3\x0e\x1c\xba\x1d\x3e\x96\x58\x63\x6f\x9c\xc0\x18\x7c\x3f\xaf\x86\x87\xfb\x8c\x28\xcd\xf9\xbc\xd9\xae\x62\x0c\x4a\xd5\xb6\x42\xa2\x93\x02\x72\x28\xa5\x42\x8e\xb5\x92\x6e\x02\xfb\xce\xfd\x71\xf4\x0b\x20\x18\xd4\xcb\x12\x81\xe2\xe8\xdf\xde\xc2\x49\x2d\x9a\xca\x58\x4b\x94\xfa\x72\x03\x8c\xcf\xbc\xef\xdc\x73\x56\xcd\x33\x17\xe2\x48\x35\xcb\x56\x86\x99\x04\x2e\x8d\x92\xae\x7d\x8e\x7a\x52\x6b\x83\x53\x81\x28\x74\xae\xa6\xea\x5a\xe8\x92\x1b\x01\xbb\x9e\xc9\x0c\x18\x83\xe1\xe5\x71\xfd\xfa\x91\xc1\xc5\x9e\x5b\x01\x5f\x6f\x9f\xc3\xd3\x5d\xf6\x27\x84\xdd\x05\xac\xdf\x57\x3f\x37\xb7\x01\xf1\x7e\xbb\x89\x0b\x1f\x69\x73\x51\xeb\xee\xe9\xeb\xdf\x00\x00\x00\xff\xff\x7b\x11\x98\x32\xae\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 430, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2a, 0x1c, 0xf4, 0x15, 0xa1, 0x64, 0x1, 0x13, 0x93, 0x78, 0x34, 0xb7, 0x33, 0x71, 0x30, 0x32, 0xc3, 0xef, 0x80, 0x3f, 0x36, 0x41, 0x8d, 0xe3, 0xf, 0x5a, 0x74, 0x75, 0x35, 0x8b, 0x89}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x6b\xdc\x30\x10\xc5\xcf\x59\xd8\xef\x30\xf8\x50\xe4\xe0\x78\x2f\xa5\x87\x1c\xd3\xa4\x10\x1a\x42\x68\xd2\x53\x29\x45\xb6\x27\xae\x5a\x5b\xf2\x8e\xc6\x4d\x84\xd0\x77\x2f\x5a\x3b\x59\xd7\xf1\xd2\xbd\x59\xf3\xe7\xf7\xde\x93\x70\x27\xcb\xdf\xb2\x46\xf0\x3e\xbf\x1b\x3e\x6f\x65\x8b\x21\xac\x57\xeb\x95\x6a\x3b\x43\x0c\x62\xbd\x3a\xf9\x01\x49\xad\xf8\x67\x5f\xe4\xa5\x69\x37\xb5\x39\xb3\xdb\xe6\xac\x22\xf5\x07\x69\xd3\x3a\xbb\x6d\x92\xf5\xea\x64\x3a\xf2\xab\x35\x8a\x8c\xde\xd8\x6d\xf3\x9c\x44\x18\x00\x80\xf7\x24\x75\x8d\x90\x5f\xef\xc8\x36\x84\xc4\xfb\x3c\x84\xe4\xa5\x8d\xba\x8a\xd2\x69\x5c\x60\xd7\x21\x7c\xc1\xce\x58\xc5\x86\x1c\x58\xa6\xbe\x64\xf0\x33\xd4\x95\x66\xc5\xce\x86\x10\x23\x0c\x87\x21\x41\x5c\x5d\xaa\x0d\xb8\x99\xe2\x2e\xef\x63\xaf\x4b\xb8\xc5\xa7\x38\x25\xaa\x02\x4e\xa3\xf9\xfc\xf2\x22\x9d\xda\x18\xf5\x09\xb9\x27\x3d\x69\x8c\xf5\xe3\xbd\x9d\x47\xa9\x85\xba\xa8\x8a\x34\x9b\xc2\x46\x8b\xf1\x30\x38\x7d\xcb\xdf\x7b\x5f\x06\x4e\xa2\x1c\xbc\x91\x59\xb2\x77\xde\xdf\x33\x7d\x52\x64\xf9\x06\x99\x91\x1e\xcc\x8d\x79\x42\x2a\xa5\x7d\x55\x9e\x5e\xf4\xde\x71\x55\x9c\x57\x45\xf6\xaf\xe1\x31\xc3\xb2\xf7\xdd\x4b\x1f\xf6\xa5\x34\x23\x3d\xca\x12\x5f\x44\x3e\x9a\x5e\xb3\x48\x41\x28\xcd\x1f\xde\x67\x80\x44\x86\xd2\xa1\x77\xad\x2d\x12\x8b\xd3\x19\x6e\x79\xf8\x6b\x57\x49\xc6\x0b\x77\x47\xaa\x95\xe4\x3e\xa3\x13\xf1\x3f\x78\x3d\x3d\xb8\x0e\x43\xc8\x8e\x83\x5d\x62\x83\xff\x87\x2d\xef\xde\x63\x83\x25\x1f\xb1\x3b\xb7\xb2\x8c\xb9\x7a\x96\x6d\xd7\xe0\x9b\xe9\xb1\x9e\x82\xf8\xf6\xfd\x30\x69\xff\x60\x7f\x03\x00\x00\xff\xff\x46\xb9\x52\x24\x1d\x04\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 1053, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0xd2, 0x44, 0x9b, 0x1d, 0xeb, 0x54, 0x21, 0xba, 0x11, 0xb0, 0xab, 0xf5, 0x91, 0xbd, 0xf0, 0x3d, 0x77, 0xf9, 0x81, 0x8d, 0x68, 0xc6, 0xc7, 0xc5, 0x85, 0x4b, 0x8b, 0x43, 0xd7, 0xf7, 0x1c}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdf\x6f\xdb\xb6\x13\x7f\xb6\x01\xff\x0f\x57\xa1\x28\xa4\x56\x5f\xe5\x9b\x60\xd8\x43\x50\x35\xe8\x8f\xb4\xcb\x96\x65\x45\x9b\xed\x25\x08\x06\x5a\x3a\x25\xec\x28\x52\x21\xa9\xc6\x86\xa0\xff\x7d\x20\x29\xc9\xb2\xe3\xfc\x9c\xdd\x75\x70\x92\x87\xda\x77\xbc\x3b\xf2\x73\x1f\x1e\xef\x8a\x14\x24\xf9\x8b\x9c\x21\x54\x55\xf4\xd1\x7d\x3c\x22\x39\xd6\xf5\x68\x68\x7e\x69\x5e\x08\xa9\xc1\x1f\x0d\x01\x00\xbc\x94\x68\x32\x26\x0a\xb7\xd4\x05\xf3\x46\xc3\x81\x77\x46\xf5\x79\x39\x8e\x12\x91\x6f\x7d\xc9\x05\x95\x82\x1b\xd5\xc4\xea\x94\x96\x94\x9f\x29\xcf\xf8\x31\xd6\x55\x25\x09\x3f\x43\x88\x0e\xac\x53\x55\xd7\x5e\x55\x45\x75\xed\xb5\x6a\xe4\xa9\x89\x1b\x18\x03\x3d\x2d\xcc\x9e\x3e\x6b\xf9\x9e\x4a\xa5\x0f\x51\x6b\x94\xc7\xe2\x50\x5c\xa2\x4c\x88\x42\x88\xf6\xb9\xa6\x7a\xea\x36\xfb\x09\x0b\x01\x4a\xcb\x32\xd1\x50\x39\x77\xe9\x18\x9e\x9b\xad\x44\xef\xde\x8c\x86\x75\xcf\xe5\x9c\xe1\xfe\x84\xe4\x05\xc3\x9e\xed\xe0\xad\xa4\x1a\x25\x25\x70\x72\xda\x93\x0e\xde\x4b\x72\x96\x23\xd7\xc6\x37\xb8\xa3\x19\xf1\x47\x22\x49\xbe\x0d\xee\x87\x72\x8d\x32\x23\x09\x56\x75\xa7\xdb\x59\xae\xe3\xe2\x0f\xc2\x4a\x74\xba\xb1\x10\xcc\x08\xc7\xa8\x2f\x11\xb9\xd3\x34\xc2\xba\xd9\xfd\xd6\x16\xe0\x04\x93\x52\x23\x64\x84\x32\x90\xa8\x4b\xc9\xe1\x7f\xdb\x40\x78\x0a\x28\xe5\xdc\x12\x55\x26\x09\x2a\xd5\xae\x4a\x44\xc9\x35\x48\x71\xa9\xec\x6a\x4e\xd9\x68\x98\x95\x3c\x01\x5f\x1a\xe4\x9e\xdf\x0b\xe8\x00\xde\x1a\x77\x7e\x00\x3e\xe5\xfa\xc7\x1f\x42\x13\x5d\xc8\xa0\x41\xfe\x2b\x91\x4d\x3c\xab\xb5\xb2\x01\x4a\x09\xbb\x31\x98\x68\x51\x3a\x8e\x3e\xa0\xf6\x9f\xd9\x45\x21\x78\x0a\x19\x26\xda\xd9\xf8\xcf\x03\xc8\xa4\xc8\x4d\x9e\x8e\xc9\x98\x35\x64\xf4\x02\xe7\x86\x66\x26\x16\x3c\x89\xcd\x11\x9a\x78\x83\x41\x07\x45\xe8\x70\x30\xc2\xda\xfd\xd3\x3f\x7f\x68\x8f\xfd\xcf\xc1\x24\x59\x86\x89\xc6\x74\x75\x78\x1e\x70\x85\x52\xfb\x77\xb6\x32\x01\xe6\x04\xd7\xa4\x02\x24\xaa\x92\x69\x2b\xed\xc3\xbf\x3f\xc1\xc4\xf7\xa8\x8d\x6a\xb2\x24\x16\xe0\xf6\xab\xea\x8b\xa0\x1c\xa2\xb7\x82\x95\x39\x37\x42\x05\x5e\x08\x9e\x89\xf4\xd5\xb2\xd3\xaf\xaa\x71\x49\x59\x6a\xb9\xfa\x93\x60\xe9\xdc\xe2\xba\x0e\xbc\xee\xba\xcf\xc9\xc3\x9b\x0e\xf9\x74\xee\x50\x51\x55\x65\x94\xa7\xbf\x92\x02\xa2\x4e\xf5\x9e\x22\x33\xa2\xba\x6e\xea\x45\x30\x1a\x5e\xa5\x45\x9f\x13\x36\x9b\x86\x0f\xad\xcc\x81\x12\x7d\x12\x97\xea\x75\x93\x4a\x3f\xf8\x3e\x89\xf1\x7b\x91\x12\x8d\x6f\xa6\x1f\x25\xcd\x89\x9c\xfe\x82\x53\xbf\xe8\x3e\xda\x92\xdd\x7d\x3b\x9e\x16\x78\x0b\xbc\x6b\xe0\x50\x69\x37\xb8\x40\x1f\x50\xa8\x61\x29\x85\xe2\x3d\x4b\xa2\x78\x0f\x2e\xcf\x51\xe2\xfc\x09\x66\x2b\xeb\x1a\x62\xd8\xfb\x56\x0c\x0a\x67\x90\xba\x32\x03\xcb\xca\x0c\x38\x2c\xe6\x58\x65\x44\x75\x8b\xd2\x7f\x8d\x5b\xef\x90\xe1\xbd\xb8\xf5\x20\x82\xa4\x36\xca\xb2\x9a\x7e\x27\x0a\x84\xf0\x90\xe4\xc0\xea\xb2\x63\x62\xdc\x94\x9e\x71\xa9\x81\x0b\x90\x98\x08\x99\x2e\x1a\xd9\x14\x2d\x31\x3a\x27\x6a\xc1\xc2\x34\x56\x2b\xc9\xea\x67\xfb\x98\xde\x2f\xab\x8b\x95\x20\x9c\xe5\x77\x70\xf7\x7a\xb2\x1b\x03\xc7\x4b\x7f\xb1\xaa\x8c\x86\xcb\x1e\xff\x3b\xbb\x9d\xf5\x07\xd7\xbf\x49\xab\x62\x57\xfb\x8e\xc4\x31\xa8\x0b\x16\xed\x4b\x79\x24\x0c\x57\x96\x90\x8c\x53\x16\xba\x5c\xf5\x58\x76\x1b\x33\xad\xd1\x35\xd4\xbc\x07\x20\xb7\xb6\x31\x98\x17\x7a\x0a\x8a\xd1\x04\xef\xcf\xdd\x45\xe3\x7f\x91\xc3\x4d\x73\xee\x63\xd3\xa4\x2f\xf2\xb4\xd1\x07\xe0\x9f\x9c\x5e\xe1\xf0\x42\x91\x32\x5d\x29\xa3\x4a\xc3\xd5\xa5\x6e\xc1\x20\x69\xfb\xfe\xdd\x18\x9a\x88\x51\x3b\x0b\x34\x4b\x8c\x93\xc2\x34\xf5\x0a\x4e\x4e\xe7\x1a\xfa\x4e\x9d\x08\x9e\x52\x4d\x05\x87\x18\xbc\x66\xb2\x31\xbc\x62\xc8\xfd\x36\x42\x00\xaf\xe0\xff\xed\xc6\x06\xd6\x2c\x6b\xa6\x0b\xe5\xa6\x0e\x3b\x5c\x38\x6d\x26\x24\xfc\x19\x02\xda\x1b\x64\x9f\xc3\x6e\xa3\x9d\x87\xc1\xcc\x3c\x06\x52\x14\xc8\x53\xbf\x13\x85\x80\x51\x3b\xbc\x04\x9d\x05\xcd\xe0\x09\x46\xed\x14\xd2\xe3\x6a\xff\xa7\x39\x6b\xe7\xd3\x7d\x37\x0e\xdd\xd8\x13\x5c\x35\xab\xaf\x8a\xcc\xb5\x88\xe6\x46\x9b\x87\x85\xdb\xb9\x3d\x5c\x9b\x89\xc1\x2c\x0d\x2f\x62\xf0\x5c\x2d\xf0\xe0\x45\x33\xb8\xa9\xe8\x58\xd2\xfc\x10\x33\xed\xb7\x82\x9f\x05\xe5\x7d\xcc\x3c\xf0\x82\x10\x3c\xc2\x53\xaf\x05\xad\x17\xeb\xa2\x44\x39\x0d\x81\xc8\x33\xd5\xbd\x7b\x76\xd8\x3c\xe0\xfe\x03\xeb\x95\xf7\xa2\xdb\x73\xd8\x20\x11\x45\x51\xef\xc8\xd7\x56\x97\x5e\x15\x31\x0c\x9f\xb5\x26\x7d\x44\xfa\x0b\xba\x4a\xec\x2e\x9a\xff\xcc\x49\x7b\x87\x72\x91\x6d\x8d\xe9\x9a\xb0\x5e\xf7\xa4\xcc\xa5\x71\x17\x1c\x27\xe6\x5a\x3e\x5d\x7e\x2f\x5f\xf3\xb4\xaa\x22\x6b\xe2\x34\x07\xea\xa8\x64\xcc\x0f\xae\xb5\xb1\x6f\x0e\x4e\xba\x8b\x37\x23\x43\x4f\x18\xc2\x77\x31\x98\x57\x6d\xe4\x5d\xcb\x13\x93\xd0\xb9\x17\x86\x2a\xe0\x25\x63\x5e\x08\x8d\xcf\x5d\x2d\x4b\xb4\x2f\x62\x5b\x6b\x27\x0d\xc8\x0f\xc4\x52\xe8\x0d\x83\x53\xe8\xb5\x42\xba\x7f\x51\x12\x76\x2c\x5c\xe1\x81\x56\xd7\xf6\x49\x9b\x00\xb2\xeb\x8a\xdc\x3e\x76\x5d\x19\x5a\x19\xba\x47\x42\x3f\x02\xfc\xf2\xd5\x1a\x11\xfe\x20\x91\x98\xf6\xea\x9c\xf0\x0d\x86\xf8\x1b\x21\xfc\x9b\x7c\x64\xf3\xab\xbb\xd5\x8b\x87\x20\x7d\x88\x4a\x6d\x38\x91\x5f\xae\x91\xc8\x2d\xbc\x8f\x2c\xae\xe1\xe5\x3a\x5f\xbd\x83\x96\xc1\x27\xa7\x9b\x88\x2d\xe5\xe0\xef\x05\xeb\xec\x29\x36\x1c\x60\xd3\x13\xaf\x19\xe4\x37\x6e\x5f\x0e\xe6\xed\x85\x12\xd1\x0c\xab\x3b\x1b\x59\x39\x1a\x23\xd8\xb3\xff\xef\x75\xa5\x88\x6c\x87\x6e\x1b\xcd\xd7\x9d\xb0\x1f\x64\xb5\xa3\xcb\x91\xd0\x8f\x69\xba\xe9\x8e\xac\x27\x55\xdd\x1f\x2d\x98\xdf\xbf\x03\x00\x00\xff\xff\x78\x95\xd4\x62\x4b\x21\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 8523, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0x84, 0x54, 0xf4, 0xd7, 0x56, 0x3f, 0x9b, 0xd9, 0xa, 0x75, 0x6f, 0xcf, 0x48, 0xe9, 0x8f, 0xe9, 0x18, 0x65, 0x5a, 0x1f, 0x39, 0x5, 0x26, 0x2b, 0xc0, 0xad, 0x42, 0x1, 0xe2, 0x9c, 0x7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model.gotemplate": modelGotemplate,
	"new.gotemplate":   newGotemplate,
	"repo.gotemplate":  repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"model.gotemplate": {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":   {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":  {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
