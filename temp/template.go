// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/repository.gotemplate (12.658kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _repositoryGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x6f\xdb\xca\x11\x3f\xd3\x80\xbf\xc3\x3c\xe2\x21\xa0\x1c\x96\x6a\x8c\xa2\x07\x21\x8a\x91\xd8\x7e\xa9\x5b\x47\x09\x12\xb7\x17\xc3\x68\x56\xe4\xc8\xd9\x84\xda\x95\x97\xcb\xd8\x02\xa1\x73\x81\x16\x05\x7a\xeb\xad\x40\x6f\xb9\xb4\x40\x51\xf4\xd4\xcf\x93\xb4\xfd\x16\xc5\xee\x92\x14\x45\x91\xfa\x67\x29\xcf\x81\xac\x43\x4c\xee\xee\xcc\xec\xfc\xf6\x37\x7f\x48\xa6\xd9\x84\x43\x1e\x20\x5c\x22\x43\x41\x24\x06\xd0\x1d\x42\x74\x15\xde\x5c\x22\xf3\xe0\xe8\x25\x74\x5e\x9e\xc1\xf1\xd1\xc9\x99\xb7\xbb\x33\x20\xfe\x07\x72\x89\x90\x24\xde\x2b\x73\xd9\x21\x7d\x1c\x8d\x76\x77\x76\x77\x68\x7f\xc0\x85\x04\x67\x77\x07\x00\x20\x49\x04\x61\x97\x08\xde\x89\x1e\x8e\x46\xa3\x24\xf1\xd4\x42\x33\x89\x2c\x50\x37\x0d\x25\xd8\x6c\xc2\x7f\xff\xfa\xe9\xf3\x9f\xfe\xd8\x4a\x12\xef\x8c\x74\xc3\x5c\x69\xb3\x09\x3e\xef\xf7\x91\x49\x35\x75\xcc\x24\x95\xc3\xa7\x8c\x71\x49\x24\xe5\x4c\xad\x90\xc3\x81\xda\x0d\xa4\x93\x46\x10\x22\x29\x62\x5f\x42\xb2\xbb\x63\xe5\xfb\x30\x0b\x7e\xa0\x18\x06\x66\x33\xfa\x32\x15\xc8\x6e\xcf\x86\x03\x75\xfb\x36\xe8\xb6\xec\x24\xf1\x0e\x79\x18\xf7\x99\x59\x63\xc3\xfb\x88\x33\x35\xfc\x46\x8a\x1f\xa8\x88\xe4\x29\x4a\x89\xe2\x8c\x9f\xf2\x6b\x14\x3e\x89\x10\x8a\x3a\x5d\xde\xa7\x12\xfb\x03\x39\xb4\xdf\x42\xb3\x09\x9f\xff\xf6\xe7\x2f\x7f\xff\x57\x0b\xce\x4b\x7a\x2f\xe0\x3f\xff\xf8\xf7\xe7\xbf\xfc\xa1\x35\x9e\x30\xbb\xb8\x80\x2f\xff\xfc\xf4\xbf\xdf\xfd\xde\x88\x68\xcd\x45\xdf\x2f\xb4\x73\x29\x8e\xfa\x00\x7a\x31\xf3\xa1\x83\xd7\x39\x54\xc6\xc0\x6b\x1c\x70\x27\xe8\xc2\x9e\x3a\x53\xef\xe8\x59\x03\x2a\x16\x44\x54\x72\x31\x54\x88\xa9\xf3\x11\x28\x63\xc1\xe0\xc1\x4c\x5f\xcb\x2a\x32\x61\xf5\x0b\xba\xad\xa0\xeb\x9a\xfb\x6c\x7b\xe9\x51\xd5\x99\xa6\x4c\xa2\xe8\x11\x1f\x33\x3d\x87\x3c\x66\xd2\x69\x80\x43\x99\xfc\xf9\xcf\x5c\x40\x21\xb8\x68\x98\xb9\x13\x16\xa1\x90\xce\x5e\x49\x5d\xf5\xe2\x5f\x0f\x02\x22\xf1\xd9\xf0\x95\xa0\x7d\x22\x86\xbf\xc2\xa1\xa3\xf8\x9b\xdf\x19\xb8\xdd\xc5\x94\x1d\x61\x88\xf3\x95\x55\xcb\xbe\xc1\x10\x7d\xb9\x80\x6c\x79\x2b\xd5\xfe\x1c\xdf\x90\xfe\x20\xc4\xa9\xd5\xe9\xf8\x92\x0e\xcd\xd1\x36\xdb\xa3\xf9\xc2\xe7\x17\xf5\x4e\x15\xe9\xb1\x0c\xe1\xc6\x61\x6e\x38\x97\x53\x3c\x55\xd9\x6c\x02\xde\xa0\x1f\x4b\x84\x1e\xa1\x61\x46\xeb\x9f\x3c\x02\xc2\x02\x65\x7d\x62\x49\x14\xfb\x3e\x46\x51\xb6\xca\x57\xf4\x03\xc1\xaf\x23\xbd\x9a\xd1\x30\x8d\x30\x47\x28\xdb\x7b\x4b\x6d\xb5\x51\xc3\xe6\x74\xef\x1f\x89\x48\xed\xe9\x59\x3d\x66\xa1\x10\xd0\x6a\x83\xb2\xe6\x05\x5d\xef\x39\x4a\xe7\x81\x5e\xe4\x82\x1d\x69\xdc\x8d\x8c\xb3\xd7\x80\x9e\xe0\x7d\x98\xcc\x9e\xb6\x39\x22\x8b\xf6\x94\x2d\xf8\xae\xad\x5c\x48\xed\x59\x56\x0e\x85\x6b\x70\x50\x83\x26\x39\x5b\x45\xff\x5d\xed\xf6\xed\xc1\x24\xbd\x1e\xfa\xaa\xb4\xac\x0d\xcf\x34\x03\x2c\x2c\x05\xf3\xa2\x61\x9c\xfb\xa2\x38\x94\x7a\xb4\x08\xff\xf1\x0d\xfa\x8e\x4d\xb5\x55\x75\x4a\xbc\x04\xb7\x93\x24\xef\x39\x65\x50\xc8\xed\x11\xd8\x2e\xd8\xca\xd2\x47\x12\xc6\x08\x4e\x92\x74\x63\x1a\x06\xbf\x51\x77\xbf\xe0\x61\x30\xb1\x78\x34\x6a\xd8\x79\xb1\x9a\x18\x77\x67\x39\xf9\xfd\x84\x53\x5e\x92\xf4\x28\x0b\x5e\x90\x01\x78\xf9\x94\x2e\x1d\x2f\xc8\x40\x55\x3d\x5d\x2f\x1a\xbb\x3b\xd3\xb4\x28\x72\x42\x9f\xa6\xe2\x43\x36\x66\x40\xf1\x5e\xf3\xeb\xe8\x69\x7a\x94\x4e\xe3\x6e\x12\xa3\x22\xdb\x0f\xf2\x4b\xa8\x4a\xfc\x5f\x99\x43\xb1\xde\x60\x89\x3e\x10\xa1\x84\x4a\x0a\xb5\x0f\x34\x89\xda\x07\x70\xfd\x0e\x05\x4e\x7a\x50\x6c\x24\xa0\x0d\x07\x5f\x8b\x41\xee\x18\xd2\xb4\x12\x54\xa5\x19\x28\xf4\x12\x19\xab\xd2\x8e\xa0\x30\xf3\x0d\x71\xab\xa2\xf8\xcf\xe6\xd6\x4a\x04\x09\xb4\x95\xaa\x9c\xbe\x10\x05\x5c\x58\xe5\x70\x60\x7d\xa7\xa3\x6c\xcc\x3a\x9e\x6e\x2c\x81\x71\x10\xe8\x73\x11\x94\x85\xf4\x11\x55\x08\xbd\x23\x51\x49\x22\x20\x92\xac\xe5\x54\x2b\xda\xb2\xb9\xa7\x3a\xd5\xcc\x8c\xcf\xd7\x5a\x3c\x9f\xb4\xda\xc0\xf0\xda\x29\x67\x95\xdd\x9d\xaa\xe2\xbf\xb0\xda\x71\x7f\x50\x5f\x93\xd6\xc5\xae\xac\x8e\xb4\xdb\xea\x91\xd1\x3b\x16\xa2\xc3\x15\x57\x2a\x48\xc6\x68\xe8\x9a\xb3\x2a\xb0\x6c\x1e\x33\xb5\x50\x0d\x35\x97\x00\xe4\xce\xb6\x31\xe5\x5e\x1e\xcd\xdf\xa9\x4a\x93\xf5\xf4\xeb\xaf\x55\xbe\xa0\x12\x05\x25\x8a\x6e\xa9\x75\x2f\x1b\x33\x2b\x54\x77\x3a\x20\x82\xf4\x23\x38\xbf\xc8\x1f\xd3\x12\x0d\xe7\xc4\xa3\xfe\x44\xcd\x49\x25\xda\x40\x06\x03\x64\x81\x63\xee\xd7\x57\x89\x1a\xa5\x57\x09\x90\xf7\xd1\x2c\xa0\xea\x11\x19\xda\x60\xdb\x39\xcb\x42\x64\x4e\xe6\x56\x03\x9e\xc0\x4f\x8b\x64\x53\x72\x3d\x41\x2e\xfb\xc8\xa4\x72\x32\x92\x82\xb2\xcb\xf1\x7c\x8f\x0b\xf8\xad\x0b\xa8\x43\x52\xfb\x9a\xa3\x56\xd0\xa2\x57\xe6\x5a\x72\xc7\xf3\x21\x17\xd0\xcb\x6e\x1a\x93\x62\xb4\x07\xdf\xa1\xc7\xb8\x6e\x0d\xcb\x3a\xd5\xaf\x06\x4d\x40\x4f\x5f\x3d\x2a\xe9\x1b\x4d\xa9\x47\xaf\x8b\xf2\x1a\x91\xad\x6a\x62\xbf\xde\x44\xe1\x72\x8c\xfe\xc3\x36\xd8\x26\xa1\xd8\xf0\x10\x0c\xa2\x91\x77\x26\x68\xff\x14\x7b\xd2\xc9\x06\x7e\xc9\x29\x2b\x42\x64\x83\xdd\x70\xc1\x26\x2c\x48\x1f\x60\x32\xed\x57\x31\x8a\xa1\x0b\x44\x5c\x46\x79\xdd\xd4\x8f\x7b\x27\xec\x16\x3d\x95\xfd\x30\xdf\xb1\x9b\x22\xe0\x79\xde\xad\xca\x66\x7d\x65\x2f\xb8\x70\x5b\x23\xdf\x6a\xe7\xb4\x60\x9e\xab\x4a\x56\xd6\xec\x4c\x65\xd5\xa7\x29\xab\x2a\x2f\x58\x75\x49\xc1\xb2\xea\xd2\x81\x65\xcd\x4e\x04\x96\x65\x2d\x11\xff\x96\x65\x4d\x85\xbd\x65\x59\xd6\x02\xa1\x6e\x59\xfa\xe1\x4c\x2b\x98\x0e\xec\x05\x94\xec\x17\x94\xe8\x7f\xd6\x1c\xb7\x5a\xe9\xcc\x88\x9d\xd1\xe4\xd6\xc6\xe4\xec\x87\x56\x28\x3e\xb5\x2e\x11\x84\x4b\x68\x9d\x1b\x75\xb5\x71\xa7\x5f\x04\x43\x14\x52\x1f\x97\xef\x8d\xcb\xc2\x3f\x62\x8f\xbc\x78\xfc\xd6\xbf\xf0\xcb\x92\x9c\x0a\xb3\x90\x46\x12\xa6\x97\x9a\x05\x73\x22\x5e\x2f\xa9\x8f\xfa\x7c\xba\xaa\x23\xa8\x8d\x7e\x3d\x59\x9b\x01\xcc\xec\xfc\x76\x60\xb9\x4c\x90\x4a\xcc\x6d\x02\x56\x68\x04\x2a\x9a\x81\x85\x1b\x82\x15\x9a\x82\x0a\x73\xd9\x49\xac\x3b\xc5\xc0\xf8\x95\x25\xcc\xed\x0f\x56\x7b\x1e\x9a\xd9\x1c\xcc\xac\xdd\x85\x22\xad\x18\x3e\x7e\xf5\x51\x44\xa4\xb8\x20\xcf\x51\x26\xd0\x9c\x07\x66\x74\x2a\x59\xa5\x59\xa6\xea\x5b\x4a\x1a\x7a\xc5\x8f\x5f\x39\x2d\x35\x83\xb3\xd1\x9c\x9a\x7a\x37\xe3\xe2\x66\x08\x94\xb9\x36\x51\x40\xcd\xdc\x7e\xf5\x5c\xc6\x58\xfd\xeb\x72\x1e\xaa\xc1\x09\x72\xa5\x83\x13\x1f\xaa\x1c\xbc\x51\xd9\xe3\xfb\xea\xf4\x71\x18\x22\x11\x4e\xa3\x76\x85\x76\x04\x6f\xf2\x6c\x00\xed\xbb\xe2\x63\x52\x28\x15\x78\x93\x7a\x5c\xf3\x15\x72\x21\x28\x9e\xb2\x60\xf2\x6b\xe5\x49\xd4\x89\xc3\x70\x39\x70\xd2\xf0\x2d\x0c\xba\x70\x37\xe0\xca\x2c\xb7\x74\x64\x43\xe9\xeb\x28\xd0\x08\x58\x1c\x86\xb6\x0b\xa9\xce\x96\x14\x31\xea\x77\x24\x65\x90\x57\xc4\x92\xcb\x2d\x83\x93\xcb\x8d\x42\x7a\x7c\x15\x93\xf0\x8c\x9b\x52\x51\xfa\xb2\xbe\x1d\x20\xa7\xef\xc9\xf4\x3e\x5a\xe6\xef\xda\xd0\xed\x70\x79\x0f\xf0\xe3\x27\x1b\x44\xf8\xb9\x40\xa2\x1a\xe2\x77\x84\x6d\x31\xc4\x5f\x09\xe1\x97\xe2\x9e\xcd\x4f\x16\xcb\x17\xab\x20\x7d\x8a\x51\xb4\xe5\x44\x7e\xbc\x41\x22\x67\xf0\xde\xb3\x78\x04\x8f\x37\x59\xf5\x4e\x32\x06\x9f\x5f\x6c\x23\xb6\x94\x81\x73\xd0\xd8\x64\x4f\xb1\xe5\x00\xab\x9e\x78\xc3\x20\x3f\x33\xfb\x72\x52\x67\x27\x51\x4e\x8d\xee\x6f\x65\xe6\x48\x85\xe0\x40\xbf\xa9\x9c\x4a\x22\x8f\x5c\xb3\x8d\xf4\x76\xdf\x2d\x1a\x59\xef\xa3\x4b\x87\xcb\xfb\x63\x9a\x15\x23\x9b\x39\xaa\x24\xa1\x3d\xc0\x2b\x18\x63\x0a\xb6\xf1\xdc\x5e\xf5\x1d\xc9\x29\xfd\x80\x5b\x5c\x8c\x43\xfa\x01\x37\xd6\x54\x76\xb8\xdc\x72\x78\x55\x28\x2c\x0c\x71\xfe\x3f\x14\xf2\xcb\xff\x07\x00\x00\xff\xff\xc6\x42\x7a\x59\x72\x31\x00\x00")

func repositoryGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repositoryGotemplate,
		"repository.gotemplate",
	)
}

func repositoryGotemplate() (*asset, error) {
	bytes, err := repositoryGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repository.gotemplate", size: 12658, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0x53, 0xf9, 0x4a, 0x91, 0x4b, 0xc1, 0x7e, 0xeb, 0x47, 0xef, 0xeb, 0x10, 0x40, 0x29, 0x40, 0x78, 0x7f, 0xd4, 0x90, 0xd6, 0x31, 0x10, 0x6e, 0xe3, 0x3d, 0x34, 0x51, 0x95, 0x20, 0x49, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"repository.gotemplate": repositoryGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"repository.gotemplate": {repositoryGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
