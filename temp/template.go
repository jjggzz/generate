// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/model.gotemplate (430B)
// repository/new.gotemplate (891B)
// repository/repo.gotemplate (811B)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xfc\x40\x10\xc6\xeb\x7f\x20\xef\x30\xa4\xfa\xdb\x64\xfb\x74\x22\x1e\x08\x87\x08\xa6\x93\xc0\xed\x25\xcb\x11\x4d\x76\xc3\xee\x1c\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xae\x51\x10\xb1\xf2\x79\x72\xea\x5b\xc8\xee\x5e\xce\xe3\xba\xd9\xf9\xe6\xf7\xcd\x7e\xd3\xf1\xf2\x8a\x2f\x04\x10\xa5\x67\xa1\x3c\xe5\xad\xb0\x36\x8e\xe2\xa8\x6e\x3b\xa5\x11\xfe\xc7\x11\x00\x00\x91\xe6\x72\x21\x20\x3d\xf1\x6d\x63\x6d\x42\x94\x5a\x9b\x8c\xb2\x90\x95\xe3\x0e\x1c\xba\x1d\x3e\x96\x58\x63\x6f\x9c\xc0\x18\x7c\x3f\xaf\x86\x87\xfb\x8c\x28\xcd\xf9\xbc\xd9\xae\x62\x0c\x4a\xd5\xb6\x42\xa2\x93\x02\x72\x28\xa5\x42\x8e\xb5\x92\x6e\x02\xfb\xce\xfd\x71\xf4\x0b\x20\x18\xd4\xcb\x12\x81\xe2\xe8\xdf\xde\xc2\x49\x2d\x9a\xca\x58\x4b\x94\xfa\x72\x03\x8c\xcf\xbc\xef\xdc\x73\x56\xcd\x33\x17\xe2\x48\x35\xcb\x56\x86\x99\x04\x2e\x8d\x92\xae\x7d\x8e\x7a\x52\x6b\x83\x53\x81\x28\x74\xae\xa6\xea\x5a\xe8\x92\x1b\x01\xbb\x9e\xc9\x0c\x18\x83\xe1\xe5\x71\xfd\xfa\x91\xc1\xc5\x9e\x5b\x01\x5f\x6f\x9f\xc3\xd3\x5d\xf6\x27\x84\xdd\x05\xac\xdf\x57\x3f\x37\xb7\x01\xf1\x7e\xbb\x89\x0b\x1f\x69\x73\x51\xeb\xee\xe9\xeb\xdf\x00\x00\x00\xff\xff\x7b\x11\x98\x32\xae\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 430, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2a, 0x1c, 0xf4, 0x15, 0xa1, 0x64, 0x1, 0x13, 0x93, 0x78, 0x34, 0xb7, 0x33, 0x71, 0x30, 0x32, 0xc3, 0xef, 0x80, 0x3f, 0x36, 0x41, 0x8d, 0xe3, 0xf, 0x5a, 0x74, 0x75, 0x35, 0x8b, 0x89}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x8f\x9b\x30\x10\x85\xcf\x8b\xc4\x7f\xb0\x38\x54\xb0\xca\x92\xfb\x1e\x57\x69\xa5\xa8\x51\x14\x35\xe9\xb9\x32\x30\xa1\x6e\xc1\x26\xe3\xa1\xa9\x65\xf9\xbf\x57\x06\x92\x50\x42\xda\xbd\x65\xc6\x33\xef\x7d\x6f\x22\x1a\x9e\xff\xe4\x25\x30\x6b\xd3\x5d\xff\x73\xcb\x6b\x70\x2e\x0c\xc2\x40\xd4\x8d\x42\x62\x71\x18\x3c\x7d\x63\x51\x29\xe8\x7b\x9b\xa5\xb9\xaa\x97\xa5\x7a\xd1\xa7\xea\xa5\x40\xf1\x0b\x70\x59\x1b\x7d\xaa\xa2\x30\x78\x1a\x8f\xfc\xa8\x95\x40\x25\x97\xfa\x54\xfd\x8e\xbc\x18\x63\x8c\x59\x8b\x5c\x96\xc0\xd2\x75\xa7\xac\x9d\x8b\xac\x4d\x9d\x8b\x2e\xcf\x20\x0b\x6f\x9d\xf8\x05\x32\x0d\xb0\x2f\xd0\x28\x2d\x48\xa1\x61\x9a\xb0\xcd\x89\xd9\x89\xd4\x47\x49\x82\x8c\x76\xce\x47\xe8\x8b\x3e\x81\x5f\x9d\xeb\xf5\x72\x13\xc7\x2e\xef\xb1\x95\x39\xdb\xc2\xd9\x4f\xc5\x45\xc6\x9e\x3d\x7c\xba\x7a\x4b\xc6\x18\x83\x3f\x02\xb5\x28\x47\x0f\x43\xff\xfd\x6c\xaf\xde\x6a\xa6\x1f\x17\x59\xb2\x18\x8b\x0d\x88\xbe\xe8\x49\xef\xf5\x6f\xec\xf3\x82\xa3\x28\x0f\x2f\x32\x49\xf6\xc1\xda\x3d\xe1\x27\x81\x9a\x36\x40\x04\x78\x50\x1b\x75\x06\xcc\xb9\xbe\x3a\x8f\x0f\x7d\x23\x2e\xb2\xd7\x22\x5b\xfc\x0d\x3c\x64\x98\x67\xef\xfe\xe9\xc7\x5c\x42\x12\xe0\x91\xe7\x70\x31\x59\x4b\x0d\x48\xf1\xf3\x64\x25\x61\x80\xa8\xb0\x9f\xf9\xda\x14\x9c\xe0\xdf\x33\x2b\xa8\x80\xe0\xcd\xec\x50\xd4\x1c\xcd\x67\x30\xb1\xff\x0c\xae\xd5\xc1\x34\xd3\x95\x3d\x54\x90\xd3\xff\x57\xee\x8c\x17\x9d\x48\x32\x3e\xc7\x9f\x00\x00\x00\xff\xff\x63\x76\xfa\x07\x7b\x03\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 891, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0x85, 0x5e, 0x21, 0x3b, 0x53, 0x69, 0xf6, 0xad, 0xb6, 0x5e, 0xc3, 0x39, 0x4d, 0xdb, 0xf2, 0x7f, 0xdf, 0xd8, 0xd0, 0x56, 0x75, 0x9e, 0x86, 0x3f, 0x5c, 0xe5, 0xc, 0x9e, 0x47, 0x90, 0x13}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd2\xdf\x4a\xf3\x30\x14\x00\xf0\xeb\x6f\xb0\x77\x38\xf4\xaa\x1d\x23\x7b\x87\xb1\x4f\x18\x0e\x19\x6e\x3e\x40\x96\x1e\x6b\xb4\x4d\xe2\xc9\x29\x1a\x42\xde\x5d\xd2\xda\x81\x7a\xe3\x10\x41\x72\x73\x92\x9c\x3f\x3f\x42\x9c\x54\x4f\xb2\x41\x88\x51\xec\xc7\xf0\x46\x76\x98\xd2\x7c\x96\x97\xee\x9c\x25\x86\x72\x3e\xfb\x57\x34\x9a\x1f\xfa\x93\x50\xb6\x5b\x3d\x76\x56\x93\x35\x2b\xff\xdc\xbe\x16\x39\x0f\x00\x20\x46\x92\xa6\x41\x10\xdb\xa1\xc8\xa7\x54\xc4\x28\x52\x2a\xa6\x6b\x34\x75\xee\x5b\xe5\x02\x0e\x2e\xcf\x3c\x30\x5d\x69\xf2\xbc\x43\x66\xa4\xa3\xdd\xd9\x17\x24\x25\x3d\x82\xf8\x6f\x58\x73\x18\x31\xb7\xe8\x2c\x78\xa6\x5e\x31\xc4\xb1\x5d\x7d\x82\x45\x1e\x2f\x36\xeb\xf9\xec\x5d\x7b\xdf\x1b\x05\x25\xe5\xe4\xc5\x45\xbd\x2b\xd8\x1a\x8f\xc4\xe5\xb7\xab\xf2\x80\x0f\x07\x15\x20\x91\xa5\x89\x47\xc8\x3d\x19\x30\xba\x1d\x74\x3f\x90\xdd\xb9\x5a\x32\xfe\x45\xd9\x06\x5b\x64\x5c\x87\x3d\xe9\x4e\x52\xb8\xc6\x50\xba\x73\x38\x7c\xa8\xf3\xee\x18\xdc\x6f\x4a\x0e\xd8\xa2\xe2\x8b\x24\xe5\xe7\x67\x5a\x0e\xb6\xea\x2b\x6e\x39\x01\xdf\x02\x00\x00\xff\xff\x92\x8e\xc9\xe3\x2b\x03\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 811, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0xf3, 0x59, 0x12, 0xad, 0x17, 0xb, 0xc0, 0x99, 0x8b, 0x40, 0x74, 0x1b, 0x76, 0xe8, 0xfb, 0xb6, 0x2c, 0xa4, 0xcc, 0xd8, 0x96, 0x37, 0x6e, 0xee, 0x4f, 0x97, 0x4c, 0xb8, 0xc6, 0xf4, 0x6a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model.gotemplate": modelGotemplate,
	"new.gotemplate":   newGotemplate,
	"repo.gotemplate":  repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"model.gotemplate": {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":   {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":  {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
