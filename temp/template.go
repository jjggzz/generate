// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/model.gotemplate (407B)
// repository/new.gotemplate (845B)
// repository/repo.gotemplate (879B)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xc4\x40\x10\x86\x6b\x03\x79\x87\x21\x95\x36\xd9\x3e\x9d\x88\x82\x16\x62\x91\x4e\x02\xb7\x97\x2c\x21\x9a\xcc\x86\x64\xaf\x08\xc3\xd4\x82\x22\xd8\xd9\x09\x76\xd7\x28\x88\x58\xf9\x3c\x39\xf5\x2d\x64\x77\x2f\x7a\xa4\x9b\xdd\xff\xff\xe6\x9f\x99\x56\xe6\xd7\xb2\x54\x40\x14\x5f\xf8\xf2\x5c\x36\x8a\x39\x0c\xc2\xa0\x6a\x5a\xdd\x19\xd8\x0f\x03\x00\x00\xa2\x4e\x62\xa9\x20\x3e\x46\x53\x99\xe1\xd4\x89\xcc\x11\x51\xcc\x1c\x4d\x1e\x85\x85\x85\x0f\x2c\x3f\x23\x7a\x2b\x08\x01\xdf\xcf\xeb\xf1\xe1\x3e\x21\x8a\x53\xb9\xac\xff\xf2\x84\x80\x5c\x37\x8d\x42\x63\x25\x8f\x1c\x22\x6a\x23\x4d\xa5\xd1\x3a\xcc\xd0\xda\x41\xa7\x7e\x1e\x84\xde\x74\xab\xdc\x00\x85\xc1\xde\x2c\xf0\xa4\x52\x75\xd1\x33\x13\xc5\xae\xdc\x02\xd3\x33\x1d\x5a\xfb\x5c\x14\xcb\xc4\x2e\x71\xa4\xeb\x55\x83\xde\x13\xc1\x55\xaf\xd1\x7d\x9f\xf5\x1a\x53\x59\x32\x47\x0b\x10\x02\xc6\x97\xc7\xcd\xeb\x47\x02\x97\x33\x22\x83\xaf\xb7\xcf\xf1\xe9\x2e\xf9\x17\x7c\xff\x0c\x36\xef\xeb\x9f\x9b\x5b\x8f\xb8\xe0\xdd\xad\x32\x37\xf6\xf6\x6a\x6c\x6f\xe6\xea\xdf\x00\x00\x00\xff\xff\xff\x2d\x91\x7b\x97\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 407, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0xf4, 0xaf, 0x96, 0xdb, 0x87, 0xeb, 0x34, 0x27, 0x29, 0x73, 0x6a, 0x21, 0x26, 0x45, 0xdd, 0x43, 0xec, 0x42, 0xf7, 0x71, 0xe8, 0x2b, 0xa0, 0x41, 0xbb, 0x3c, 0x13, 0xf2, 0xf5, 0xa2, 0xb0}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4b\x8f\xa2\x40\x10\x3e\xdb\x49\xff\x87\x8e\x87\x0d\x18\xc5\xbb\x47\xe3\x6e\xb2\x59\x63\xcc\xea\x9e\x37\x0d\x94\x4c\xcf\x40\x37\x56\x17\xe3\x74\x08\xff\x7d\xd2\xe2\x83\x51\x9c\x19\x4e\xd4\xe3\x7b\x15\x94\x32\x79\x91\x19\x88\xba\x8e\xd6\xed\xeb\x4a\x16\xd0\x34\x9c\x71\xa6\x8a\xd2\x20\x89\x80\xb3\xc1\x7f\x31\xcc\x14\x3d\x55\x71\x94\x98\x62\x9a\x99\x89\xdd\xe7\x93\x14\xd5\x2b\xe0\xb4\x70\x76\x9f\x0f\x39\x1b\x74\x57\x9e\x0b\xa3\xd0\xe8\xa9\xdd\xe7\x6f\x43\xce\x42\xcf\xb7\xab\x74\x22\x56\x70\xf8\x0b\xa5\x09\xd2\x58\x8c\xfc\x30\x5a\xcc\x43\xe1\x3b\x56\x91\x41\x27\x6a\xce\x84\x10\x02\x81\x2a\xd4\x9d\xc1\xa9\xef\x9f\xba\x46\xa9\x33\x10\xd1\x4f\x4d\x8a\x9c\x6d\x1a\x6f\xbf\x2d\x5a\xf7\x1e\x36\xf3\x52\x3d\xfd\x20\x8d\xc3\x71\x97\x0c\x74\xea\xf3\xfa\xa2\xe1\xac\xe1\xec\x9e\xff\xea\xbd\x9f\xb0\x13\xa5\x67\xa1\x37\xd9\x8f\xba\xde\x10\xfe\x52\x68\x69\x09\x44\x80\x5b\xb3\x34\x07\xc0\x44\xda\x8b\xf2\x95\x42\x74\xe2\xa7\xf1\x2c\x8d\xc7\x1f\x0d\x9f\x32\x70\x46\xae\x84\xee\x39\x2d\x61\x95\xd0\x19\xfe\xbd\xcb\x3d\xce\x70\x66\x39\xc9\x1d\x15\xfb\xae\x75\x74\xf1\xf8\x12\x4a\x13\xe0\x4e\x26\x70\xf6\xf5\x5b\x5b\x40\x0a\x46\x37\x90\x50\x00\xa2\xc1\x76\xe7\x5f\x99\x4a\x82\xcf\x77\x16\x90\x03\xc1\xdc\xad\x51\x15\x12\xdd\x1f\x70\x81\xff\xb1\x2f\xd5\xd6\x95\xb7\x90\x0d\xe4\x90\xd0\xd7\x90\x3b\xe1\xf1\x91\x24\xec\x7e\x80\xf7\x00\x00\x00\xff\xff\x34\x54\xa1\x05\x4d\x03\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 845, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0xb0, 0x17, 0xd2, 0x84, 0xab, 0x1f, 0xaa, 0x1c, 0x6d, 0xf9, 0xa4, 0x98, 0xf5, 0xad, 0x94, 0xf2, 0x9c, 0xdb, 0xcc, 0x5e, 0xa9, 0xf3, 0xee, 0x87, 0xe9, 0x56, 0xfe, 0xf6, 0x5b, 0xa4, 0xed}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\xe1\x4a\xc3\x30\x10\xc7\x3f\x5b\xe8\x3b\x1c\xfb\xd4\x8e\xd1\xbd\xc3\x98\x82\x38\x64\xb8\xf9\x00\x59\x7a\xd6\x68\x9b\xc4\xcb\x15\x0d\xa1\xef\x2e\x59\x20\x4c\x51\x70\x08\x62\xf2\xe5\x72\x70\xff\xff\xef\xc2\xdf\x0a\xf9\x2c\x3a\x84\x10\x9a\x6d\x2a\x6f\xc5\x80\xd3\x54\x16\xf1\xaa\xc1\x1a\x62\xa8\xca\xe2\x62\xd6\x29\x7e\x1c\x0f\x8d\x34\xc3\xf2\x69\x30\x8a\x8c\x5e\xba\x97\xfe\x6d\x56\x16\x75\x59\x84\x40\x42\x77\x08\xcd\xa5\x66\xc5\xde\x45\x01\x00\x00\xf6\x36\x6a\xef\x98\xae\x14\x39\xde\x20\x33\xd2\xde\x6c\xcc\x2b\x92\x14\x2e\x0f\x24\xd3\x3b\xb4\x06\x1c\xd3\x28\x19\x42\x12\x88\xa7\x3d\xc0\x3c\x5a\x35\xeb\x55\x6a\x4e\xd1\x10\x75\x9b\x30\xbf\xf3\x7e\x18\xb5\x84\x8a\xa2\xe6\xfc\x2c\x84\x1a\xae\xb5\x43\xe2\xea\xc7\x53\xd1\xe0\x43\xa3\x06\x24\x32\x74\xba\x05\x21\x8f\xa4\x41\xab\x3e\x2f\xf1\x4b\xca\x7b\xdb\x0a\xc6\xff\x4e\xb9\xc6\x1e\x19\x57\x7e\x4b\x6a\x10\xe4\x6f\xd0\x57\x36\x97\xc7\xdc\xe5\xd7\xde\xdb\xbf\xa2\xda\x61\x8f\x92\xcf\xa2\xaa\x3e\x7f\xdf\xe2\xc8\x59\x7f\x0d\xba\x38\x85\xcd\x69\x7d\x0f\x00\x00\xff\xff\x6f\xa9\xf0\x96\x6f\x03\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 879, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0xcb, 0xa7, 0x0, 0xc1, 0xd3, 0xc5, 0xc9, 0xd6, 0x12, 0xec, 0x70, 0x78, 0x24, 0x5, 0xdc, 0x3b, 0x95, 0xd, 0x65, 0x6e, 0x96, 0xc0, 0x68, 0x94, 0xd2, 0x78, 0x3d, 0x5b, 0xe4, 0xda, 0x6e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model.gotemplate": modelGotemplate,
	"new.gotemplate":   newGotemplate,
	"repo.gotemplate":  repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"model.gotemplate": {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":   {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":  {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
