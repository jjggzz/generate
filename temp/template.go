// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/model.gotemplate (430B)
// repository/new.gotemplate (979B)
// repository/repo.gotemplate (2.796kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xfc\x40\x10\xc6\xeb\x7f\x20\xef\x30\xa4\xfa\xdb\x64\xfb\x74\x22\x1e\x08\x87\x08\xa6\x93\xc0\xed\x25\xcb\x11\x4d\x76\xc3\xee\x1c\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xae\x51\x10\xb1\xf2\x79\x72\xea\x5b\xc8\xee\x5e\xce\xe3\xba\xd9\xf9\xe6\xf7\xcd\x7e\xd3\xf1\xf2\x8a\x2f\x04\x10\xa5\x67\xa1\x3c\xe5\xad\xb0\x36\x8e\xe2\xa8\x6e\x3b\xa5\x11\xfe\xc7\x11\x00\x00\x91\xe6\x72\x21\x20\x3d\xf1\x6d\x63\x6d\x42\x94\x5a\x9b\x8c\xb2\x90\x95\xe3\x0e\x1c\xba\x1d\x3e\x96\x58\x63\x6f\x9c\xc0\x18\x7c\x3f\xaf\x86\x87\xfb\x8c\x28\xcd\xf9\xbc\xd9\xae\x62\x0c\x4a\xd5\xb6\x42\xa2\x93\x02\x72\x28\xa5\x42\x8e\xb5\x92\x6e\x02\xfb\xce\xfd\x71\xf4\x0b\x20\x18\xd4\xcb\x12\x81\xe2\xe8\xdf\xde\xc2\x49\x2d\x9a\xca\x58\x4b\x94\xfa\x72\x03\x8c\xcf\xbc\xef\xdc\x73\x56\xcd\x33\x17\xe2\x48\x35\xcb\x56\x86\x99\x04\x2e\x8d\x92\xae\x7d\x8e\x7a\x52\x6b\x83\x53\x81\x28\x74\xae\xa6\xea\x5a\xe8\x92\x1b\x01\xbb\x9e\xc9\x0c\x18\x83\xe1\xe5\x71\xfd\xfa\x91\xc1\xc5\x9e\x5b\x01\x5f\x6f\x9f\xc3\xd3\x5d\xf6\x27\x84\xdd\x05\xac\xdf\x57\x3f\x37\xb7\x01\xf1\x7e\xbb\x89\x0b\x1f\x69\x73\x51\xeb\xee\xe9\xeb\xdf\x00\x00\x00\xff\xff\x7b\x11\x98\x32\xae\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 430, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2a, 0x1c, 0xf4, 0x15, 0xa1, 0x64, 0x1, 0x13, 0x93, 0x78, 0x34, 0xb7, 0x33, 0x71, 0x30, 0x32, 0xc3, 0xef, 0x80, 0x3f, 0x36, 0x41, 0x8d, 0xe3, 0xf, 0x5a, 0x74, 0x75, 0x35, 0x8b, 0x89}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x8f\x9b\x30\x10\xc5\xcf\x8b\xc4\x77\xb0\x38\x54\xb0\x62\xc9\xa5\xea\x61\x8f\xdb\x6d\xa5\x55\x57\x51\xd4\xa4\xe7\xca\xc0\x84\xba\x05\x9b\x8c\x87\xa6\x96\xe5\xef\x5e\x39\x90\x40\x29\xd1\xe6\x16\xcf\x9f\xf7\x7e\x6f\x22\x5a\x5e\xfc\xe2\x15\x30\x6b\xb3\x4d\xff\x73\xcd\x1b\x70\x2e\x0c\xc2\x40\x34\xad\x42\x62\x71\x18\xdc\x7d\x67\x51\x25\xe8\x47\x97\x67\x85\x6a\x56\x95\x7a\xd0\x87\xfa\xa1\x44\xf1\x1b\x70\xd5\x18\x7d\xa8\xa3\x30\xb8\x9b\x8e\xfc\x6c\x94\x40\x25\x57\xfa\x50\xff\x89\xbc\x18\x63\x8c\x59\x8b\x5c\x56\xc0\xb2\x97\x93\xb2\x76\x2e\xb2\x36\x73\x2e\x3a\xb7\x41\x96\xde\x3a\xf1\x0b\x64\x5a\x60\x5f\xa1\x55\x5a\x90\x42\xc3\x34\x61\x57\x10\xb3\x33\xa9\x4f\x92\x04\x19\xed\x9c\x8f\xd0\x3f\xfa\x04\x7e\x75\xa9\xd6\xcb\xcd\x1c\x4f\x79\xf7\x9d\x2c\xd8\x1a\x8e\x7e\x2a\x2e\x73\x76\xef\xe1\xb3\xe7\xa7\x64\x8a\x31\xf8\x23\x50\x87\x72\xd2\x18\xea\xb7\xb3\x3d\x7a\xab\x85\x7a\x5c\xe6\x49\x3a\x15\x1b\x10\xfd\xa3\x27\xfd\x5f\x7f\x64\x5f\x16\x9c\x44\xb9\x7a\x91\x59\xb2\x77\xd6\x6e\x09\x3f\x0b\xd4\xf4\x0a\x44\x80\x3b\xf5\xaa\x8e\x80\x05\xd7\x17\xe7\xe9\xa1\x47\xe2\x32\x7f\x2c\xf3\xf4\x5f\xe0\x21\xc3\x32\xfb\xe9\x9f\xbe\xce\x25\x24\x01\xee\x79\x01\x67\x93\x8f\xaa\x93\x14\x27\x2c\x16\x92\x3e\xbc\x4f\x19\x20\x2a\x4c\xfa\xde\x8b\xd4\x80\x14\xdf\xcf\xe4\x96\x87\xbf\xb5\x25\x27\x78\x32\x1b\x14\x0d\x47\xf3\x05\x4c\xec\xbf\x83\xcb\x6b\x67\x5a\x70\x2e\xbd\x4d\xec\x19\x6a\x78\x5b\x6c\x79\x77\x0b\x35\x14\x74\xc3\xee\x1c\x65\x94\x19\xcf\xfc\x37\x00\x00\xff\xff\x9c\x25\xb6\x81\xd3\x03\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 979, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0x9a, 0xe5, 0x2c, 0xea, 0xf2, 0xa8, 0xe4, 0xac, 0x8b, 0x3b, 0x2, 0x44, 0x7c, 0x7d, 0xd0, 0xaa, 0x79, 0xdc, 0x4b, 0xe6, 0x26, 0xaa, 0x7, 0x6e, 0x48, 0x79, 0x26, 0x7c, 0xdb, 0xc4, 0xc1}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x5d\x6f\xd3\x30\x14\x7d\x6e\xa5\xfe\x87\x4b\x84\x50\x32\x85\x54\x48\x88\x87\x49\xd1\xc4\xbe\x60\x62\x4c\xd3\x36\x78\x77\x93\xdb\xcd\xc3\xb1\xb3\x6b\x67\x5d\x15\xf9\xbf\x23\x3b\xfd\x4a\xe9\xb6\x76\x14\x04\xea\x43\x93\x6b\x5f\x1f\xdf\x73\x4e\xae\x5d\xb2\xec\x07\xbb\x46\xa8\xeb\xe4\xbc\x79\x3c\x63\x05\x5a\xdb\xeb\xba\x1f\x2f\x4a\x45\x06\xc2\x5e\x17\x00\x20\xc8\x99\x61\x03\xa6\xb1\xaf\xef\x44\xd0\xeb\x76\x82\x6b\x6e\x6e\xaa\x41\x92\xa9\xa2\x7f\x5b\x28\x4e\x4a\xba\xa1\x87\xc0\xe5\xba\x8c\xba\x26\x26\xaf\x11\x92\x13\xbf\x90\xb6\x36\xa8\xeb\xc4\xda\x60\x3a\x8c\x32\x77\x58\x91\x4b\x30\xe3\xd2\xed\xe3\xd2\xd0\x31\x27\x6d\x4e\xd1\x18\xa4\x2b\x75\xaa\x46\x48\x19\xd3\x08\xc9\x91\x34\xdc\x8c\x9b\x0d\x5e\x60\xa9\x40\x1b\xaa\x32\x03\x75\xb3\x5c\x3e\x80\x1d\x07\x9f\x1c\xee\xf7\xba\xbe\x82\x7e\x1f\xf0\x01\xb3\xca\x20\x0c\x19\x17\x40\x68\x2a\x92\xf0\xf6\x1d\x30\x99\x03\x12\xb5\xa6\xe8\x2a\xcb\x50\xeb\xe9\xac\x4c\x55\xd2\x00\xa9\x91\xf6\xb3\x25\x17\xbd\xee\xb0\x92\x19\x84\xe4\xb0\x77\x36\xda\x6a\x04\x07\x6e\xb9\x30\x82\x90\x4b\xf3\xe1\x7d\xec\xd0\x15\x45\x93\xbd\xdf\x33\x9a\xe0\xf9\x51\x1f\xeb\x20\x11\xec\xa6\xe0\xd0\x92\x7c\x90\x7c\x42\x13\xbe\xf1\x93\x62\x08\x34\x0a\xcc\x4c\x93\x13\xee\x44\x30\x24\x55\x38\x11\xaf\xd8\x40\x4c\x24\x0c\xa2\x66\x19\x3e\x74\x58\xf0\x2a\x75\x25\x4c\xf0\x3a\x9d\x19\x15\x71\xc3\x83\x0b\xda\xe6\x6f\xb1\xfe\xd8\x97\xfd\xfb\x64\xb2\xe1\x10\x33\x83\xf9\xf6\xf8\x3c\x91\x1a\xc9\x84\x6b\x67\x39\x80\x56\xe0\x11\x29\x80\x50\x57\xc2\xf8\xe8\x22\xfd\x47\x0f\x98\x85\x01\xf7\xa8\x4e\x25\xb5\x44\x77\x58\xd7\xb7\x8a\x4b\x48\x0e\x94\xa8\x0a\xe9\x82\x1a\x82\x18\x02\x87\x74\xcf\x44\x85\x10\xd6\xf5\xa0\xe2\x22\xff\xee\xde\x3e\x2b\x91\xb7\x26\x5b\x1b\x05\xb3\x0f\xa6\x15\x8f\x9f\x2a\xf2\x75\xab\xa8\xa4\xae\x87\x5c\xe6\x5f\x59\x09\xc9\x6c\xe8\x98\xa3\xc8\xb5\xb5\x93\xef\x2d\xea\x75\x7f\x35\xc5\xa2\x23\xbc\x96\xce\x0d\xd3\x58\x43\x49\x72\xa1\x46\xfa\xe3\x44\xc8\x30\xfa\x37\x6d\xf1\xad\xcc\x99\xc1\xfd\xf1\x39\xf1\x82\xd1\xf8\x0b\x8e\xc3\x72\xf6\xe8\xdb\xdc\xec\xed\x6a\x5c\xe2\x33\xe4\xfe\x01\x07\x55\x7e\x83\x4b\xe6\x01\x8d\x06\x56\x1a\x28\xdd\xf3\x16\x4a\xf7\x60\x74\x83\x84\xed\x0a\xe6\x33\xad\x85\x14\xf6\xfe\x8e\x7f\xe2\x39\xa1\x4d\x8b\x81\x55\x2d\x06\x1a\x26\x5a\x9e\x72\x21\x3b\xe5\xe8\x7f\x73\xd6\x21\x0a\xdc\xc8\x59\x2f\xb2\x47\xee\x51\x56\xf5\xf3\xb5\x0c\x10\xc3\x4b\xc4\x81\xed\xa9\xe3\x30\x9e\x92\x67\x50\x19\x90\x0a\x08\x33\x45\xf9\x72\x92\x97\x68\x45\xd2\x0d\xd3\x4b\x19\xee\x2a\xb2\x15\x55\x2f\xfd\x41\xba\x99\xaa\xcb\x7d\x20\x9e\xeb\xdb\x59\xbf\x9b\xec\xa6\x20\x71\x14\x2e\xf7\x94\x5e\x77\xd5\xc1\xbf\xf6\xb2\xf3\xbb\xc1\xe3\xe7\xd1\xb6\xdc\x35\x3d\x45\xd2\x14\xf4\x9d\x48\x8e\x88\xce\x94\xf3\xca\x0a\x93\x49\x2e\xe2\x46\xab\x05\x97\x3d\xe7\x4c\x9f\xf4\x88\x35\x37\x20\x64\x7a\x85\xf9\x19\x00\x00\xff\xff\x25\x55\xc7\xc9\xec\x0a\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 2796, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0x8c, 0x39, 0x57, 0x6a, 0xd2, 0x10, 0x23, 0xd2, 0xf1, 0x96, 0x29, 0x67, 0x38, 0x55, 0x51, 0x17, 0xa8, 0x66, 0x66, 0xfa, 0x78, 0x20, 0x3a, 0x42, 0x9a, 0xd, 0x52, 0xed, 0x9d, 0x83, 0x46}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model.gotemplate": modelGotemplate,
	"new.gotemplate":   newGotemplate,
	"repo.gotemplate":  repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"model.gotemplate": {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":   {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":  {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
