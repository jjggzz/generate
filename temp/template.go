// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/example.gotemplate (4.67kB)
// repository/model.gotemplate (430B)
// repository/new.gotemplate (1.053kB)
// repository/repo.gotemplate (3.942kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampleGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x41\x8b\xdb\x3c\x10\x86\xcf\x31\xf8\x3f\x0c\xe6\x3b\xd8\x1f\xc6\xb0\x39\x86\xec\x86\xb6\xa4\x25\x50\xd2\x1e\x42\x2f\xcb\x1e\xb4\xf6\x24\x15\x95\x25\x57\x1e\xd1\x04\xa1\xff\x5e\x64\xd9\x21\xa5\xdb\x52\x96\x75\x29\x38\xc9\x21\xc9\xbc\x99\xd1\xbc\x8f\x26\x8a\x93\x86\x95\x5f\xd8\x01\xc1\xda\xe2\x63\x78\xba\x65\x35\x3a\x17\x47\xfe\xce\xeb\x46\x69\x82\x34\x8e\x00\x00\xac\xd5\x4c\x1e\x10\x8a\x4d\x17\x6e\x9d\x4b\xac\x2d\x9c\x4b\x06\x19\x65\xe5\x33\x33\x9f\x4a\xa7\xa6\xab\xba\x96\xc4\xe9\x14\x8a\xae\x8f\xac\x6e\x04\x42\x4b\xda\x94\x04\x36\x8e\x66\xa5\xe6\x84\x9a\x33\xb8\x7f\xb8\x88\xce\xf6\x9a\x1d\x6a\x94\xe4\xeb\xfa\xb7\x73\x79\xf0\xe1\x86\x69\x56\xdf\x40\xb8\x71\x49\xa8\xf7\xac\x44\xeb\xce\xda\xfc\x69\x4d\xaa\x4f\x4c\x18\x0c\xda\xa3\x52\xc2\x07\x1f\x91\xbe\x21\xca\xa0\xf4\x41\x17\x47\x9d\xf5\xb3\xd5\xd0\xfe\x5b\x8e\xa2\x6a\xbd\xb7\xbd\x91\x25\xa4\x78\x84\xff\xad\xfd\xef\x29\x73\x19\xbc\x92\x95\xb5\x45\x97\x12\x94\x4d\xbb\x35\x42\xa4\xd9\x2f\x73\x3a\xcf\x78\x2c\xce\x30\x6e\x81\x35\x0d\xca\x2a\xbd\x08\xe6\xf0\x4f\x00\xb2\xc3\xca\x0b\x48\x98\xac\xfc\x16\xbf\x51\xc2\xd4\x32\x38\x02\xde\x82\x34\x42\x24\x39\xf4\x35\x17\xa4\x0d\xba\x2c\x8e\x66\x1a\xc9\x68\x09\x78\xec\x21\x3f\x93\xa5\xa2\x89\xe1\x54\x34\x2a\xd2\xf5\x57\xc3\xc4\x4e\xa5\x9d\x21\x18\xb4\xdd\xa9\x41\xe7\xa6\x01\xf9\x16\x56\x49\x0e\xa1\x8f\x45\x78\x7c\x31\xba\x5b\x45\x57\xc0\xcb\xbb\x11\x09\xbf\xd3\xc8\x08\xf5\xee\x33\x93\x13\x46\xfc\x97\x08\x7f\xd0\xd7\x69\xbe\xfb\xb3\xf3\xe2\x39\xa4\xdf\x63\xdb\x4e\x7c\x90\x97\x23\x0e\xf2\x80\xf7\x3a\xc5\x0e\x96\x63\x7e\xeb\x6d\x86\x09\xbe\x7f\x98\x22\x5b\x2e\x21\x5d\x65\x63\x5e\x53\x4c\x1c\xb0\xbf\x26\x1e\x19\xf2\xeb\xd0\x57\xda\x9b\xfd\x91\x72\xbf\xe8\x7c\x92\x27\x47\x9f\x04\x2b\xf0\xea\x4f\x87\xc8\x4d\x1e\xda\xe8\x5f\xce\xf3\xcb\x45\x5e\xf6\xa7\xcb\x56\xd1\x75\x9b\x7e\xf7\x19\x19\x67\xab\xce\xff\xf4\x7c\x0f\x00\x00\xff\xff\xa6\x59\x98\xfd\x3e\x12\x00\x00")

func exampleGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_exampleGotemplate,
		"example.gotemplate",
	)
}

func exampleGotemplate() (*asset, error) {
	bytes, err := exampleGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example.gotemplate", size: 4670, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaa, 0xdc, 0x73, 0x39, 0xca, 0x44, 0xcd, 0x8d, 0x46, 0xe7, 0xf2, 0xff, 0xb, 0x54, 0x5b, 0x98, 0x5e, 0xcd, 0x79, 0xdc, 0xda, 0xae, 0x3b, 0x67, 0xba, 0x6b, 0x1, 0x3, 0xce, 0x4e, 0x7, 0x26}}
	return a, nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\xfc\x40\x10\xc6\xeb\x7f\x20\xef\x30\xa4\xfa\xdb\x64\xfb\x74\x22\x1e\x08\x87\x08\xa6\x93\xc0\xed\x25\xcb\x11\x4d\x76\xc3\xee\x1c\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xae\x51\x10\xb1\xf2\x79\x72\xea\x5b\xc8\xee\x5e\xce\xe3\xba\xd9\xf9\xe6\xf7\xcd\x7e\xd3\xf1\xf2\x8a\x2f\x04\x10\xa5\x67\xa1\x3c\xe5\xad\xb0\x36\x8e\xe2\xa8\x6e\x3b\xa5\x11\xfe\xc7\x11\x00\x00\x91\xe6\x72\x21\x20\x3d\xf1\x6d\x63\x6d\x42\x94\x5a\x9b\x8c\xb2\x90\x95\xe3\x0e\x1c\xba\x1d\x3e\x96\x58\x63\x6f\x9c\xc0\x18\x7c\x3f\xaf\x86\x87\xfb\x8c\x28\xcd\xf9\xbc\xd9\xae\x62\x0c\x4a\xd5\xb6\x42\xa2\x93\x02\x72\x28\xa5\x42\x8e\xb5\x92\x6e\x02\xfb\xce\xfd\x71\xf4\x0b\x20\x18\xd4\xcb\x12\x81\xe2\xe8\xdf\xde\xc2\x49\x2d\x9a\xca\x58\x4b\x94\xfa\x72\x03\x8c\xcf\xbc\xef\xdc\x73\x56\xcd\x33\x17\xe2\x48\x35\xcb\x56\x86\x99\x04\x2e\x8d\x92\xae\x7d\x8e\x7a\x52\x6b\x83\x53\x81\x28\x74\xae\xa6\xea\x5a\xe8\x92\x1b\x01\xbb\x9e\xc9\x0c\x18\x83\xe1\xe5\x71\xfd\xfa\x91\xc1\xc5\x9e\x5b\x01\x5f\x6f\x9f\xc3\xd3\x5d\xf6\x27\x84\xdd\x05\xac\xdf\x57\x3f\x37\xb7\x01\xf1\x7e\xbb\x89\x0b\x1f\x69\x73\x51\xeb\xee\xe9\xeb\xdf\x00\x00\x00\xff\xff\x7b\x11\x98\x32\xae\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 430, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2a, 0x1c, 0xf4, 0x15, 0xa1, 0x64, 0x1, 0x13, 0x93, 0x78, 0x34, 0xb7, 0x33, 0x71, 0x30, 0x32, 0xc3, 0xef, 0x80, 0x3f, 0x36, 0x41, 0x8d, 0xe3, 0xf, 0x5a, 0x74, 0x75, 0x35, 0x8b, 0x89}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x6b\xdc\x30\x10\xc5\xcf\x59\xd8\xef\x30\xf8\x50\xe4\xe0\x78\x2f\xa5\x87\x1c\xd3\xa4\x10\x1a\x42\x68\xd2\x53\x29\x45\xb6\x27\xae\x5a\x5b\xf2\x8e\xc6\x4d\x84\xd0\x77\x2f\x5a\x3b\x59\xd7\xf1\xd2\xbd\x59\xf3\xe7\xf7\xde\x93\x70\x27\xcb\xdf\xb2\x46\xf0\x3e\xbf\x1b\x3e\x6f\x65\x8b\x21\xac\x57\xeb\x95\x6a\x3b\x43\x0c\x62\xbd\x3a\xf9\x01\x49\xad\xf8\x67\x5f\xe4\xa5\x69\x37\xb5\x39\xb3\xdb\xe6\xac\x22\xf5\x07\x69\xd3\x3a\xbb\x6d\x92\xf5\xea\x64\x3a\xf2\xab\x35\x8a\x8c\xde\xd8\x6d\xf3\x9c\x44\x18\x00\x80\xf7\x24\x75\x8d\x90\x5f\xef\xc8\x36\x84\xc4\xfb\x3c\x84\xe4\xa5\x8d\xba\x8a\xd2\x69\x5c\x60\xd7\x21\x7c\xc1\xce\x58\xc5\x86\x1c\x58\xa6\xbe\x64\xf0\x33\xd4\x95\x66\xc5\xce\x86\x10\x23\x0c\x87\x21\x41\x5c\x5d\xaa\x0d\xb8\x99\xe2\x2e\xef\x63\xaf\x4b\xb8\xc5\xa7\x38\x25\xaa\x02\x4e\xa3\xf9\xfc\xf2\x22\x9d\xda\x18\xf5\x09\xb9\x27\x3d\x69\x8c\xf5\xe3\xbd\x9d\x47\xa9\x85\xba\xa8\x8a\x34\x9b\xc2\x46\x8b\xf1\x30\x38\x7d\xcb\xdf\x7b\x5f\x06\x4e\xa2\x1c\xbc\x91\x59\xb2\x77\xde\xdf\x33\x7d\x52\x64\xf9\x06\x99\x91\x1e\xcc\x8d\x79\x42\x2a\xa5\x7d\x55\x9e\x5e\xf4\xde\x71\x55\x9c\x57\x45\xf6\xaf\xe1\x31\xc3\xb2\xf7\xdd\x4b\x1f\xf6\xa5\x34\x23\x3d\xca\x12\x5f\x44\x3e\x9a\x5e\xb3\x48\x41\x28\xcd\x1f\xde\x67\x80\x44\x86\xd2\xa1\x77\xad\x2d\x12\x8b\xd3\x19\x6e\x79\xf8\x6b\x57\x49\xc6\x0b\x77\x47\xaa\x95\xe4\x3e\xa3\x13\xf1\x3f\x78\x3d\x3d\xb8\x0e\x43\xc8\x8e\x83\x5d\x62\x83\xff\x87\x2d\xef\xde\x63\x83\x25\x1f\xb1\x3b\xb7\xb2\x8c\xb9\x7a\x96\x6d\xd7\xe0\x9b\xe9\xb1\x9e\x82\xf8\xf6\xfd\x30\x69\xff\x60\x7f\x03\x00\x00\xff\xff\x46\xb9\x52\x24\x1d\x04\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 1053, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0xd2, 0x44, 0x9b, 0x1d, 0xeb, 0x54, 0x21, 0xba, 0x11, 0xb0, 0xab, 0xf5, 0x91, 0xbd, 0xf0, 0x3d, 0x77, 0xf9, 0x81, 0x8d, 0x68, 0xc6, 0xc7, 0xc5, 0x85, 0x4b, 0x8b, 0x43, 0xd7, 0xf7, 0x1c}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4b\x6f\xdc\x36\x10\x3e\xef\x02\xfb\x1f\x26\x44\x11\x50\xb6\x4a\x37\x45\xd1\x43\x00\xd5\x68\x12\xa7\x75\xeb\x06\x41\xe2\xf6\x12\x04\x05\x57\x1a\xad\x99\x4a\xa4\x4c\x52\x59\x2f\x04\xfd\xf7\x82\xa4\xa4\xd5\x3e\x1c\x3f\xe2\x3e\x62\x1f\x56\x1a\xce\xcc\x37\x8f\x4f\x43\xb2\xe2\xe9\x5f\x7c\x81\xd0\x34\xec\x75\x78\x7c\xc5\x4b\x6c\xdb\xd9\xd4\xfd\x8b\xb2\x52\xda\x02\x9d\x4d\x01\x00\x48\xc6\x2d\x9f\x73\x83\x47\xe6\xb2\x20\xb3\xe9\x84\x2c\x84\xbd\xa8\xe7\x2c\x55\xe5\xd1\x87\x52\x09\xad\xa4\x5b\xba\xf2\x6b\xc6\x6a\x21\x17\x86\x38\x3f\xce\xba\x69\x34\x97\x0b\x04\x76\xea\x9d\x9a\xb6\x25\x4d\xc3\xda\x96\xf4\xcb\x28\x33\x87\x1b\x39\x03\xbb\xaa\x5c\x4c\x6f\xad\x7e\x29\xb4\xb1\x67\x68\x2d\xea\x73\x75\xa6\x96\xa8\x53\x6e\x10\xd8\x89\xb4\xc2\xae\x42\xb0\x6f\xb0\x52\x60\xac\xae\x53\x0b\x4d\x70\x97\xcd\xe1\xc0\x85\xc2\x5e\x3c\x9b\x4d\x7d\x36\x47\x47\x80\x57\x98\xd6\x16\x21\xe7\xa2\x00\x8d\xb6\xd6\x12\xbe\x7e\x02\x5c\x66\x80\x5a\x6f\xa8\x98\x3a\x4d\xd1\x98\x5e\x2b\x55\xb5\xb4\xa0\xd5\xd2\x78\x6d\x29\x8a\xd9\x34\xaf\x65\x0a\x54\x3b\xec\x83\x3b\x85\x1a\xc1\x73\xe7\x8e\x46\x40\x85\xb4\xdf\x7f\x17\x3b\x74\xa5\xa3\x2e\xf6\x8f\x5c\x77\x78\x7e\xd5\xcb\x26\xa8\x35\x3c\x4d\xc0\xa1\xb1\x6c\xce\x7e\x42\x4b\x1f\x7b\xa5\x18\x88\xc1\x02\x53\x1b\x6c\xe8\x41\x04\xb9\x56\xa5\x6b\xe8\x39\x9f\x17\x5d\x3b\x49\x14\xdc\x88\xdc\x61\xc1\xa3\xc4\xa5\xd0\xe1\x4d\x26\x43\x29\xe2\x50\x07\x27\x6c\xc3\xcf\x38\xff\xd8\xa7\xfd\xf9\xc5\xe4\x79\x8e\xa9\xc5\xec\xe1\xea\x79\x2a\x0d\x6a\x4b\x6f\x6d\xe5\x00\x36\x04\xd7\xb4\x02\x34\x9a\xba\xb0\x5e\x3a\x2e\xff\xc9\x15\xa6\x94\x08\x8f\xea\xba\xa4\xb6\xca\x4d\x9b\xe6\x83\x12\x12\xd8\x73\x55\xd4\xa5\x74\x42\x03\x24\x06\xe2\x90\x3e\xf2\xa2\x46\xa0\x4d\x33\xaf\x45\x91\xfd\xe1\xde\x7e\x56\x45\xb6\xa1\xdc\xb6\x11\x19\x3e\x98\x0d\x79\xfc\xa9\x24\xbf\xda\x48\x8a\x35\x4d\x2e\x64\xf6\x1b\xaf\x80\x0d\x4b\x2f\x05\x16\x4e\xd4\xb6\xdd\x17\x17\xcd\xa6\xbb\xb4\x18\x73\xc2\x77\xd3\xf1\xa1\x97\x85\xa2\xb0\x37\x6a\x69\x7e\xec\x5a\x49\xa3\xff\x27\x31\x7e\xaf\x32\x6e\xf1\xd9\xea\xb5\x16\x25\xd7\xab\x5f\x71\x45\xab\xe1\xd1\x0f\xbd\xe1\xed\x7c\x55\xe1\x0d\xe5\xfd\x07\x38\x54\xfb\x00\xb7\xe8\x03\x06\x2d\xec\xa5\x50\x72\xec\x49\x94\x1c\xc3\xf2\x02\x35\x6e\x66\xb0\xd6\x6c\x5b\x48\xe0\xf8\xdf\x62\x50\xbc\x2e\x69\x18\x33\xb0\x6f\xcc\x40\xa8\xc5\x06\xab\x9c\xa8\xed\xab\xf4\xa5\x71\xeb\x05\x16\x78\x27\x6e\xdd\x8b\x20\x99\x47\xd9\x37\xd3\x6f\x45\x81\x18\xee\xd3\x1c\x78\xb8\xee\x38\x8c\x4f\xb5\x67\x5e\x5b\x90\x0a\x34\xa6\x4a\x67\xdb\x46\xbe\x45\x7b\x8c\x2e\xb8\xd9\xb2\x70\x47\x93\x07\xe9\xea\x5b\xbf\x99\xde\xad\xab\xdb\x93\x20\x5e\xf7\x77\x72\xfb\x79\xf2\x34\x01\x89\x4b\xba\x3d\x55\x66\xd3\x7d\x9b\xff\xad\xdd\xae\xcf\x07\xd7\xef\x49\x0f\xc5\xae\x7e\x1f\x49\x12\x30\x97\x05\x3b\xd1\xfa\x95\x72\x5c\xd9\x43\x32\x29\x8a\x38\xf4\x6a\xc4\xb2\x9b\x98\xe9\x8d\xae\xa1\xe6\x1d\x0a\x72\xe3\x31\x06\xcb\xca\xae\xc0\x14\x22\xc5\xbb\x73\x77\xdb\xf8\x3f\xe4\xf0\xc9\x15\x2f\xab\x02\x29\x86\xdf\x9d\x1d\xab\x5b\x8f\x80\xbe\x7b\xbf\xc3\xe1\xad\x21\xe5\x4e\xa5\x85\x30\x16\x76\x55\x83\xc2\x24\xd5\xc2\xa2\x16\xdc\x51\xb5\x43\x64\xbd\xac\x53\x71\x4e\x2a\xae\x79\x69\xe0\xdd\x7b\x21\x2d\xea\x9c\xa7\xd8\xb4\xa3\xe5\x54\xc9\x4c\x58\xa1\x24\x24\x40\xba\xbb\x81\xe3\x55\x81\x92\xf6\xde\x22\xf8\x01\xbe\xe9\x03\x9b\x78\xb3\x5c\xf3\x45\x89\xd2\x3a\xc7\xe1\xe6\xd1\xaf\xe6\x4a\xc3\x9f\x31\xa0\xff\x82\xfc\x76\x38\x04\x3a\x78\x98\xac\xcd\x13\xe0\x55\x85\x32\xa3\x83\x28\x06\x64\xfd\x4b\x34\x58\x88\x1c\x1e\x21\x93\xca\x9f\xdf\xc6\x5c\x1d\xff\x75\xb9\x0e\x3e\xc3\xbb\x73\xe8\x9f\x9e\x44\xbb\x66\xed\xae\xc8\x7d\x16\x6c\x8e\x76\x89\x28\x3f\x07\xee\xdb\x9b\xe1\xfa\x4e\x4c\xd6\x6d\x38\x4c\x80\x84\x59\x40\xe0\x10\xba\x5b\x1d\x3b\xd7\xa2\x3c\xc3\xdc\xd2\x5e\xf0\x8b\x12\x72\x5c\x33\x02\x24\x8a\x81\x70\x99\x91\xbe\x68\x23\xac\xcb\x1a\xf5\x2a\x06\xae\x17\x66\xd8\xf7\xfc\x75\xed\x54\xd2\x7b\xce\x2b\x72\x38\xc4\x1c\x77\x95\x60\x8c\x8d\x52\xbe\x76\xba\x8c\xa6\x88\x63\xf8\xfa\x68\x32\xae\xc8\x58\x61\x98\xc4\xe1\x43\xa3\x8f\x83\x74\x94\x54\x40\xee\x6e\xd1\xb3\xe9\xdf\x01\x00\x00\xff\xff\x91\xe5\xa1\x71\x66\x0f\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 3942, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0xdb, 0x49, 0xd8, 0xd8, 0xf3, 0x38, 0x6d, 0xb7, 0xaf, 0x5, 0xe, 0xb7, 0x65, 0x3d, 0xc5, 0xd, 0xab, 0xd7, 0x6c, 0x2d, 0x22, 0x78, 0x3a, 0xb5, 0x2, 0xa, 0xb9, 0x47, 0xc7, 0x69, 0x19}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"example.gotemplate": exampleGotemplate,
	"model.gotemplate":   modelGotemplate,
	"new.gotemplate":     newGotemplate,
	"repo.gotemplate":    repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"example.gotemplate": {exampleGotemplate, map[string]*bintree{}},
	"model.gotemplate":   {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":     {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":    {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
