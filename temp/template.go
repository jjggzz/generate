// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/example.gotemplate (5.699kB)
// repository/model.gotemplate (484B)
// repository/new.gotemplate (1.236kB)
// repository/repo.gotemplate (6.082kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampleGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xcf\x8b\xda\x40\x14\xc7\xcf\x1b\xc8\xff\xf0\x08\x3d\xc4\x22\x59\xd6\xa3\xb8\x2b\xad\x6b\x8b\xb0\xc4\x1e\xa4\x97\x65\x0f\xa3\x79\xa6\x83\x93\x99\x38\x99\x50\x65\x98\xff\xbd\x4c\x26\xb1\x96\xda\x62\x65\x53\x16\xa2\x17\xe3\xfb\xce\xaf\xef\xe7\xbd\x4c\xc6\xdc\xde\xc2\x44\x24\x08\x29\x72\x94\x44\x61\x02\xcb\x3d\x14\x5b\xb6\x4b\x91\x47\xf0\x38\x87\x78\xbe\x80\xe9\xe3\x6c\x11\xf9\x5e\x4e\x56\x1b\x92\x22\x68\x1d\x7d\x71\x97\x31\xc9\xd0\x18\xdf\xf3\x3d\x9a\xe5\x42\x2a\x08\x7d\x0f\x00\x40\x6b\x49\x78\x8a\x10\xcd\xaa\x70\x61\x4c\xa0\x75\x64\x4c\xd0\xc8\xc8\x13\xdb\xaf\x67\xbb\xaa\x7d\x5e\x8d\x39\xe5\x8a\xaa\xbd\x1b\x72\xba\x23\x59\xce\x10\x0a\x25\xcb\x95\x02\xed\x7b\x37\x2b\x49\x15\x4a\x4a\xe0\xf9\xe5\x28\x7a\xb3\x96\x24\xcd\x90\x2b\x3b\xae\x6d\x4e\x79\x6a\xc3\x39\x91\x24\xbb\x03\xf7\xa1\x5c\xa1\x5c\x93\x15\x6a\x73\xd0\x06\xa7\x35\x2e\xbe\x12\x56\xa2\xd3\x96\x42\x30\x1b\x5c\xa2\xfa\x8e\xc8\x9d\x52\x07\x8d\xef\x55\xc6\xd7\x25\x5f\x41\x88\x3b\x78\xaf\xf5\xbb\x53\x1e\x7a\x30\x61\x48\x64\xd8\xfb\x63\x8b\xca\x08\xee\xa2\x83\xc3\xfb\xb7\xe2\xb1\x6a\x2f\x51\x95\x92\x03\xee\x6a\xc7\x87\xe4\x3a\x2b\x9f\x28\xb2\xa4\xb0\xd9\x3c\x03\xc5\x07\x9e\x68\x1d\x55\x5d\x9c\x32\x2b\xe2\x92\xb1\x7f\x83\x43\xf2\x1c\x79\x12\x1e\x05\xfb\xf0\x36\x70\x35\x33\x0f\x21\x20\x3c\xb1\x45\x3d\x11\xac\xcc\xb8\x73\x04\xb4\x00\x5e\x32\x16\xf4\xa1\x1e\x73\xa8\x64\x89\xa6\x77\x02\xf2\x85\x2c\x85\xea\x18\x4e\xa1\x5a\x45\x3a\xdd\x96\x84\x2d\x44\x58\x19\x82\x46\x5b\xec\x73\x34\xa6\x1b\x90\xef\x61\x1c\xf4\xc1\xad\x63\xe8\xbe\x5f\x8d\x6e\x2c\xd4\x15\xf0\xe8\xa1\x45\xc2\x9f\x25\x12\x85\x72\xf1\x8d\xf0\x0e\x23\xfe\x4f\x84\xe7\xf2\x5a\xcd\x0f\xe7\xed\x17\x97\x90\x7e\xc2\xa2\xe8\x78\x21\x8f\x5a\x2c\xe4\x06\xef\xb5\x8a\x0d\x8c\xda\x7c\xea\xcd\x9a\x0a\x7e\x7e\xe9\x22\x5b\xca\x21\x1c\xf7\xda\x3c\x53\x74\x1c\xb0\x3d\x13\xb7\x0c\xf9\xa3\x5b\x57\x58\x9b\xfd\x95\x72\x3d\xe9\xa0\x93\x3b\x47\xdd\x09\xc6\x60\xd5\xdf\x36\x91\xbb\xbe\x5b\x46\xfd\x73\xd0\x3f\x9e\xe4\x75\xff\xba\xc4\x42\x5d\xd3\xf4\xb7\x7b\xa4\x9d\x54\x69\x4d\xd7\x80\x5b\xf8\xc9\x14\x02\xe7\x3c\xb8\xf4\x1d\xc9\x13\xdd\x60\x87\x1f\xc6\x8c\x6e\xb0\xb5\x43\x65\x2c\x54\xc7\xf1\xda\x5b\xe1\x6c\xc4\x87\x37\xb7\x47\x97\x3f\x02\x00\x00\xff\xff\x9c\x1d\x14\x57\x43\x16\x00\x00")

func exampleGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_exampleGotemplate,
		"example.gotemplate",
	)
}

func exampleGotemplate() (*asset, error) {
	bytes, err := exampleGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example.gotemplate", size: 5699, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0x2d, 0x34, 0xb3, 0x53, 0xa8, 0x51, 0x73, 0x1f, 0x97, 0xe7, 0x6d, 0xdd, 0x80, 0x56, 0x32, 0xba, 0xc5, 0x3b, 0xb4, 0x8a, 0xcc, 0x4e, 0x1c, 0x1a, 0xf7, 0x9e, 0xe6, 0xe, 0xd, 0x7f, 0x46}}
	return a, nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcd\x4a\xc3\x40\x10\xc7\xcf\x06\xf2\x0e\x43\x4e\x0a\x92\xbd\xe7\x26\xfd\x80\x42\x69\x05\x73\x93\x42\xb7\xc9\x10\xa2\xc9\x6e\xdc\x9d\xa2\x61\xd9\xb3\xa0\x08\xde\xbc\x09\xde\x7a\x51\x10\xf1\xe4\xf3\xb4\xea\x5b\xc8\x26\x6d\x2d\xbd\xcd\xcc\x7f\x7e\xff\xf9\x60\x0c\x3a\x32\x45\xc8\x50\xa0\xe2\x84\x29\xcc\x6a\xd0\x57\xc5\x4d\x86\x22\x84\xee\x18\x46\xe3\x18\x7a\xdd\x41\x1c\xfa\x5e\xc5\x93\x4b\x9e\x21\x18\x13\x9e\xb6\xe1\x88\x97\x68\xad\xef\xf9\x5e\x5e\x56\x52\x11\x1c\xfa\x1e\x00\x80\x31\x8a\x8b\x0c\x21\x1c\x34\x65\x6d\x6d\x60\x4c\x68\x6d\xb0\x91\x51\xa4\x8e\x3b\x72\xe8\xb6\xb9\x27\x28\xa7\x5a\x3b\x81\x31\xf8\x79\x59\x2c\x1f\x1f\x22\x63\xc2\x98\xcf\x8a\xed\x28\xc6\x20\x91\x65\x89\x82\x9c\xd4\x22\x27\x42\x48\xe2\x94\x4b\xe1\x3a\xa8\xae\xdc\x8e\x1b\xbf\x16\x04\x4d\x6a\x9e\x10\x18\xdf\x3b\xd8\x1b\xd8\xcf\xb1\x48\xb5\xb5\xc6\x84\x4d\xb8\x06\x36\x69\x5c\x57\x2e\x9d\xa6\xb3\xc8\x1d\xd1\x91\xc5\xbc\x14\x6d\x4f\x00\x17\x5a\x0a\x57\x3e\x23\xd5\xcf\x95\xa6\x21\x12\xa1\x8a\xe5\x50\x5e\xa3\x4a\xb8\x46\xd8\xf5\x3c\x96\x65\x4e\x58\x56\x54\x07\x53\x60\x0c\x96\xaf\x4f\xab\xb7\xcf\x08\xce\xf7\x7c\x27\xf0\xfd\xfe\xb5\x7c\xbe\x8f\xfe\x85\x76\x8b\x09\xac\x3e\x16\xbf\xb7\x77\x2d\xd2\x38\xef\xde\x3e\x69\x8e\x5b\xff\xd6\xba\xcf\x36\xf1\x5f\x00\x00\x00\xff\xff\x54\x35\x1d\x92\xe4\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 484, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xe0, 0xa7, 0xc1, 0xf8, 0x1, 0xa8, 0x7c, 0x2e, 0xc, 0x67, 0x91, 0x5b, 0x65, 0x32, 0x92, 0xce, 0x92, 0x51, 0x1, 0x7d, 0x29, 0x71, 0xf7, 0xc, 0xf5, 0xda, 0xd7, 0x2a, 0x72, 0x43, 0x6e}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4f\x6f\x9b\x40\x10\xc5\xcf\x41\xe2\x3b\x8c\x38\x54\x10\x39\x70\xa9\x7a\xc8\x31\x71\x2a\x59\x8d\x9c\xa8\x71\x4f\x55\x55\x2d\x30\xa1\xdb\xc2\x2e\x9e\x1d\x9a\x20\xb4\xdf\xbd\x5a\x43\x62\x4a\x70\xed\xde\xd8\xf9\xf3\xde\xef\x2d\x90\x24\x70\xad\x73\x84\x02\x15\x92\x60\xcc\x21\x6d\xc1\x6c\xcb\xe7\x02\x55\x0c\xcb\x3b\x58\xdf\x6d\xe0\x66\xb9\xda\xc4\xbe\x57\x8b\xec\x97\x28\x10\xba\x2e\xbe\xef\x1f\xd7\xa2\x42\x6b\x7d\xcf\xf7\x64\x55\x6b\x62\x08\x7d\xef\xec\x3b\x04\x85\xe4\x1f\x4d\x1a\x67\xba\x4a\x0a\x7d\x61\xb6\xe5\x45\x4e\xf2\x37\x52\x52\xb5\x66\x5b\x06\xbe\x77\x36\x1e\xf9\x59\x69\x49\x5a\x25\xce\x36\x70\x62\x00\x00\x5d\x47\x42\x15\x08\xf1\x6a\xa7\x6c\xac\x0d\xba\x2e\xb6\x36\x78\x69\xa3\xca\x9d\x75\xe4\x16\xb8\xad\x11\x3e\x63\xad\x8d\x64\x4d\x2d\x18\xa6\x26\x63\xe8\x26\x52\x37\x8a\x25\xb7\xc6\x5a\x17\xa1\x3f\xf4\x09\xdc\xea\x5c\xad\x97\x9b\x38\xee\xf2\x3e\x36\x2a\x83\x35\x3e\xb9\xa9\x30\x4f\xe1\xdc\xc1\xc7\xcb\xab\x68\x8c\x31\xf8\x13\x72\x43\x6a\xd4\x18\xea\xa7\xb3\x5d\x3a\xab\x99\x7a\x98\xa7\xd1\x62\x2c\x36\x20\xba\x43\x4f\xfa\x56\x7f\xcf\x3e\x2f\x38\x8a\x72\xf0\x46\x26\xc9\xde\x75\xdd\x03\xd3\x47\x49\x86\x6f\x91\x19\x69\xa3\x6f\xf5\x13\x52\x26\xcc\xab\xf3\xf8\xa2\xf7\xc4\x79\x7a\x99\xa7\x8b\xbf\x81\x87\x0c\xf3\xec\xbb\x37\x7d\x98\x4b\x2a\x46\x7a\x14\x19\xbe\x98\x5c\xeb\x46\x71\x18\x41\x28\x15\x7f\x78\xbf\x00\x24\xd2\x14\xf5\xbd\x95\x32\x48\x1c\x9e\x4f\xe4\xe6\x87\xbf\xd4\xb9\x60\xbc\x6a\xef\x49\x56\x82\xda\x4f\xd8\x86\xee\x3f\x78\x3d\x6d\xda\x1a\xad\x5d\x9c\x26\xb6\xc4\x12\x8f\x8b\xcd\xef\x3e\x60\x89\x19\x9f\xb0\x3b\x45\x99\xcf\x73\xf3\x2c\xaa\xba\xc4\x37\xd3\x43\xfd\x3f\x03\x1d\x51\xfb\x77\xa2\xe3\xcb\x5f\xbf\x1d\x0e\xb5\xff\x76\xfe\x04\x00\x00\xff\xff\x48\x30\x36\xce\xd4\x04\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 1236, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x56, 0xa8, 0x5e, 0x36, 0x69, 0x19, 0x49, 0xf8, 0x81, 0x1c, 0xf6, 0x48, 0x1e, 0xc7, 0x2, 0x5b, 0x9f, 0x83, 0xef, 0xbc, 0x26, 0x61, 0x84, 0x87, 0x6c, 0xd8, 0x19, 0x4e, 0x18, 0xfa, 0xd3}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x6d\x6f\xdb\xb6\x13\x7f\x4d\x03\xfe\x0e\x57\xe1\x8f\x42\x6a\xf4\x97\xd7\x62\xd8\x8b\x02\x5e\xb0\x26\xe9\x96\x2d\x4b\x8b\xd6\xdb\x9b\xa2\x18\x68\xe9\xe4\xb0\x93\x48\x85\xa2\xea\x18\x82\xbe\xfb\x40\xea\xc1\xb2\x2d\xf9\x29\xee\xd6\xe6\x45\x2c\x1d\x8f\x77\xbc\xbb\xdf\x3d\x50\xa3\x11\x5c\x88\x00\x61\x86\x1c\x25\x55\x18\xc0\x74\x01\xe9\x7d\xf4\x30\x43\xee\xc1\xe5\x1b\xb8\x7d\x33\x81\xab\xcb\xeb\x89\x37\x1c\x24\xd4\xff\x9b\xce\x10\xf2\xdc\x7b\x5b\x3e\xde\xd2\x18\x8b\x62\x38\x18\x0e\x58\x9c\x08\xa9\xc0\x1e\x0e\x00\x00\xac\x80\x2a\x3a\xa5\x29\x8e\xd2\xfb\xc8\x1a\x0e\x88\x35\x63\xea\x2e\x9b\x7a\xbe\x88\x47\x9f\x62\xc1\xa4\xe0\x7a\xe9\xc1\xac\xa5\x4a\x32\x3e\x4b\xad\xe1\xc0\xd1\xa2\xd4\x22\xd1\x3a\xde\x2b\xf9\x9a\xc9\x54\xdd\xa0\x52\x28\x27\xe2\x46\xcc\x51\xfa\x34\x45\xf0\xae\xb8\x62\x6a\x51\x2a\x7f\x87\x89\x80\x54\xc9\xcc\x57\x90\x97\xda\x83\x29\x3c\xd3\xc2\xbd\xcb\x57\xc3\x81\x39\xdd\x68\x04\xf8\x80\x7e\xa6\x10\x42\xca\x22\x90\xa8\x32\xc9\xe1\xff\xcf\x81\xf2\x00\x50\xca\x15\x96\x34\xf3\x7d\x4c\xd3\x9a\xcb\x17\x19\x57\x20\xc5\x3c\x35\xdc\x9c\x45\xc3\x41\x98\x71\x1f\x6c\xa9\x75\x3f\x3b\xe8\xa8\x0e\x5c\x68\x71\xb6\x03\x36\xe3\xea\x87\xef\x5d\xad\x5d\x48\xa7\x3a\xfb\x67\x2a\x2b\x7d\x66\xd5\xd0\x08\x4a\x09\x2f\xc7\xa0\xb5\x79\xc1\xd4\xfb\x19\x95\xfd\xd4\x30\xb9\x60\xa5\x18\xa1\xaf\xca\x3d\xf6\x33\x07\x42\x29\x62\x1d\xa0\x09\x9d\x46\x55\x78\x2c\xa7\x14\xc3\x42\xad\x0b\x9e\x8c\xb5\x09\x95\x3e\x42\x1a\x57\xb8\xa5\x1f\x34\xb1\x28\x7f\xda\xf6\xbb\xc6\xec\xc7\x3b\x93\x86\x21\xfa\x1a\x66\x27\xf3\xe7\x35\x4f\x51\x2a\x7b\xef\x5d\x5a\xc1\x0a\xa1\x27\x14\x20\x31\xcd\x22\x65\xa8\x6d\xf7\x5f\x3d\xa0\x6f\x5b\xcc\x68\xd5\x51\x12\x6b\xee\xb6\xf3\xfc\x93\x60\x1c\xbc\x0b\x11\x65\x31\xd7\xc4\x14\x2c\x17\x2c\xad\xe9\x33\x8d\x32\x04\x3b\xcf\xa7\x19\x8b\x82\x3f\xf5\xdb\x2f\x22\x0a\x56\x98\x8b\xc2\xb1\xf2\x5c\x52\x3e\xc3\x35\xba\xbb\xcd\xc8\xff\xad\x18\xe5\xe5\x79\xc8\x78\xf0\x3b\x4d\xc0\x6b\x96\x5e\x33\x8c\x34\xa9\x28\xf2\x1c\x79\x50\x14\xce\x70\xb0\x09\x8b\x36\x26\x4c\x34\x35\x1e\x6a\x5a\xe9\x14\xef\x9d\x98\xa7\x3f\x55\xa1\xb4\x9d\xaf\x13\x18\x7f\x24\x01\x55\xf8\x6a\xf1\x56\xb2\x98\xca\xc5\x6f\xb8\xb0\x93\xe6\xd1\x14\xb1\xe6\x6d\xb2\x48\x70\x87\x7b\xbf\x00\x86\x32\x73\xc0\x35\xf8\x40\x8a\x0a\x3a\x21\x34\x3e\x37\x20\x1a\x9f\xc3\xfc\x0e\x25\xae\x5a\xb0\xe4\x2c\x0a\x18\xc3\xf9\xbf\x85\x20\x77\xe9\xd2\xb2\xcc\x40\x57\x99\x81\xd2\x17\x2b\xa8\xd2\xa4\xa2\xf6\xd2\xb7\x86\xad\x4b\x8c\xf0\x20\x6c\x1d\x05\x90\xc0\x68\xe9\xaa\xe9\x7b\x41\xc0\x85\x63\x82\x03\xa7\x8b\x8e\xd6\xb1\x2d\x3c\xd3\x4c\x01\x17\x20\xd1\x17\x32\x58\xdf\x64\x42\xd4\xb1\xe9\x8e\xa6\x6b\x3b\xf4\xb0\x71\x92\xa8\xbe\x37\xcd\xf4\xb0\xa8\xae\x57\x02\x77\x19\x5f\xb2\x7f\x3d\x79\x39\x06\x8e\x73\x7b\xbd\xaa\x0c\x07\x5d\xcd\x7f\x6f\xb1\xcb\xf9\xa0\xbf\x27\x9d\x0a\x5d\x75\x1f\x19\x8f\xf5\xf8\xe8\x5d\x49\x79\x2b\x34\x56\x3a\x40\xc6\x59\xe4\x96\xb1\x6a\xa1\x6c\x17\x32\xcd\xa6\x1e\x68\x1e\xe0\x90\xaf\x76\x8c\xa9\xbb\xd5\xd5\x03\x8d\x93\x08\x6d\x2c\x7f\x37\x3a\x4d\xb5\xfe\x05\x7a\x95\x2f\x99\x42\xc9\xa8\x86\x5b\xa5\xdd\xab\x69\x25\x87\x9e\x4e\x13\x2a\x69\x9c\xc2\x87\x8f\x8c\x2b\x94\x21\xf5\x31\x37\xee\xd4\xeb\xdd\x3d\xa7\xda\x31\x06\x9a\x24\xc8\x03\xbb\x7c\x3f\x5d\x27\x72\x6a\xe5\xa6\x21\x2d\x4f\xea\x0b\x1e\x30\xc5\x04\x87\x31\x58\x56\x83\xb2\x08\xb9\x5d\x9b\xe5\xc0\x8f\xf0\x5d\x1b\x6c\x7a\x5f\x28\xe9\x2c\x46\xae\xb4\x91\xe5\xd5\x64\xb9\x1e\x0a\x09\x7f\xb9\x80\x26\x25\x8d\xad\x8d\xd7\x5a\x52\x0c\x67\x23\xa5\x31\xbc\x21\xb9\x80\x5e\xfd\xe2\xac\x6e\x63\x21\x3c\x41\x8f\x0b\x33\x1a\xae\xcb\xd4\x7f\x3d\xde\x04\xf4\xcc\xd3\xf3\x35\x79\xc5\x86\x78\xf4\xa6\xa8\xe6\x88\xfc\x58\x15\x2f\xfa\x55\xb4\x1e\x97\xde\x3f\x1b\x83\x55\x16\x14\x0b\xce\xa0\xba\xec\x79\x13\xc9\xe2\x1b\x0c\x95\x5d\x13\x7e\x15\x8c\xb7\x5d\x64\x81\xe5\xb8\x60\x51\x1e\x54\x17\x98\x5a\xfa\x7d\x86\x72\xe1\x02\x95\xb3\xb4\xe9\x9b\xe6\xba\x77\xcd\x1f\x31\x53\x59\x67\xcd\x89\xdd\xca\x03\x9e\xe7\x3d\xaa\x6d\xf6\x77\xf6\x96\x09\x8f\x55\xf2\xad\x4e\x4e\x7b\xd6\xb9\xae\x62\x45\xb6\x57\x2a\xd2\x5f\xa6\x48\x57\x5d\x20\x7d\x45\x81\x90\xbe\x72\x40\xc8\xf6\x42\x40\x08\x39\x20\xff\x09\x21\x1b\x69\x4f\x08\x21\x7b\xa4\x3a\x21\xe6\x72\x66\x04\x6c\x26\xf6\x1e\x42\x5e\xb4\x84\x98\x7f\x27\xce\x5b\x23\x74\x6b\xc6\x6e\x19\x72\x7b\x73\x72\xfb\xa5\x15\xda\xb7\xd6\x03\x92\xf0\x00\xa9\x3b\xb3\xae\x37\xef\x30\x4e\xd4\x02\xd2\x88\xf9\x78\xf8\x6c\xbc\xbe\xf9\x3f\x9c\x91\xf7\xcf\xdf\x0f\x1f\x37\x66\xe4\xb5\xc9\x43\xa7\x59\xc4\x52\x05\x9b\xac\x25\xc3\x8e\x8c\x37\x2c\xfd\x59\xdf\x2c\x77\x4d\x04\xbd\xd9\x6f\x16\x7b\x2b\x40\xb9\xba\x7b\x1c\x38\xac\x12\x54\x3b\x76\x0e\x01\x47\x0c\x02\x1d\xc3\xc0\xde\x03\xc1\x11\x43\x41\x87\xba\x3a\x12\xa7\x2e\x31\xb0\xfc\x64\x09\x3b\xe7\x83\xe3\xee\x43\x5b\x87\x83\xad\xbd\xbb\xd5\xa4\x35\xc2\x97\x9f\x3e\xda\x1e\x69\x33\x34\x35\xaa\x4c\x34\xfb\x69\x49\xdd\x28\x56\x55\x95\x19\x0e\xfe\x09\x00\x00\xff\xff\xcd\xde\x7f\x8d\xc2\x17\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 6082, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0x72, 0xad, 0x68, 0xb2, 0x31, 0xa6, 0xe8, 0xcf, 0x85, 0x48, 0xcc, 0x30, 0x8a, 0x7e, 0xf5, 0x43, 0xa0, 0x8f, 0x51, 0x9f, 0x46, 0x1f, 0x8, 0x9c, 0xd9, 0x30, 0x7b, 0x73, 0x46, 0x84, 0xbd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"example.gotemplate": exampleGotemplate,
	"model.gotemplate":   modelGotemplate,
	"new.gotemplate":     newGotemplate,
	"repo.gotemplate":    repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"example.gotemplate": {exampleGotemplate, map[string]*bintree{}},
	"model.gotemplate": {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate": {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate": {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
