// Code generated by go-bindata. DO NOT EDIT.
// sources:
// repository/model.gotemplate (495B)
// repository/new.gotemplate (1.016kB)
// repository/repo.gotemplate (1.483kB)

package temp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4a\x03\x41\x10\x86\x6b\x0f\xee\x1d\x86\xc3\x22\x69\x76\xfb\xeb\x44\x0c\x68\xa1\x16\xe9\x24\x90\xf5\xb2\x1e\x67\xb2\xb3\xc7\xde\x1e\x12\x86\xad\x05\x45\xb0\xb3\x13\xec\xd2\x28\x88\x58\xf9\x3c\x89\xfa\x16\xb2\xbb\x49\xd4\xeb\x66\xe6\x9f\x6f\x66\xfe\xa9\x45\x31\x15\xa5\x04\x22\x76\x1a\xc3\x63\xa1\xa4\x73\x69\x92\x26\x95\xaa\xb5\xb1\xd0\x4b\x13\x00\x00\x22\x23\xb0\x94\xc0\x0e\xd0\x56\x76\x7e\x18\x44\xe7\x32\x22\xe6\x5c\xb6\xe9\x91\x38\xf1\x70\xdf\xf3\x1d\xa2\xf1\x02\xe7\xf0\xf5\xb4\x58\xde\xdf\xe5\x44\x6c\x28\xce\x67\xdb\x7d\x9c\x43\xa1\x95\x92\x68\xbd\x14\x91\x3d\x44\x6d\x85\xad\x34\xfa\x0e\x3b\xaf\xfd\xa1\x9b\x79\x11\x84\xc6\x9a\xb6\xb0\x40\x69\xb2\xd3\x59\x38\xa8\xe4\x6c\xd2\x38\x47\xc4\x42\xb8\x06\x36\xe9\x70\x5e\xfb\x74\x4c\xb4\xcb\x06\x46\x28\x79\xa5\xcd\x34\xf6\xe4\xde\xd5\x89\x51\x43\x51\x3a\x97\xc1\x65\xa3\x31\x94\x8e\x1a\x8d\xb1\x36\x06\xce\x61\xf9\xfc\xb0\x7a\x79\xcf\xe1\x8c\x88\xed\xeb\x59\xab\x30\xe2\x23\xf8\x7c\xfd\x58\x3e\xde\xe6\xbf\x42\x5c\x36\x82\xd5\xdb\xe2\xfb\xfa\x26\x22\xe1\x8a\xbf\x16\x47\xc1\xc3\xfa\x85\x2e\x4d\x2e\x5a\x2c\xa0\xd7\x75\xdc\x87\xed\xdf\x7a\x7d\x6f\xbf\xc2\x32\xd8\x37\xd2\xb6\x06\x21\xfb\xff\xd9\x2c\x8c\x5a\x8f\xfd\x09\x00\x00\xff\xff\x9b\xbe\xd9\x88\xef\x01\x00\x00")

func modelGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_modelGotemplate,
		"model.gotemplate",
	)
}

func modelGotemplate() (*asset, error) {
	bytes, err := modelGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.gotemplate", size: 495, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0xf5, 0x63, 0xcc, 0xa2, 0x75, 0x10, 0x44, 0xf7, 0x24, 0xe8, 0x1a, 0xb9, 0x94, 0x7b, 0x23, 0x35, 0xb8, 0x50, 0x4d, 0xc5, 0x29, 0x5d, 0xcc, 0xbf, 0xfc, 0xa2, 0x2f, 0x5a, 0xcc, 0x43, 0x9d}}
	return a, nil
}

var _newGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x8e\xda\x30\x10\xbd\xaf\xb4\xff\x30\xe2\x50\x25\x2b\x94\xdc\xf7\xb8\xa2\x48\x55\x11\x42\x85\x9e\x2b\x27\x19\x82\x0b\xb1\xc3\x78\x22\xe4\x5a\xf9\xf7\xca\x24\x25\x2e\x24\x62\x7d\xc9\x4c\x66\xde\xcc\x7b\xcf\x72\x2d\xf2\xa3\x28\x11\x9c\x4b\x36\x5d\xb8\x16\x15\xb6\xed\xeb\xcb\xeb\x8b\x73\x72\x0f\x78\x86\x64\x49\xa2\xc2\x8b\xa6\xa3\xaf\xc1\xac\xd4\x54\xcd\xc0\xf7\x00\x00\xc8\xaa\xd6\xc4\x10\x75\x99\x3f\xb3\x52\xf2\xa1\xc9\x92\x5c\x57\xe9\x6f\xa9\xfe\x1c\x9a\xf4\x0a\x19\x3a\x7e\x4d\xf5\xa4\x85\x14\x27\xcc\xd9\xa4\x95\x35\xe7\x53\x0f\x89\x3d\x1b\x1f\xec\x1b\x95\xc3\x1a\x2f\x3f\xb0\xd6\x51\x91\xc1\x9b\xc7\x24\x8b\x8f\x18\xfc\x1f\x23\x59\x93\x05\x37\xec\x21\xe4\x86\x54\x50\x0c\x6a\xfe\x38\x47\x42\x95\x08\xc9\x57\xc5\x92\xad\x69\x5b\x6f\x44\x97\x74\x3e\x78\xe8\xbb\x5f\x39\xf2\x3f\x2a\xb2\x78\x7e\x3f\x10\x55\xf1\xcf\x19\x7f\xfa\xb0\xff\x3c\xee\xfb\x5f\xd7\xf8\x92\x40\xe6\x48\xc3\xa4\xea\x2f\xce\x6d\x99\x96\x92\x0c\xaf\x90\x19\x69\xa7\x57\xfa\x82\x94\x0b\x73\x63\x30\x8c\x81\x3b\x6b\x8a\xec\xbd\xc8\xe6\xd3\x42\x7a\x9d\x5d\xca\xb6\xc6\xf0\x0a\x0c\x53\x93\x73\x38\xf2\x73\x4e\x4f\xeb\x0b\x27\x05\x16\xdf\x18\x4c\x39\x7b\x65\x36\xed\x9a\x54\x8c\xb4\x17\x39\x86\x5c\xbf\x29\x83\xc4\xd1\xdb\x1d\x2c\x06\x24\xd2\x34\xf4\xfd\xac\x0b\xc1\xf8\xbc\x6f\x81\x27\x64\xfc\xb0\x1b\x92\x95\x20\xfb\x1d\x6d\xe4\x9f\xdb\x2d\xdb\xd9\x7a\x0c\xb6\x45\xff\x12\x9e\xc3\x1e\x08\xcc\xaf\x83\xe2\xf1\x0b\xeb\x83\xbf\x01\x00\x00\xff\xff\x91\x7a\x46\xf2\xf8\x03\x00\x00")

func newGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_newGotemplate,
		"new.gotemplate",
	)
}

func newGotemplate() (*asset, error) {
	bytes, err := newGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "new.gotemplate", size: 1016, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x51, 0xc, 0xfb, 0x36, 0xec, 0x5, 0x79, 0xc3, 0x7d, 0x7a, 0x62, 0x1a, 0x9, 0xf3, 0x8d, 0xdc, 0xc9, 0x99, 0xdd, 0x1e, 0xa6, 0xa, 0xd1, 0x13, 0x91, 0x3f, 0x32, 0x4a, 0x8b, 0x6f, 0xbb}}
	return a, nil
}

var _repoGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\xdd\x6a\xf2\x40\x10\x86\xcf\x05\xef\x61\xf0\xe0\x23\x11\x59\xcf\x85\xef\xc4\xaa\x50\x2a\x45\xaa\xbd\x80\x35\x19\x63\xaa\xc9\x6e\x27\x93\x4a\xba\xe4\xde\xcb\x66\xeb\x6f\x6b\x1b\xdb\x82\x7b\x92\xd9\xdd\xf9\x79\xdf\x87\x24\x5a\x06\x2b\x19\x21\x18\x23\x26\x2e\xbc\x97\x09\x96\x65\xb3\xd1\x6c\x18\x13\x2f\x00\x9f\x41\x8c\x48\x26\xb8\x51\xb4\xb2\x77\xd0\x8a\x14\x25\x2d\xb0\x39\x00\x00\x71\xa2\x15\x31\x78\x6e\x67\x57\x2b\x8a\x79\x99\xcf\x45\xa0\x92\xee\x53\x9c\xbe\x2e\xf3\x6e\x55\xe2\x32\x7c\xf7\x30\x86\x64\x1a\x21\x88\x61\xca\x31\x17\xd9\xb6\x9d\x5d\x5c\x68\xab\x68\xca\x34\x8a\x29\xe3\x31\x32\x23\xcd\xd4\x58\x6d\x90\x02\x99\xed\x8a\x9c\xd4\x07\xd4\x0a\x32\xa6\x3c\x60\x30\xfb\x26\x76\x85\x73\x68\xdb\xd1\x62\xd0\xdf\x5f\x94\x5b\x01\x98\x86\xce\xe8\x77\x7a\x16\x79\x1a\x80\x47\x76\x4e\xfb\x22\x59\x3e\xdc\xa6\x19\x12\x7b\xb5\xab\xec\x80\xa3\x03\x1f\x90\x48\xd1\xa9\x33\x42\xce\x29\x05\xab\x49\x84\x73\x71\x43\x28\x19\xeb\x8f\xf1\xc5\xd0\x76\xfd\x00\xe5\x97\x6e\x1f\x75\x78\x91\x8c\x1f\xba\x9d\xca\x97\xeb\x7b\x1d\xe0\x1a\x19\xfb\xc5\x84\xe2\x44\x52\x71\x87\x85\xa7\x77\x61\xf5\x3d\xed\x76\xb3\x42\x9f\xf7\x56\x1f\x56\xef\x3f\xfc\x3b\xe1\x65\x8e\x07\xb9\xc3\xde\x81\x8e\xf2\x4b\x90\xce\xc3\xd5\x51\x4e\x71\x8d\x01\x5f\x84\xd2\x3b\x7d\x73\x3a\x15\x5c\xff\x6f\xe9\x7e\x4e\xaf\x76\xcf\xce\x96\x73\x95\x5c\x1f\x73\x07\xf6\xf6\xcf\x21\x3f\xf8\x7d\xbd\x87\x6f\x01\x00\x00\xff\xff\x8d\x42\xe1\xde\xcb\x05\x00\x00")

func repoGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_repoGotemplate,
		"repo.gotemplate",
	)
}

func repoGotemplate() (*asset, error) {
	bytes, err := repoGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repo.gotemplate", size: 1483, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x7, 0x2a, 0x97, 0x70, 0x53, 0x7e, 0xb9, 0x1, 0x20, 0xcf, 0x6c, 0x5e, 0xf6, 0x6c, 0x11, 0xbd, 0x20, 0xf0, 0x67, 0x1b, 0x89, 0x8a, 0x9d, 0xd0, 0x5e, 0x36, 0x3d, 0x7e, 0x6, 0x22, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model.gotemplate": modelGotemplate,
	"new.gotemplate":   newGotemplate,
	"repo.gotemplate":  repoGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"model.gotemplate": {modelGotemplate, map[string]*bintree{}},
	"new.gotemplate":   {newGotemplate, map[string]*bintree{}},
	"repo.gotemplate":  {repoGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
